var searchIndex = JSON.parse('{\
"bones_asset":{"doc":"An asset interface for Bones.","t":[12,3,8,3,3,3,3,3,6,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Handle","ResAssetProviders","UntypedAssetProvider","UntypedHandle","add","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_dyn_eq","as_dyn_eq","as_dyn_eq","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","default","default","default","default","default","deref","deref_mut","deserialize","deserialize","dyn_eq","dyn_eq","dyn_eq","dyn_hash","dyn_hash","dyn_hash","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","get","get","get","get","get","get","get_bevy_handle","get_bevy_handle","get_bevy_handle_untyped","get_hash","get_hash","get_hash","get_mut","get_mut","get_mut","get_mut","get_mut","hash","hash","hash","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_bevy","label","new","new","new","normalize_relative_to","path","path","path","prelude","raw_clone","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","raw_drop","remove","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_remove","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typed","ulid","untyped","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["bones_assetd":["","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","A typed handle to an asset.","Type alias for getting the <code>AssetProviders</code> resource.","Trait implemented for asset providers that can return …","An untyped handle to an asset.","Add an asset provider for a specific asset type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","","Get an asset, given it’s handle","Get an asset, given it’s handle","Get the asset provider for the given type","Get a Bevy weak <code>Handle</code> from from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","","","","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","","Get an asset, given it’s handle","Get the asset provider for the given type","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","The optional sub-asset label","Create a new asset path.","Create a new asset handle, from it’s path and label.","Create a new handle from it’s path and label.","Take this path, treat it as a path relative to <code>base_path</code>, …","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","The prelude.","","","","","","","","","Remove an asset provider.","","","","","","","","","","","","Get the asset provider for the given asset type, if it …","Get the asset provider for the given asset type, if it …","","","","","","","","Remove an asset provider.","","","","","","","","Create a typed <code>Handle&lt;T&gt;</code> from this <code>UntypedHandle</code>.","","Convert the handle to an <code>UntypedHandle</code>.","","","","","","",""],"i":[4,0,0,0,0,0,0,0,0,0,0,1,23,24,1,4,5,5,7,7,8,8,23,24,1,4,5,7,8,5,7,8,23,24,1,4,5,7,8,23,24,1,4,5,7,8,4,5,7,8,4,5,7,8,4,5,7,8,1,4,5,7,8,4,4,7,8,5,7,8,5,7,8,5,7,8,5,7,8,23,24,1,4,5,7,8,1,1,4,4,5,5,7,7,8,8,37,22,22,23,24,1,7,8,7,5,7,8,37,22,22,24,1,5,7,8,23,24,1,4,5,7,8,23,24,1,4,5,7,8,23,24,1,4,5,7,8,23,24,1,4,5,7,8,5,5,5,7,8,5,5,7,8,0,4,5,7,8,4,5,7,8,1,4,5,7,8,23,24,1,4,5,7,8,1,1,23,24,1,4,5,7,8,1,23,24,1,4,5,7,8,8,4,7,23,24,1,4,5,7,8],"f":[0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[5,5],[[[7,[6]]],[[7,[6]]]],[8,8],[[]],[[]],[[]],[[]],[[],[[11,[9,10]]]],[[],[[11,[9,10]]]],[[],[[11,[9,10]]]],[[],[[11,[9,10]]]],[[],1],[[],4],[[],5],[[],[[7,[6]]]],[[],8],[4],[4],[[],[[12,[[7,[6]]]]]],[[],[[12,[8]]]],[3,13],[3,13],[3,13],[14],[14],[14],[[5,5],13],[[[7,[[0,[15,6]]]],7],13],[[8,8],13],[[5,16],17],[[[7,[6]],16],17],[[8,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[19],[19],[18],[18],[19],[18],[19],[18],[19],[8,20],[7,21],[[22,8],20],[[[23,[6]],[7,[6]]],21],[[[24,[6]],[7,[6]]],21],[1,[[23,[6]]]],[[[7,[[0,[25,6]]]]],[[26,[[0,[25,6]]]]]],[8,27],[[[7,[6]]],27],[[],28],[[],28],[[],28],[8,20],[7,21],[[22,8],20],[[[24,[6]],[7,[6]]],21],[1,[[24,[6]]]],[5],[[[7,[[0,[29,6]]]]]],[8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[10]]],[[11,[2,10]]]],[[[11,[10]]],[[11,[2,10]]]],[[[11,[10]]],[[11,[2,10]]]],[[[11,[10]]],[[11,[2,10]]]],[[[11,[10]]],[[11,[2,10]]]],[[[11,[10]]],[[11,[2,10]]]],[[[11,[10]]],[[11,[2,10]]]],[30,[[30,[2]]]],[30,[[30,[2]]]],[30,[[30,[2]]]],[30,[[30,[2]]]],[30,[[30,[2]]]],[30,[[30,[2]]]],[30,[[30,[2]]]],[31,[[31,[2]]]],[31,[[31,[2]]]],[31,[[31,[2]]]],[31,[[31,[2]]]],[31,[[31,[2]]]],[31,[[31,[2]]]],[31,[[31,[2]]]],[5,32],0,[[[34,[33]],[21,[35]]],5],[[[34,[33]],[21,[35]]],[[7,[6]]]],[[[34,[33]],[21,[35]]],8],[[5,36]],0,0,0,0,[[20,20]],[[20,20]],[[20,20]],[[20,20]],[20],[20],[20],[20],[1,[[11,[37]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[1,[[21,[[23,[6]]]]]],[1,[[21,[[24,[6]]]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[1,[[21,[[11,[37]]]]]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[8,[[7,[6]]]],[[],39],[[[7,[6]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"AssetProviders"],[8,"Any"],[8,"DynEq"],[3,"AssetProvidersResource"],[3,"AssetPath"],[8,"TypeUlid"],[3,"Handle"],[3,"UntypedHandle"],[8,"TypeData"],[3,"Global"],[3,"Box"],[4,"Result"],[15,"bool"],[8,"Hasher"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[3,"World"],[3,"World"],[15,"u8"],[4,"Option"],[8,"AssetProvider"],[3,"AssetProviderRef"],[3,"AssetProviderMut"],[8,"Asset"],[3,"Handle"],[3,"HandleUntyped"],[15,"u64"],[8,"Hash"],[3,"Arc"],[3,"Rc"],[3,"AssetPath"],[3,"PathBuf"],[8,"Into"],[3,"String"],[3,"Path"],[8,"UntypedAssetProvider"],[3,"TypeId"],[3,"Ulid"]]},\
"bones_bevy_asset":{"doc":"An asset integration between Bevy and bones.","t":[3,8,24,8,8,24,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,0,11,11,11,11,8,24,18,0,12,12,12,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,13,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,3,3,6,6,3,3,3,3,4,3,3,3,3,3,3,3,3,3,24,24,13,8,4,3,3,3,3,4,18,18,18,18,18,13,3,8,3,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,3,8,8,16,3,4,13,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,13,16,3,13,13,13,3,8,18,8,13,3,6,3,3,3,3,3,8,16,3,3,13,8,6,8,3,18,18,18,18,18,18,3,3,3,3,4,13,3,8,24,13,3,8,18,3,3,3,3,6,8,3,3,3,3,3,3,3,8,13,3,16,16,8,3,16,16,3,8,3,16,16,8,18,18,18,18,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,10,10,11,11,12,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,5,5,5,11,14,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,12,12,11,11,12,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,3,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,12,12,5,12,12,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,5,5,5,12,12,12,12,12,12,12,12,12,16,16,8,16,16,8,16,16,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,13,3,3,3,4,3,3,3,5,5,5,12,12,12,12,12,12,12,12,12],"n":["BevyAssets","BonesBevyAsset","BonesBevyAsset","BonesBevyAssetAppExt","BonesBevyAssetLoad","BonesBevyAssetLoad","add_bones_asset","as_any","as_any_mut","borrow","borrow","borrow_mut","deref","from","get_state","initialize","install_asset","into","into_any","into_any_arc","into_any_rc","load","prelude","try_from","try_into","type_id","vzip","TypeUlid","TypeUlid","ULID","bones","0","0","0","0","0","0","0","0","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","Affine2","Affine3A","AlreadyBorrowed","AnimatedSprite","AnimationBankSprite","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Atlas","AtlasSprite","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","AtomicRef","AtomicRefCell","AtomicRefMut","AtomicResource","AudioEvent","AudioEvents","AudioSource","BVec2","BVec3","BVec3A","BVec4","BVec4A","BevyWorld","BitFmt","BitSet","BitSetVec","BorrowError","BorrowMutError","Camera","CameraShake","CameraTraumaEvents","ClearColor","CommandQueue","Commands","Comp","CompMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","CoreStage","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","Deref","DerefMut","DispatcherExecutionFailed","EcsData","EcsError","Entities","EntitiesIterWith","Entity","EntityIterator","EulerRot","FALSE","FALSE","FALSE","FALSE","FALSE","First","FrameTime","FromWorld","Handle","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IVec2","IVec3","IVec4","Image","IntoBevy","IntoSystem","Iter","Key","KeyError","Last","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_W","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NotAscii","NotInitialized","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","Once","Param","Path2d","PlaySound","PostUpdate","PreUpdate","Quat","QueryItem","RAND_BITS","RawFns","Repeating","Res","ResAssetProviders","ResMut","Resources","ShakeNoise","SimpleSystemStage","Sprite","StageLabel","State","Stopwatch","System","SystemError","SystemParam","SystemResult","SystemStage","SystemStages","TIME_BITS","TRUE","TRUE","TRUE","TRUE","TRUE","Tile","TileLayer","Time","Timer","TimerMode","TooLong","Transform","TypeUlid","TypeUlid","TypeUlidCollision","TypedComponentOps","TypedEcsData","ULID","UVec2","UVec3","UVec4","Ulid","UlidMap","UntypedAssetProvider","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","UntypedHandle","UntypedResource","UntypedResourceInfo","UntypedResources","UnwrapMany","Update","Vec2","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3","Vec3A","Vec3Swizzles","Vec4","Vec4","Vec4","Vec4Swizzles","W","W","W","W","Window","World","X","X","X","X","X","X","X","X","X","X","X","X","X","XYZ","XZY","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","YXZ","YZX","Z","Z","Z","Z","Z","Z","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZXY","ZYX","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","active","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat2","add_mat3","add_mat3","add_mat3","add_mat4","add_mat4","add_system","add_system","add_system_to_stage","add_trauma","advance_exact","all","all","all","all","all","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","animations","any","any","any","any","any","any_orthogonal_vector","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","any_orthonormal_vector","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply_bitset","apply_bitset","apply_bitset","apply_bitset","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec2","as_dvec2","as_dvec3","as_dvec3","as_dvec3","as_dvec3","as_dvec4","as_dvec4","as_dvec4","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_f32","as_f64","as_ivec2","as_ivec2","as_ivec2","as_ivec3","as_ivec3","as_ivec3","as_ivec3","as_ivec4","as_ivec4","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_uvec2","as_uvec2","as_uvec2","as_uvec3","as_uvec3","as_uvec3","as_uvec3","as_uvec4","as_uvec4","as_uvec4","as_vec2","as_vec2","as_vec2","as_vec3","as_vec3","as_vec3","as_vec3a","as_vec3a","as_vec3a","as_vec4","as_vec4","as_vec4","atlas","atlas","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitset","bitset","bitset","bitset","bitset","bitset","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","ceil","ceil","ceil","cell","center","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clear_killed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_fn","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","cmp","cmp","cmp","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col","col","col","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","color","components","conjugate","conjugate","contains","contains","contains","contains","contains","create","create_bitset","cross","cross","cross","cross","cross","current","datetime","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","decay_rate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","delta","delta_seconds","delta_seconds_f64","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dquat","drop","drop","drop_fn","duration","dvec2","dvec3","dvec4","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","elapsed","elapsed","elapsed","elapsed_seconds","elapsed_seconds_f64","elapsed_secs","elapsed_secs","elapsed_secs_f64","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","exp","exp","exp","exp","exp","exp","exp","extend","extend","extend","extend","extend","extend","extend","extend","extend","f32","f64","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","filter_map","filter_map","finished","flip_x","flip_x","flip_x","flip_y","flip_y","flip_y","floor","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_type","fps","fract","fract","fract","fract","fract","fract","fract","frames","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_components","from_components_unsafe","from_components_unsafe","from_datetime","from_datetime_with_source","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_parts","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_rotation","from_rotation_arc","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_scaled_axis","from_seconds","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_str","from_string","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_vec4","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_xyzw","from_xyzw","generation","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_bevy_handle","get_bevy_handle","get_bevy_handle_untyped","get_by_uuid","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_many_mut","get_many_mut","get_many_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_resource","get_state","get_state","get_state","get_state","get_state","get_state","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","grid_size","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","i32","id","id","id","id","id","idx","image","impl_bitset","increment","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init_resource","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize_systems","insert","insert","insert","insert","insert","insert","insert_resource","insert_stage_after","insert_stage_before","install","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_bevy","into_bevy","into_bevy","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_untyped","into_untyped","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_alive","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_nil","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_paused","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","iter","iter","iter","iter","iter","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_mut","iter_mut","iter_mut","iter_mut","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_with","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","ivec2","ivec3","ivec4","just_finished","key","kill","killed","label","last_animation","layout","layout","length","length","length","length","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","line_breaks","load","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","look_to_rh","look_to_rh","maintain","map","map","mat2","mat3","mat3a","mat4","matrix2","matrix2","matrix3","matrix3","max","max","max","max","max","max","max","max","max","max","max","max","max","max_angle_rad","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_offset","min","min","min","min","min","min","min","min","min","min","min","min","min","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","mode","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat2","mul_mat3","mul_mat3","mul_mat3","mul_mat4","mul_mat4","mul_quat","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","mul_vec4","name","name","name","name","name","name","name","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_raw","next","next","next","next","next","next","nil","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_relative_to","not","not","not","not","not","not","not","not","not","not","not","orthographic_lh","orthographic_lh","orthographic_rh","orthographic_rh","orthographic_rh_gl","orthographic_rh_gl","partial_cmp","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","pause","pause","pause","paused","paused","percent","percent_left","perp","perp","perp","perp_dot","perp_dot","perp_dot","perspective_infinite_lh","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_infinite_rh","perspective_lh","perspective_lh","perspective_rh","perspective_rh","perspective_rh_gl","perspective_rh_gl","play","points","powf","powf","powf","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","project_point3","provide","provide","quat","queue","queue","queue","random","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","recip","recip","recip","recip","recip","recip","recip","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","remaining","remaining_secs","remove","remove","remove","remove","remove","remove","repeat","reset","reset","resource","rotate","rotate","rotate","rotation","round","round","round","round","round","round","round","row","row","row","row","row","row","row","run","run","run","run","run","run_initialized_system","run_system","scale","select","select","select","select","select","select","select","select","select","select","select","select","select","send","send","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set_duration","set_elapsed","set_elapsed","set_mode","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","size","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","stages","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat2","sub_mat3","sub_mat3","sub_mat3","sub_mat4","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swizzles","system","system","systems","thickness","tick","tick","tile_size","tiles","time","timer","times_finished_this_tick","timestamp_ms","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_scaled_axis","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","translation","translation","translation","transpose","transpose","transpose","transpose","transpose","transpose","transpose","trauma","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","try_borrow","try_borrow_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get","try_get","try_get_by_uuid","try_get_mut","try_init","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_remove","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","typed","u32","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","unpause","unpause","unpause","untyped","untyped","untyped_mut","unwrap_many","update","update_with_instant","uvec2","uvec3","uvec4","vec2","vec3","vec3a","vec4","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","w","w","w","w_axis","w_axis","with_core_stages","with_source","with_trauma","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","ww","ww","ww","ww","www","www","www","www","www","wwww","wwww","wwww","wwww","wwww","wwwx","wwwx","wwwx","wwwx","wwwx","wwwy","wwwy","wwwy","wwwy","wwwy","wwwz","wwwz","wwwz","wwwz","wwwz","wwx","wwx","wwx","wwx","wwx","wwxw","wwxw","wwxw","wwxw","wwxw","wwxx","wwxx","wwxx","wwxx","wwxx","wwxy","wwxy","wwxy","wwxy","wwxy","wwxz","wwxz","wwxz","wwxz","wwxz","wwy","wwy","wwy","wwy","wwy","wwyw","wwyw","wwyw","wwyw","wwyw","wwyx","wwyx","wwyx","wwyx","wwyx","wwyy","wwyy","wwyy","wwyy","wwyy","wwyz","wwyz","wwyz","wwyz","wwyz","wwz","wwz","wwz","wwz","wwz","wwzw","wwzw","wwzw","wwzw","wwzw","wwzx","wwzx","wwzx","wwzx","wwzx","wwzy","wwzy","wwzy","wwzy","wwzy","wwzz","wwzz","wwzz","wwzz","wwzz","wx","wx","wx","wx","wx","wxw","wxw","wxw","wxw","wxw","wxww","wxww","wxww","wxww","wxww","wxwx","wxwx","wxwx","wxwx","wxwx","wxwy","wxwy","wxwy","wxwy","wxwy","wxwz","wxwz","wxwz","wxwz","wxwz","wxx","wxx","wxx","wxx","wxx","wxxw","wxxw","wxxw","wxxw","wxxw","wxxx","wxxx","wxxx","wxxx","wxxx","wxxy","wxxy","wxxy","wxxy","wxxy","wxxz","wxxz","wxxz","wxxz","wxxz","wxy","wxy","wxy","wxy","wxy","wxyw","wxyw","wxyw","wxyw","wxyw","wxyx","wxyx","wxyx","wxyx","wxyx","wxyy","wxyy","wxyy","wxyy","wxyy","wxyz","wxyz","wxyz","wxyz","wxyz","wxz","wxz","wxz","wxz","wxz","wxzw","wxzw","wxzw","wxzw","wxzw","wxzx","wxzx","wxzx","wxzx","wxzx","wxzy","wxzy","wxzy","wxzy","wxzy","wxzz","wxzz","wxzz","wxzz","wxzz","wy","wy","wy","wy","wy","wyw","wyw","wyw","wyw","wyw","wyww","wyww","wyww","wyww","wyww","wywx","wywx","wywx","wywx","wywx","wywy","wywy","wywy","wywy","wywy","wywz","wywz","wywz","wywz","wywz","wyx","wyx","wyx","wyx","wyx","wyxw","wyxw","wyxw","wyxw","wyxw","wyxx","wyxx","wyxx","wyxx","wyxx","wyxy","wyxy","wyxy","wyxy","wyxy","wyxz","wyxz","wyxz","wyxz","wyxz","wyy","wyy","wyy","wyy","wyy","wyyw","wyyw","wyyw","wyyw","wyyw","wyyx","wyyx","wyyx","wyyx","wyyx","wyyy","wyyy","wyyy","wyyy","wyyy","wyyz","wyyz","wyyz","wyyz","wyyz","wyz","wyz","wyz","wyz","wyz","wyzw","wyzw","wyzw","wyzw","wyzw","wyzx","wyzx","wyzx","wyzx","wyzx","wyzy","wyzy","wyzy","wyzy","wyzy","wyzz","wyzz","wyzz","wyzz","wyzz","wz","wz","wz","wz","wz","wzw","wzw","wzw","wzw","wzw","wzww","wzww","wzww","wzww","wzww","wzwx","wzwx","wzwx","wzwx","wzwx","wzwy","wzwy","wzwy","wzwy","wzwy","wzwz","wzwz","wzwz","wzwz","wzwz","wzx","wzx","wzx","wzx","wzx","wzxw","wzxw","wzxw","wzxw","wzxw","wzxx","wzxx","wzxx","wzxx","wzxx","wzxy","wzxy","wzxy","wzxy","wzxy","wzxz","wzxz","wzxz","wzxz","wzxz","wzy","wzy","wzy","wzy","wzy","wzyw","wzyw","wzyw","wzyw","wzyw","wzyx","wzyx","wzyx","wzyx","wzyx","wzyy","wzyy","wzyy","wzyy","wzyy","wzyz","wzyz","wzyz","wzyz","wzyz","wzz","wzz","wzz","wzz","wzz","wzzw","wzzw","wzzw","wzzw","wzzw","wzzx","wzzx","wzzx","wzzx","wzzx","wzzy","wzzy","wzzy","wzzy","wzzy","wzzz","wzzz","wzzz","wzzz","wzzz","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","x_axis","x_axis","xw","xw","xw","xw","xw","xww","xww","xww","xww","xww","xwww","xwww","xwww","xwww","xwww","xwwx","xwwx","xwwx","xwwx","xwwx","xwwy","xwwy","xwwy","xwwy","xwwy","xwwz","xwwz","xwwz","xwwz","xwwz","xwx","xwx","xwx","xwx","xwx","xwxw","xwxw","xwxw","xwxw","xwxw","xwxx","xwxx","xwxx","xwxx","xwxx","xwxy","xwxy","xwxy","xwxy","xwxy","xwxz","xwxz","xwxz","xwxz","xwxz","xwy","xwy","xwy","xwy","xwy","xwyw","xwyw","xwyw","xwyw","xwyw","xwyx","xwyx","xwyx","xwyx","xwyx","xwyy","xwyy","xwyy","xwyy","xwyy","xwyz","xwyz","xwyz","xwyz","xwyz","xwz","xwz","xwz","xwz","xwz","xwzw","xwzw","xwzw","xwzw","xwzw","xwzx","xwzx","xwzx","xwzx","xwzx","xwzy","xwzy","xwzy","xwzy","xwzy","xwzz","xwzz","xwzz","xwzz","xwzz","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xxw","xxw","xxw","xxw","xxw","xxww","xxww","xxww","xxww","xxww","xxwx","xxwx","xxwx","xxwx","xxwx","xxwy","xxwy","xxwy","xxwy","xxwy","xxwz","xxwz","xxwz","xxwz","xxwz","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxxw","xxxw","xxxw","xxxw","xxxw","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxyw","xxyw","xxyw","xxyw","xxyw","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxzw","xxzw","xxzw","xxzw","xxzw","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xyw","xyw","xyw","xyw","xyw","xyww","xyww","xyww","xyww","xyww","xywx","xywx","xywx","xywx","xywx","xywy","xywy","xywy","xywy","xywy","xywz","xywz","xywz","xywz","xywz","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyxw","xyxw","xyxw","xyxw","xyxw","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyyw","xyyw","xyyw","xyyw","xyyw","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyzw","xyzw","xyzw","xyzw","xyzw","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xzw","xzw","xzw","xzw","xzw","xzww","xzww","xzww","xzww","xzww","xzwx","xzwx","xzwx","xzwx","xzwx","xzwy","xzwy","xzwy","xzwy","xzwy","xzwz","xzwz","xzwz","xzwz","xzwz","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzxw","xzxw","xzxw","xzxw","xzxw","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzyw","xzyw","xzyw","xzyw","xzyw","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzzw","xzzw","xzzw","xzzw","xzzw","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","y_axis","y_axis","yw","yw","yw","yw","yw","yww","yww","yww","yww","yww","ywww","ywww","ywww","ywww","ywww","ywwx","ywwx","ywwx","ywwx","ywwx","ywwy","ywwy","ywwy","ywwy","ywwy","ywwz","ywwz","ywwz","ywwz","ywwz","ywx","ywx","ywx","ywx","ywx","ywxw","ywxw","ywxw","ywxw","ywxw","ywxx","ywxx","ywxx","ywxx","ywxx","ywxy","ywxy","ywxy","ywxy","ywxy","ywxz","ywxz","ywxz","ywxz","ywxz","ywy","ywy","ywy","ywy","ywy","ywyw","ywyw","ywyw","ywyw","ywyw","ywyx","ywyx","ywyx","ywyx","ywyx","ywyy","ywyy","ywyy","ywyy","ywyy","ywyz","ywyz","ywyz","ywyz","ywyz","ywz","ywz","ywz","ywz","ywz","ywzw","ywzw","ywzw","ywzw","ywzw","ywzx","ywzx","ywzx","ywzx","ywzx","ywzy","ywzy","ywzy","ywzy","ywzy","ywzz","ywzz","ywzz","ywzz","ywzz","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yxw","yxw","yxw","yxw","yxw","yxww","yxww","yxww","yxww","yxww","yxwx","yxwx","yxwx","yxwx","yxwx","yxwy","yxwy","yxwy","yxwy","yxwy","yxwz","yxwz","yxwz","yxwz","yxwz","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxxw","yxxw","yxxw","yxxw","yxxw","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxyw","yxyw","yxyw","yxyw","yxyw","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxzw","yxzw","yxzw","yxzw","yxzw","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yyw","yyw","yyw","yyw","yyw","yyww","yyww","yyww","yyww","yyww","yywx","yywx","yywx","yywx","yywx","yywy","yywy","yywy","yywy","yywy","yywz","yywz","yywz","yywz","yywz","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyxw","yyxw","yyxw","yyxw","yyxw","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyyw","yyyw","yyyw","yyyw","yyyw","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyzw","yyzw","yyzw","yyzw","yyzw","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yzw","yzw","yzw","yzw","yzw","yzww","yzww","yzww","yzww","yzww","yzwx","yzwx","yzwx","yzwx","yzwx","yzwy","yzwy","yzwy","yzwy","yzwy","yzwz","yzwz","yzwz","yzwz","yzwz","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzxw","yzxw","yzxw","yzxw","yzxw","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzyw","yzyw","yzyw","yzyw","yzyw","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzzw","yzzw","yzzw","yzzw","yzzw","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","z","z","z","z","z","z","z","z","z","z","z_axis","z_axis","z_axis","z_axis","z_axis","zw","zw","zw","zw","zw","zww","zww","zww","zww","zww","zwww","zwww","zwww","zwww","zwww","zwwx","zwwx","zwwx","zwwx","zwwx","zwwy","zwwy","zwwy","zwwy","zwwy","zwwz","zwwz","zwwz","zwwz","zwwz","zwx","zwx","zwx","zwx","zwx","zwxw","zwxw","zwxw","zwxw","zwxw","zwxx","zwxx","zwxx","zwxx","zwxx","zwxy","zwxy","zwxy","zwxy","zwxy","zwxz","zwxz","zwxz","zwxz","zwxz","zwy","zwy","zwy","zwy","zwy","zwyw","zwyw","zwyw","zwyw","zwyw","zwyx","zwyx","zwyx","zwyx","zwyx","zwyy","zwyy","zwyy","zwyy","zwyy","zwyz","zwyz","zwyz","zwyz","zwyz","zwz","zwz","zwz","zwz","zwz","zwzw","zwzw","zwzw","zwzw","zwzw","zwzx","zwzx","zwzx","zwzx","zwzx","zwzy","zwzy","zwzy","zwzy","zwzy","zwzz","zwzz","zwzz","zwzz","zwzz","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zxw","zxw","zxw","zxw","zxw","zxww","zxww","zxww","zxww","zxww","zxwx","zxwx","zxwx","zxwx","zxwx","zxwy","zxwy","zxwy","zxwy","zxwy","zxwz","zxwz","zxwz","zxwz","zxwz","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxxw","zxxw","zxxw","zxxw","zxxw","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxyw","zxyw","zxyw","zxyw","zxyw","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxzw","zxzw","zxzw","zxzw","zxzw","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zyw","zyw","zyw","zyw","zyw","zyww","zyww","zyww","zyww","zyww","zywx","zywx","zywx","zywx","zywx","zywy","zywy","zywy","zywy","zywy","zywz","zywz","zywz","zywz","zywz","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyxw","zyxw","zyxw","zyxw","zyxw","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyyw","zyyw","zyyw","zyyw","zyyw","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyzw","zyzw","zyzw","zyzw","zyzw","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zzw","zzw","zzw","zzw","zzw","zzww","zzww","zzww","zzww","zzww","zzwx","zzwx","zzwx","zzwx","zzwx","zzwy","zzwy","zzwy","zzwy","zzwy","zzwz","zzwz","zzwz","zzwz","zzwz","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzxw","zzxw","zzxw","zzxw","zzxw","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzyw","zzyw","zzyw","zzyw","zzyw","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzzw","zzzw","zzzw","zzzw","zzzw","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","sound_source","volume","0","0","BVec2","BVec3","BVec3A","BVec4","BVec4A","w","x","x","x","y","y","y","z","z","Affine2","Affine3A","Mat2","Mat3","Mat3A","Mat4","Quat","Vec2","Vec3","Vec3A","Vec4","mat2","mat3","mat3a","mat4","matrix2","matrix3","quat","translation","translation","vec2","vec3","vec3a","vec4","w_axis","x","x","x_axis","x_axis","x_axis","y","y","y_axis","y_axis","y_axis","z","z_axis","z_axis","z_axis","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","dmat2","dmat3","dmat4","dquat","dvec2","dvec3","dvec4","matrix2","matrix3","translation","translation","w","w","w_axis","x","x","x","x","x_axis","x_axis","x_axis","y","y","y","y","y_axis","y_axis","y_axis","z","z","z","z_axis","z_axis","IVec2","IVec3","IVec4","ivec2","ivec3","ivec4","w","x","x","x","y","y","y","z","z","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Once","Repeating","Stopwatch","Time","Timer","TimerMode","UVec2","UVec3","UVec4","uvec2","uvec3","uvec4","w","x","x","x","y","y","y","z","z"],"q":["bones_bevy_asset","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_bevy_asset::prelude","","","","bones_bevy_asset::prelude::bonesbones_bevy_asset::prelude::bones::AudioEvent","","bones_bevy_asset::prelude::bones::EcsError","","bones_bevy_asset::prelude::bones::bool","","","","","","","","","","","","","","bones_bevy_asset::prelude::bones::f32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_bevy_asset::prelude::bones::f64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_bevy_asset::prelude::bones::i32","","","","","","","","","","","","","","","bones_bevy_asset::prelude::bones::swizzlesbones_bevy_asset::prelude::bones::time","","","","","","bones_bevy_asset::prelude::bones::u32","","","","","","","","","","","","","",""],"d":["Bones <code>SystemParam</code> for borrowing bevy <code>Assets</code> from the …","Trait that may be derived to implement a Bevy asset type.","Derive macro for the <code>BonesBevyAsset</code> trait.","Extension trait for <code>App</code> that makes it easy to register …","Trait implemented for types that may appear in the fields …","Derive macro for the <code>BonesBevyAssetLoad</code> trait.","Adds a <code>BonesBevyAsset</code> to the app, including it’s asset …","","","","","","","Returns the argument unchanged.","","","Install the asset loader for this type.","Calls <code>U::from(self)</code>.","","","","Allows the field to do any extra loading that it might …","The prelude.","","","","","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","The type’s <code>Ulid</code>.","Bones lib prelude","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The requested resource is already borrowed.","Component that may be added to entities with an <code>AtlasSprite</code>…","Component that may be added to an <code>AtlasSprite</code> to control …","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","An atlas image asset type, contains no data, but …","An animated sprite component.","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","A handle to a resource from a <code>Resources</code> collection.","An audio event that may be sent to the <code>AudioEvents</code> …","Resource containing the audio event queue.","The audio source asset type, contains no data, but …","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","Resource that contains a bevy world.","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","Makes an entity behave like a camera.","Component for an entity with camera shake.","Queue that can be used to send camera trauma events.","Resource for controlling the clear color.","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","A <code>StageLabel</code> for the 5 core stages.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Implements <code>Deref</code> for <em>single-item</em> structs. This is …","Implements <code>DerefMut</code> for <em>single-item</em> structs. This is …","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","Euler rotation sequences.","All false.","All false.","All false.","All false.","All false.","The first stage","This is a resource that stores the game’s fixed frame …","Creates an instance of the type this trait is implemented …","A typed handle to an asset.","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Image asset type, contains no data, but <code>Handle&lt;Image&gt;</code> is …","Helper trait for converting bones types to Bevy types.","Converts a function into a <code>System</code>.","The type of iterator this query item creates","A small ascii byte array stored on the stack and used …","An error that may be caused when creating a <code>Key</code>.","The fifth stage","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","The key is not ASCII.","A resource was not initialized in the <code>World</code> but the <code>System</code> …","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","Run once and stop.","The type of the parameter, ranging over the lifetime of …","A component for rendering a 2D line path, made up of a …","Play a sound.","The fourth stage","The second stage","A quaternion representing an orientation.","A type representing a component-joining entity query.","The number of bits in a Ulid’s random portion","Helper trait that is auto-implemented for all <code>Clone</code>-able …","Reset when finished.","<code>SystemParam</code> for getting read access to a resource.","Type alias for getting the <code>AssetProviders</code> resource.","<code>SystemParam</code> for getting mutable access to a resource.","A collection of resources.","Resource providing a noise source for <code>CameraShake</code> entities …","A collection of systems that will be run in order.","A 2D sprite component","Trait for things that may be used to identify a system …","The intermediate state for the parameter, that may be …","A Stopwatch is a struct that track elapsed time when …","Struct used to run a system function using the world.","This variant is for user-defined errors.","Trait used to implement parameters for <code>System</code> functions.","The result of a <code>System</code>’s execution.","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","The number of bits in a Ulid’s time portion","All true.","All true.","All true.","All true.","All true.","A tilemap tile component.","A tilemap layer component.","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","The key is too long.","The main transform component.","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Implements typed operations on top of a …","Helper trait that is auto-implemented for anything that …","The type’s <code>Ulid</code>.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key.","Trait implemented for asset providers that can return …","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","An untyped handle to an asset.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","Helper trait for unwraping each item in an array.","The third stage","A 2-dimensional vector.","","","","A 3-dimensional vector.","","","A 3-dimensional vector with SIMD support.","","A 4-dimensional vector with SIMD support.","","","","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","Information about the window the game is running in.","The <code>World</code> is simply a collection of <code>Resources</code>, and …","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Whether or not the camera is enabled and rendering.","Add an asset provider for a specific asset type.","Add a system to be run at the end of the stage.","","","","","","","","","Adds two quaternions.","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Adds two 4x4 matrices.","Add a system to this stage.","","Add a <code>System</code> to the stage with the given label.","Adds trauma to the camera, capping it at 1.0","Advance the time exactly by the given duration.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","The collection of animations in this animation bank.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Modify the iteration bitsetasts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a raw pointer to the underlying data in this cell.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","The atlas handle.","The texture atlas to use for the layer","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","","","","","","","","","","","","","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","Shorthand for combining bitsets with bit_or.","","","","","","Read the bitset containing the list of entites with this …","Read the bitset containing the list of entites with this …","Get the bitset representing which entities have this …","Returns the bitset indicating which entity indices have a …","Returns a bitset where each index where the bit is set to …","Shorthand for setting bits on the bitset container.","","","","","","","","","","","","","","","","","","","","","","","<code>bool</code> vector mask types. ","This is used create an instance of the system parame, …","","","Immutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lock the resource for reading.","","","","","","","","","","Borrow the component store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lock the resource for read-writing.","","","","","","","","","Mutably borrow the component store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Cell containing the raw pointer to the resource’s data","The camera will always restore to this position.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Clears the killed entity list.","","","","","","","","","","","Copies an <code>AtomicRef</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function that may be called to clone the resource from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","The color of the path.","Stores the world components.","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not the bitset contains the given entity.","Check whether or not a resource is in the store.","Creates a new <code>Entity</code> and returns it.","Creates a bitset big enough to contain the index of each …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","The current animation.","Gets the datetime of when this Ulid was created accurate …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The the length of time in seconds for the camera trauma to …","Free-standing, shorter equivalent to <code>Default::default()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns how much time has advanced since the last <code>update</code>, …","Returns how much time has advanced since the last <code>update</code>, …","Returns how much time has advanced since the last <code>update</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","An optional function that will be called to drop the …","Returns the duration of the timer.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the elapsed time since the last <code>reset</code> of the …","Returns the time elapsed on the timer. Guaranteed to be …","Returns how much time has advanced since <code>startup</code>, as …","Returns how much time has advanced since <code>startup</code>, as <code>f32</code> …","Returns how much time has advanced since <code>startup</code>, as <code>f64</code> …","Returns the elapsed time since the last <code>reset</code> of the …","Returns the time elapsed on the timer as an <code>f32</code>. See also …","Returns the elapsed time since the last <code>reset</code> of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a new <code>AtomicRef</code> for an optional component of the …","Make a new <code>AtomicRefMut</code> for an optional component of the …","Returns <code>true</code> if the timer has reached its duration at …","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite horizontally.","Whether or not to flip the tile horizontally.","Whether or not the flip the sprite vertically.","Whether or not the flip the sprite vertically.","Whether or not to flip tile vertically.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an <code>UntypedComponentStore</code> that is valid for the …","The frames per second to play the animation at.","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","The frames in the animation.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Safety","Creates a new Ulid with the given datetime","Creates a new Ulid with the given datetime and random …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Create a Ulid from separated parts.","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a transform from a rotation.","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Create a transform from a scale.","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a new timer with a given duration in seconds.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","Creates a Ulid from a Crockford Base32 encoded string","Create a transform from a translation.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion from a 4D vector.","Creates <code>Self</code> using data from the given <code>World</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new rotation quaternion.","Creates a new rotation quaternion.","Returns the generation of this <code>Entity</code>.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","","Get an asset, given it’s handle","Get an asset, given it’s handle","Borrow a component in the store, if it exists for the …","Gets an immutable reference to the component of <code>Entity</code>.","Get the asset provider for the given type","Gets an immutable reference to the component of <code>Entity</code>.","Gets an immutable reference to the component of <code>Entity</code>.","Get a read-only pointer to the component for the given …","Get’s the tile at the given position in the layer, …","Get the components of a certain type","Get a cell containing the resource data pointer for the …","Get a resource handle from the store.","Get a Bevy weak <code>Handle</code> from from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get the untyped component storage by the component’s UUID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","Returns a mutable reference to the wrapped value.","","Get an asset, given it’s handle","Mutably borrow a component in the store, if it exists for …","Gets a mutable reference to the component of <code>Entity</code>.","Get the asset provider for the given type","Gets a mutable reference to the component of <code>Entity</code>.","Get a mutable pointer to the component for the given <code>Entity</code>","Gets a resource handle from the store if it exists.","This is called to produce the intermediate state of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of the layer in tiles.","","","","","","","","","","","","","","","","","","","","The height of the camera in in-game pixels.","<code>i32</code> vector types. ","The unique identifier for the stage.","Returns a unique identifier for the stage.","","","The unique identifier for the stage.","The tile index in the tilemap texture.","The sprite image handle.","Implements the <code>BitSet</code> trait members for your type through …","Increment the random number, make sure that the ts millis …","Returns the index of this <code>Entity</code>.","","","","","","","","","","","","","","The current frame in the animation.","This is the current index in the animation, with an <code>idx</code> of …","","","","","","","","","","","","","","Initialize component storage for type <code>T</code>.","Initialize a resource of type <code>T</code> by inserting it’s …","Initialize the contained systems for the given <code>world</code>.","This will be called to give the parameter a chance to …","","","","Initializes the resources required to run this system …","","","","This should be called once to initialize the system, …","Initialize the systems in the stages agains the <code>World</code>.","Insert a component into the store.","Inserts a component for the given <code>Entity</code> index. Returns …","Inserts a component for the given <code>Entity</code> index.","Returns true if the entity already had a component of this …","Insert a new resource","Insert a resource.","Insert a resource.","Insert a new stage, after another existing stage","Insert a new stage, before another existing stage","Install the camera utilities on the given <code>SystemStages</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeonvert the type to a Bevy type.","","","Consumes the <code>AtomicRefCell</code>, returning the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to the internal, untyped <code>ComponentStore</code>.","Consume <code>Resources</code> and extract the underlying …","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Checks if the <code>Entity</code> is still alive.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Test if the Ulid is nil","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns <code>true</code> if the clock is currently paused.","","","","","","","","","","","","","","","","","","","","","Iterate over all components in the store.","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type.","Iterates immutably over all components of this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably iterate over all components in the store.","Iterates mutably over all components of this type. Very …","Iterates mutably over all components of this type.","Iterates mutably over all components of this type.","Mutably iterate over all the components in the store that …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterate over the entities and components in the given …","Return an iterator over the provided bitset.","Iterate over all the components in the store that match …","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","","","","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","Iterates over entities using the provided bitset.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Returns <code>true</code> only on the tick the timer reached its …","Create a new const <code>Key</code> parsed at compile time.","Kill an entity.","Returns entities in the killed list.","The optional sub-asset label","The last animation that was playing.","Get the layout of the components stored.","The memory layout of the resource","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","List of indexes into the <code>points</code> vector, for which that …","","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Remove the component info for dead entities.","Make a new <code>AtomicRef</code> for a component of the borrowed data.","Make a new <code>AtomicRefMut</code> for a component of the borrowed …","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","The maximum offset angle in radians that the camera shake …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","The maximum offset position that the camera shake can …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the mode of the timer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion and a 3D vector, returning the …","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion by a scalar value.","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies a quaternion and a 3D vector, returning the …","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","Transforms a 4D vector.","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","","Returns the underlying type name of the system.","","The human-readable name for the stage, used for error …","A best-effort name for the system, for diagnostic purposes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>AtomicRefCell</code> containing <code>value</code>.","Create a new unpaused <code>Stopwatch</code> with no elapsed time.","Creates a new timer with a given duration.","Safety","Create a new <code>CameraShake</code> component with the provided …","Constructs a new <code>Time</code> instance with a specific startup …","Create a <code>Key</code> from a string.","Create a new asset path.","Creates a new Ulid with the current time (UTC)","Create a new asset handle, from it’s path and label.","Create a new handle from it’s path and label.","Create a new <code>AtlasSprite</code> from the given atlas handle.","Create a arbitrary <code>UntypedComponentStore</code>.","Create a new tile layer","Creates a new <code>UntypedResource</code> from an instance of a Rust …","Create a new, empty stage, for the given label.","Creates a new <code>Entity</code> from the provided index and …","Create an empty <code>UntypedResources</code>.","Create an empty <code>Resources</code>.","Create a new <code>World</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Create a new <code>UntypedResource</code> from raw <code>UntypedResourceInfo</code>.","","","","","","","The ‘nil Ulid’.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Take this path, treat it as a path relative to <code>base_path</code>, …","","","","","","","","","","","","Creates a left-handed orthographic projection matrix with …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pauses the stopwatch. Any call to <code>tick</code> while paused will …","Pauses the Timer. Disables the ticking of the timer.","Stops the clock, preventing it from advancing until …","Returns <code>true</code> if the stopwatch is paused.","Returns <code>true</code> if the timer is paused.","Returns the percentage of the timer elapsed time (goes …","Returns the percentage of the timer remaining time (goes …","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Creates a right-handed perspective projection matrix with […","Play a sound.","The list of points in the path","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Transforms the given 3D vector as a point, applying …","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","List of audio events that haven’t been handled by the …","The event queue.","The system queue that will be run at the end of the stage","Gets the random section of this ulid","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drop the value at <code>ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remaining time using Duration","Returns the remaining time in seconds","Remove a component from an entity, returning the previous …","Removes the component of <code>Entity</code>. Returns <code>Some(T)</code> if the …","Remove an asset provider.","Removes the component of <code>Entity</code>.","If there is a previous value, <code>true</code> will be returned.","Remove a resource","Whether or not to repeat the animation","Resets the stopwatch. The reset doesn’t affect the …","Resets the timer. The reset doesn’t affect the <code>paused</code> …","Get a resource handle from the store.","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","The rotation of the entity.","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Execute the systems on the given <code>world</code>.","Execute the systems on the given <code>world</code>.","","Runs the system’s function using the provided <code>World</code>","This is run every time the system is executed","Run a system once, assuming any necessary initialization …","Run a system once.","The scale of the entity.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Add an event to the audio event queue.","Send a camera trauma event.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the tile at the given position, to a certain entity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the duration of the timer.","Sets the elapsed time of the stopwatch.","Sets the elapsed time of the timer without any other …","Sets the mode of the timer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","The logical size of the window’s client area.","Performs a spherical linear interpolation between <code>self</code> and …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","The stages in the collection, in the order that they will …","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traits adding swizzle methods to all vector types. ","Convert into a <code>System</code>.","","The list of systems in the stage.","The thickness of the line.","Advance the stopwatch by <code>delta</code> seconds. If the stopwatch …","Advance the timer by <code>delta</code> seconds. Non repeating timer …","The size of each tile in the layer.","The vector of tile slots in this layer.","Time functionality for the Bones framework.","The amount of time the current frame has been playing","Returns the number of times a repeating timer finished …","Gets the timestamp section of this ulid","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","Returns the rotation axis scaled by the rotation in …","Creates a Crockford Base32 encoded string that represents …","","","","","","Creates a Crockford Base32 encoded string that represents …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","The position of the entity in the world.","","","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Value from 0-1 that indicates the intensity of the shake. …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Attempts to immutably borrow the wrapped value, but …","Attempts to mutably borrow the wrapped value, but instead …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the asset provider for the given asset type, if it …","Get the components of a certain type","Gets a resource handle from the store if it exists.","Get the untyped component storage by the component’s UUID","Get the asset provider for the given asset type, if it …","Initialize component storage for type <code>T</code>.","Try to insert a resource.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Remove an asset providerreate a typed <code>Handle&lt;T&gt;</code> from this <code>UntypedHandle</code>.","<code>u32</code> vector types. ","","","","","","","","","","","","","","","","","","","","","","","","","Unpauses the stopwatch. Resume the effect of ticking on …","Unpauses the Timer. Resumes the ticking of the timer.","Resumes the clock if paused.","Convert the handle to an <code>UntypedHandle</code>.","Borrow the underlying <code>UntypedResources</code> store.","Mutably borrow the underlying <code>UntypedResources</code> store.","Unwrap all the items in an array.","Updates the internal time measurements.","Updates time with a specified <code>Instant</code>.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>SystemStages</code> collection, initialized with a stage …","Creates a new Ulid using data from the given random number …","Create a new <code>CameraShake</code> component with the provided …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternion.","","","Returns the vector part of the quaternion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The handle to the sound to play.","The volume to play the sound at.","","","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector with SIMD support.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vectorun once and stop.","Reset when finished.","A Stopwatch is a struct that track elapsed time when …","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","",""],"i":[0,0,0,0,0,0,170,3,3,3,3,3,3,3,3,3,171,3,3,3,3,172,0,3,3,3,3,0,0,154,0,74,83,86,87,88,91,93,60,14,15,16,17,18,19,20,21,22,23,43,45,46,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,0,0,0,0,53,54,55,56,57,109,0,0,0,24,27,28,29,30,31,32,33,35,36,37,38,39,0,0,0,0,0,0,173,0,0,109,0,0,0,0,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,14,15,16,17,18,19,20,21,22,23,17,20,23,14,15,16,17,18,19,20,21,22,23,14,15,16,17,18,19,20,21,22,23,15,16,17,19,20,22,23,90,127,14,15,16,17,18,19,20,21,22,23,43,45,46,79,174,0,81,109,109,0,0,93,0,79,0,0,0,0,0,0,0,0,174,0,0,127,0,0,0,0,93,53,54,55,56,57,0,0,0,0,0,90,0,0,0,127,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,175,176,0,0,177,176,0,0,0,177,175,0,17,20,23,46,0,0,14,15,16,17,18,19,20,21,22,23,43,45,46,58,58,14,15,16,17,18,19,20,21,22,23,43,45,46,58,58,15,16,17,19,20,22,23,45,46,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,58,58,14,15,16,17,18,19,20,21,22,23,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,84,40,41,28,14,14,15,15,29,30,31,32,16,16,17,17,36,37,38,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,28,14,14,15,15,29,30,31,16,16,17,17,36,37,38,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,29,36,28,30,37,31,38,178,48,49,50,51,53,54,55,56,57,14,15,32,16,39,18,19,82,53,54,55,56,57,15,16,19,15,16,19,15,16,19,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,173,61,62,62,74,64,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,79,80,81,82,70,83,138,84,50,51,85,86,73,87,87,88,89,67,40,90,91,92,92,93,93,94,61,95,95,96,62,97,98,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,106,69,107,108,109,41,118,127,4,58,58,58,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,24,24,27,27,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,33,33,35,35,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,21,22,22,22,23,23,23,43,43,43,45,45,45,46,46,46,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,58,53,53,54,54,55,55,56,56,57,57,24,24,27,27,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,33,33,35,35,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,29,28,30,31,14,21,43,15,16,22,45,17,23,46,79,87,92,93,95,98,106,58,53,54,55,56,57,21,22,23,43,45,46,39,32,14,18,43,15,16,19,45,17,20,46,36,37,38,28,14,15,29,31,16,17,36,37,38,18,19,20,21,22,23,43,45,46,64,28,14,15,29,31,32,16,17,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,14,18,21,15,16,19,22,17,20,23,18,21,43,19,22,45,19,22,45,20,23,46,100,101,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,53,54,55,56,57,21,21,22,22,23,23,43,43,45,45,46,46,53,54,55,56,57,53,54,55,56,57,53,54,55,56,57,21,21,22,22,23,23,43,43,45,45,46,46,0,53,54,55,56,57,67,61,62,68,69,0,53,54,55,56,57,21,21,22,22,23,23,43,43,45,45,46,46,53,54,55,56,57,0,174,74,64,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,61,95,96,62,62,97,98,99,100,68,101,102,103,149,152,157,104,71,71,49,48,47,116,116,117,117,60,72,72,105,106,69,107,108,109,41,118,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,74,64,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,71,49,48,47,116,117,60,72,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,157,50,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,14,15,16,17,18,19,20,14,15,16,17,18,19,20,69,74,64,75,76,77,78,79,80,81,82,70,83,84,50,51,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,68,101,102,103,104,60,72,105,106,69,107,108,109,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,157,74,64,75,76,77,78,79,80,81,82,83,84,50,51,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,68,101,102,103,104,60,72,105,106,69,107,108,109,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,74,64,75,76,77,78,79,80,81,82,83,84,50,51,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,68,101,102,103,104,60,72,105,106,69,107,108,109,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,64,93,106,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,28,29,30,31,36,37,38,28,29,30,31,36,37,38,94,4,32,39,67,61,62,60,108,69,0,15,16,19,22,45,82,93,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,50,0,74,64,75,76,78,79,80,83,84,50,51,85,86,87,88,89,67,40,91,92,93,94,95,96,97,98,99,100,102,103,60,72,105,69,107,108,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,51,51,51,74,70,86,73,88,91,116,117,60,118,24,27,29,32,16,17,33,35,74,86,73,88,91,117,60,118,24,27,29,32,16,17,33,35,95,98,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,28,29,30,31,36,37,38,14,15,16,17,18,19,20,14,15,16,17,18,19,20,14,14,15,15,32,16,16,17,17,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,0,0,0,14,15,32,16,17,39,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,0,68,104,157,76,0,0,0,64,79,87,92,93,95,98,106,58,53,54,55,56,57,21,22,23,43,45,46,79,87,92,93,95,98,106,58,53,54,55,56,57,21,22,23,43,45,46,75,76,51,51,51,75,76,75,64,79,87,92,93,95,98,106,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,64,79,87,92,93,95,98,106,58,53,54,55,56,57,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,14,15,16,18,19,21,22,43,45,0,0,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,70,73,76,99,100,102,99,100,102,14,15,16,17,18,19,20,64,125,125,126,126,66,66,66,66,75,76,77,78,79,80,81,82,70,84,50,51,73,87,87,89,90,90,92,93,93,94,95,96,97,98,99,100,101,102,103,47,60,106,109,41,127,127,58,53,53,54,54,55,55,56,56,57,57,24,24,27,27,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,33,33,35,35,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,68,78,14,15,16,17,18,19,20,78,74,64,64,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,93,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,28,28,14,14,14,15,15,15,15,15,29,30,30,30,31,31,32,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,33,35,36,37,37,38,38,39,18,18,18,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,22,22,22,22,23,23,23,23,23,23,23,43,43,43,45,45,45,45,46,46,46,46,46,46,46,32,39,24,28,14,29,30,33,36,37,18,24,33,14,15,32,16,17,39,18,19,20,21,22,23,43,45,46,27,28,30,31,32,35,37,38,39,24,27,28,29,30,31,33,35,36,37,38,24,27,28,29,30,31,33,35,36,37,38,24,27,28,29,30,31,33,35,36,37,38,24,27,28,29,30,31,33,35,36,37,38,67,67,72,93,93,28,29,30,31,36,37,38,28,30,31,32,37,38,39,24,28,30,33,37,24,33,24,27,29,31,32,33,35,36,38,39,27,35,24,29,31,32,27,28,30,32,35,37,39,93,27,28,30,31,35,37,38,53,54,55,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,103,32,39,32,39,32,39,27,31,35,38,27,28,30,31,32,35,37,38,39,27,28,30,31,32,35,37,38,39,27,28,30,31,32,35,37,38,39,103,24,27,28,30,31,33,35,37,38,29,36,24,28,30,33,37,27,31,35,38,32,39,76,14,15,32,16,17,39,18,19,20,21,22,23,43,45,46,93,93,103,24,27,28,30,31,33,35,37,38,32,39,180,74,74,64,64,75,75,76,76,78,78,79,79,80,80,83,83,84,84,50,50,51,51,85,85,86,86,87,87,88,88,89,89,67,67,40,40,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,102,102,103,103,60,60,72,72,105,105,69,69,107,107,108,108,41,41,4,4,58,58,53,53,54,54,55,55,56,56,57,57,24,24,27,27,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,33,33,35,35,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,32,39,106,164,135,135,136,137,138,67,40,61,62,68,101,105,107,108,95,98,95,105,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,79,87,92,93,95,98,106,58,53,54,55,56,57,21,22,23,43,45,46,138,62,68,164,135,64,135,137,138,67,40,62,68,4,174,61,62,116,117,118,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,101,79,87,92,93,95,98,106,58,53,54,55,56,57,21,22,23,43,45,46,84,0,178,181,48,109,48,102,99,0,93,106,14,15,16,17,18,19,20,21,22,23,43,45,46,78,100,14,15,16,17,18,19,20,21,22,23,43,45,46,105,4,178,174,61,62,48,47,116,117,118,47,49,138,67,62,68,107,108,4,49,49,0,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,58,53,53,54,54,55,55,56,56,57,57,24,24,27,27,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,33,33,35,35,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,74,64,125,126,66,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,152,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,182,92,103,64,150,147,151,148,149,152,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,67,108,24,27,28,29,30,31,32,33,35,36,37,38,39,69,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,14,15,16,17,18,19,20,32,39,14,15,16,17,18,19,20,21,22,23,93,14,15,32,16,17,39,18,19,20,51,28,14,15,29,31,32,17,36,37,38,39,18,19,20,21,22,23,43,45,46,138,67,61,62,68,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,138,67,62,68,138,67,62,68,69,173,138,67,61,61,62,62,62,68,69,0,0,0,76,0,69,69,92,82,68,157,14,15,32,16,17,39,18,19,20,14,15,32,16,17,39,18,19,20,14,15,32,16,17,39,18,19,20,14,15,32,16,17,39,18,19,20,94,95,27,31,35,38,27,31,35,38,27,31,35,38,27,31,35,38,4,70,73,0,0,0,0,24,33,27,35,14,15,16,17,18,19,20,21,22,23,43,45,46,50,14,15,16,17,18,19,20,21,22,23,43,45,46,50,14,15,16,17,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,21,22,23,43,45,46,76,24,24,24,27,27,28,28,28,28,28,14,14,15,15,29,29,29,30,30,30,30,30,31,31,31,31,32,32,32,32,16,16,17,17,33,33,35,35,36,36,36,37,37,37,37,38,38,38,38,39,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,14,15,16,17,18,19,20,28,28,14,14,15,15,29,29,30,30,31,31,32,16,16,17,17,36,36,37,37,38,38,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,29,36,28,30,37,31,38,32,39,28,29,30,31,36,37,38,29,36,28,30,32,37,39,28,30,32,31,38,178,181,48,47,109,48,47,53,54,55,24,27,28,14,15,29,30,31,16,17,33,35,36,37,38,18,19,20,21,22,23,43,45,46,28,14,15,29,30,31,32,16,17,36,37,38,39,18,19,20,21,22,23,64,75,76,138,50,51,87,92,93,95,98,100,68,101,104,48,106,107,108,4,53,54,55,56,57,14,15,16,17,18,19,20,21,22,23,43,45,46,104,150,147,151,148,149,152,93,14,15,32,16,17,39,18,19,20,14,15,16,17,18,19,20,92,53,54,55,56,57,21,22,23,43,45,46,31,38,31,38,31,38,64,93,106,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,92,95,98,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,75,76,51,75,76,76,76,14,18,21,14,18,21,31,38,31,38,31,38,31,38,31,38,31,38,31,38,80,94,14,15,16,17,18,19,20,24,27,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,33,35,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,14,15,16,17,18,19,20,14,15,16,17,18,19,20,31,38,90,127,0,80,85,41,93,183,74,64,75,76,77,78,79,80,81,82,83,84,50,51,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,68,101,102,103,104,60,72,105,106,69,107,108,109,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,183,74,64,75,76,77,78,79,80,81,82,83,84,50,51,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,68,101,102,103,104,60,72,105,106,69,107,108,109,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,53,54,55,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,14,15,16,17,18,19,20,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,76,76,138,67,40,62,68,107,78,75,76,4,14,18,21,103,14,15,16,17,18,19,20,28,29,30,31,36,37,38,178,49,48,47,47,4,4,103,14,15,16,17,18,19,20,21,22,23,43,45,46,80,85,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,101,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,76,75,76,76,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,43,43,43,43,43,43,43,43,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,43,43,43,43,43,43,43,43,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,14,15,16,17,18,19,20,21,22,23,89,32,39,53,54,55,56,57,14,15,16,17,18,19,20,21,22,23,43,45,46,49,28,14,14,15,15,29,30,31,32,16,16,17,17,36,37,38,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,28,14,14,15,15,29,30,31,16,16,17,17,36,37,38,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,29,36,28,30,37,31,38,28,28,14,14,15,15,29,29,30,30,31,31,32,32,16,16,17,17,36,36,37,37,38,38,39,39,18,18,19,19,20,20,21,21,22,22,23,23,43,43,45,45,46,46,0,184,47,48,94,75,76,101,101,0,78,76,93,14,15,32,16,17,39,18,19,20,21,22,23,43,45,46,32,39,24,27,28,29,30,31,33,35,36,37,38,24,27,28,29,30,31,33,35,36,37,38,32,39,74,64,75,76,77,78,79,80,81,82,83,84,50,51,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,68,101,102,103,104,60,72,105,106,69,107,108,109,41,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,27,31,35,38,32,39,93,125,126,66,87,90,93,93,127,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,24,28,30,33,37,27,31,35,38,27,31,24,28,30,33,37,27,31,35,38,27,31,103,24,27,33,35,28,29,30,31,36,37,38,50,15,16,17,19,20,22,23,45,46,64,64,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,40,105,108,105,40,105,108,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,14,15,16,17,18,19,20,40,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,98,0,74,77,78,80,82,83,84,50,51,85,86,88,89,91,94,96,97,99,100,101,102,103,69,41,75,76,51,95,108,108,185,51,51,0,0,0,0,0,0,0,74,64,150,125,126,147,66,151,148,136,75,137,76,77,78,79,80,81,82,70,83,138,84,50,51,85,86,73,87,88,89,67,40,90,91,92,93,94,61,95,96,62,97,98,99,100,68,101,102,103,149,152,157,104,71,49,48,47,116,117,60,72,105,106,69,107,108,109,41,118,127,4,58,53,54,55,56,57,24,27,28,14,15,29,30,31,32,16,17,33,35,36,37,38,39,18,19,20,21,22,23,43,45,46,55,39,20,23,46,31,38,49,93,50,24,27,28,29,30,31,33,35,36,37,38,14,15,32,16,17,39,18,19,20,21,22,23,43,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,53,54,55,14,15,39,18,19,20,21,22,23,43,45,46,28,30,31,36,37,38,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,177,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,176,175,15,32,16,17,39,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,53,54,55,14,15,39,18,19,20,21,22,23,43,45,46,28,30,31,36,37,38,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,176,17,20,23,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,177,175,176,14,15,16,17,18,19,20,21,22,23,43,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,54,55,15,39,19,20,22,23,45,46,28,30,31,37,38,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,176,17,20,23,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,175,176,15,16,17,19,20,22,23,45,46,186,186,187,188,0,0,0,0,0,55,53,54,55,53,54,55,54,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,27,0,24,27,0,0,0,0,31,14,15,28,30,31,14,15,28,30,31,15,28,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,35,33,35,39,20,38,39,18,19,20,36,37,38,39,18,19,20,36,37,38,39,19,20,37,38,0,0,0,0,0,0,23,21,22,23,21,22,23,22,23,175,176,0,177,176,0,177,175,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,177,175,176,176,176,176,176,176,177,175,176,176,177,175,176,177,175,176,175,176,177,175,176,176,177,175,176,177,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,177,176,176,176,176,176,177,175,176,176,177,175,176,177,175,176,175,176,177,175,176,176,177,175,176,177,175,176,175,176,176,175,176,175,176,175,176,175,176,175,176,176,176,176,176,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,177,175,176,176,176,176,176,176,177,175,176,176,177,175,176,177,175,176,175,176,177,175,176,176,177,175,176,177,175,176,175,176,175,176,176,175,176,175,176,175,176,177,175,176,176,176,176,176,176,177,175,176,176,177,175,176,177,175,176,175,176,177,175,176,176,177,175,176,177,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,176,176,176,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,175,176,176,176,176,176,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,176,176,176,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,176,176,176,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,175,176,176,175,176,175,176,175,176,79,79,0,0,0,0,0,0,0,0,0,0,46,43,45,46,43,45,46,45,46],"f":[0,0,0,0,0,0,[[]],[[],1],[[],1],[[]],[[]],[[]],[[[3,[2]]]],[[]],[4],[4],[5],[[]],[[[7,[6]]],[[7,[1,6]]]],[8,[[8,[1]]]],[9,[[9,[1]]]],[[10,11]],0,[[],12],[[],12],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[[24,24,25],26],[[27,27,25],26],[[28,28,25],26],[[14,14,25],26],[[15,15,25],26],[[29,29,25],26],[[30,30,25],26],[[31,31,25],26],[[32,32,25],26],[[16,16,25],26],[[17,17,25],26],[[33,33,34],26],[[35,35,34],26],[[36,36,34],26],[[37,37,34],26],[[38,38,34],26],[[39,39,34],26],[[18,18,34],26],[[19,19,34],26],[[20,20,34],26],0,[40],[41],[[28,28]],[[14,25],14],[[14,14],14],[[15,25],15],[[15,15],15],[[29,29]],[[30,30]],[[31,31]],[[32,32],32],[[16,25],16],[[16,16],16],[[17,17],17],[[17,25],17],[[36,36]],[[37,37]],[[38,38]],[[39,39],39],[[18,34],18],[[18,18],18],[[19,19],19],[[19,34],19],[[20,34],20],[[20,20],20],[[21,21],21],[[21,42],21],[[22,22],22],[[22,42],22],[[23,23],23],[[23,42],23],[[43,44],43],[[43,43],43],[[45,44],45],[[45,45],45],[[46,44],46],[[46,46],46],[[28,28]],[[14,14]],[[14,25]],[[15,15]],[[15,25]],[[29,29]],[[30,30]],[[31,31]],[[16,16]],[[16,25]],[[17,17]],[[17,25]],[[36,36]],[[37,37]],[[38,38]],[[18,34]],[[18,18]],[[19,34]],[[19,19]],[[20,34]],[[20,20]],[[21,21]],[[21,42]],[[22,22]],[[22,42]],[[23,23]],[[23,42]],[[43,44]],[[43,43]],[[45,45]],[[45,44]],[[46,44]],[[46,46]],[[29,29],29],[[36,36],36],[[28,28],28],[[30,30],30],[[37,37],37],[[31,31],31],[[38,38],38],[47],[[48,47]],[49,49],[[50,25]],[[51,52]],[53,26],[54,26],[55,26],[56,26],[57,26],[[14,14],25],[[15,15],25],[[32,32],25],[[16,16],25],[[39,39],34],[[18,18],34],[[19,19],34],0,[53,26],[54,26],[55,26],[56,26],[57,26],[15,15],[16,16],[19,19],[15],[16],[19],[15,15],[16,16],[19,19],[[58,59]],[[53,59]],[[54,59]],[[55,59]],[[56,59]],[[57,59]],[[24,59]],[[27,59]],[[28,59]],[[14,59]],[[15,59]],[[29,59]],[[30,59]],[[31,59]],[[32,59]],[[16,59]],[[17,59]],[[33,59]],[[35,59]],[[36,59]],[[37,59]],[[38,59]],[[39,59]],[[18,59]],[[19,59]],[[20,59]],[[21,59]],[[22,59]],[[23,59]],[[43,59]],[[45,59]],[[46,59]],[60],[[61,60]],[[62,60]],[[62,60]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[58,1],[53,1],[[],1],[[],1],[[],1],[54,1],[[],1],[55,1],[[],1],[[],1],[56,1],[[],1],[[],1],[[],1],[57,1],[[],1],[[],1],[24,1],[[],1],[27,1],[28,1],[[],1],[[],1],[14,1],[15,1],[[],1],[[],1],[29,1],[30,1],[[],1],[[],1],[31,1],[[],1],[32,1],[16,1],[[],1],[[],1],[17,1],[33,1],[[],1],[35,1],[[],1],[36,1],[[],1],[[],1],[37,1],[[],1],[38,1],[[],1],[39,1],[18,1],[[],1],[[],1],[19,1],[20,1],[[],1],[21,1],[[],1],[[],1],[[],1],[22,1],[[],1],[[],1],[[],1],[23,1],[43,1],[[],1],[[],1],[45,1],[[],1],[[],1],[[],1],[46,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[58,1],[53,1],[[],1],[54,1],[[],1],[55,1],[[],1],[[],1],[56,1],[57,1],[[],1],[24,1],[[],1],[[],1],[27,1],[28,1],[[],1],[14,1],[[],1],[15,1],[[],1],[[],1],[29,1],[30,1],[[],1],[31,1],[[],1],[[],1],[32,1],[[],1],[16,1],[[],1],[17,1],[[],1],[33,1],[[],1],[35,1],[[],1],[36,1],[[],1],[37,1],[38,1],[[],1],[[],1],[39,1],[18,1],[[],1],[[],1],[19,1],[20,1],[[],1],[21,1],[[],1],[[],1],[22,1],[23,1],[[],1],[[],1],[43,1],[[],1],[45,1],[46,1],[[],1],[29,36],[28,37],[30,37],[31,38],[14,18],[21,18],[43,18],[15,19],[16,19],[22,19],[45,19],[17,20],[23,20],[46,20],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[39,32],[32,39],[14,21],[18,21],[43,21],[15,22],[16,22],[19,22],[45,22],[17,23],[20,23],[46,23],[36,29],[37,28],[38,31],[28],[14],[15],[29],[31],[16],[17],[36],[37],[38],[18],[19],[20],[21],[22],[23],[43],[45],[46],[64],[28],[14],[15],[29],[31],[32],[16],[17],[36],[37],[38],[39],[18],[19],[20],[21],[22],[23],[43],[45],[46],[58,59],[53,59],[54,59],[55,59],[56,59],[57,59],[24,59],[27,59],[28,59],[14,59],[15,59],[29,59],[30,59],[31,59],[32,59],[16,59],[17,59],[33,59],[35,59],[36,59],[37,59],[38,59],[39,59],[18,59],[19,59],[20,59],[21,59],[22,59],[23,59],[43,59],[45,59],[46,59],[58,59],[53,59],[54,59],[55,59],[56,59],[57,59],[24,59],[27,59],[28,59],[14,59],[15,59],[29,59],[30,59],[31,59],[32,59],[16,59],[17,59],[33,59],[35,59],[36,59],[37,59],[38,59],[39,59],[18,59],[19,59],[20,59],[21,59],[22,59],[23,59],[43,59],[45,59],[46,59],[14,43],[18,43],[21,43],[15,45],[16,45],[19,45],[22,45],[17,46],[20,46],[23,46],[18,14],[21,14],[43,14],[19,15],[22,15],[45,15],[19,16],[22,16],[45,16],[20,17],[23,17],[46,17],0,0,[[],26],[[]],[[]],[[],26],[[65,26]],[[],65],[[],26],[[],26],[65],[[],66],[26],[[],65],[[]],[[],26],[[]],[[]],[65],[65],[[],26],[[],26],[65,26],[[]],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[21,42]],[[21,21]],[[22,22]],[[22,42]],[[23,23]],[[23,42]],[[43,44]],[[43,43]],[[45,44]],[[45,45]],[[46,44]],[[46,46]],[[53,53]],[[54,54]],[[55,55]],[[56,56]],[[57,57]],[53,44],[54,44],[55,44],[56,44],[57,44],[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[21,42]],[[21,21]],[[22,22]],[[22,42]],[[23,42]],[[23,23]],[[43,44]],[[43,43]],[[45,45]],[[45,44]],[[46,46]],[[46,44]],0,[[53,53]],[[54,54]],[[55,55]],[[56,56]],[[57,57]],[67,60],[61,60],[62,60],[68,60],[69,60],0,[[53,53],53],[[54,54],54],[[55,55],55],[[56,56],56],[[57,57],57],[[21,21]],[[21,42]],[[22,42]],[[22,22]],[[23,42]],[[23,23]],[[43,44]],[[43,43]],[[45,44]],[[45,45]],[[46,46]],[[46,44]],[[53,53]],[[54,54]],[[55,55]],[[56,56]],[[57,57]],0,[[]],[[]],[[]],[64,70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,73],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,73],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],0,0,[[14,14,14],14],[[15,15,15],15],[[16,16,16],16],[[17,17,17],17],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[21,21,21],21],[[22,22,22],22],[[23,23,23],23],[[43,43,43],43],[[45,45,45],45],[[46,46,46],46],[[14,25,25],14],[[15,25,25],15],[[16,25,25],16],[[17,25,25],17],[[18,34,34],18],[[19,34,34],19],[[20,34,34],20],[[14,25],14],[[15,25],15],[[16,25],16],[[17,25],17],[[18,34],18],[[19,34],19],[[20,34],20],[[14,25],14],[[15,25],15],[[16,25],16],[[17,25],17],[[18,34],18],[[19,34],19],[[20,34],20],[69],[74,74],[64,64],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[70,70],[83,83],[84,84],[50,50],[51,51],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[68,68],[101,101],[102,102],[103,103],[104,104],[60,60],[72,72],[105,105],[106,106],[69,69],[107,107],[108,108],[109,109],[41,41],[4,4],[58,58],[53,53],[54,54],[55,55],[56,56],[57,57],[24,24],[27,27],[28,28],[14,14],[15,15],[29,29],[30,30],[31,31],[32,32],[16,16],[17,17],[33,33],[35,35],[36,36],[37,37],[38,38],[39,39],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[43,43],[45,45],[46,46],[53,110],[54,110],[55,110],[24,110],[27,110],[28,110],[14,110],[15,110],[29,110],[30,110],[31,110],[16,110],[17,110],[33,110],[35,110],[36,110],[37,110],[38,110],[18,110],[19,110],[20,110],[21,110],[22,110],[23,110],[43,110],[45,110],[46,110],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[[],[[7,[111,6]]]],[58,[[7,[59,6]]]],[53,[[7,[59,6]]]],[54,[[7,[59,6]]]],[55,[[7,[59,6]]]],[56,[[7,[59,6]]]],[57,[[7,[59,6]]]],[24,[[7,[59,6]]]],[27,[[7,[59,6]]]],[28,[[7,[59,6]]]],[14,[[7,[59,6]]]],[15,[[7,[59,6]]]],[29,[[7,[59,6]]]],[30,[[7,[59,6]]]],[31,[[7,[59,6]]]],[32,[[7,[59,6]]]],[16,[[7,[59,6]]]],[17,[[7,[59,6]]]],[33,[[7,[59,6]]]],[35,[[7,[59,6]]]],[36,[[7,[59,6]]]],[37,[[7,[59,6]]]],[38,[[7,[59,6]]]],[39,[[7,[59,6]]]],[18,[[7,[59,6]]]],[19,[[7,[59,6]]]],[20,[[7,[59,6]]]],[21,[[7,[59,6]]]],[22,[[7,[59,6]]]],[23,[[7,[59,6]]]],[43,[[7,[59,6]]]],[45,[[7,[59,6]]]],[46,[[7,[59,6]]]],[[64,64],112],[[93,93],112],[[106,106],112],[[14,14],53],[[15,15],54],[[16,16],56],[[17,17],57],[[18,18],53],[[19,19],54],[[20,20],55],[[21,21],53],[[22,22],54],[[23,23],55],[[43,43],53],[[45,45],54],[[46,46],55],[[14,14],53],[[15,15],54],[[16,16],56],[[17,17],57],[[18,18],53],[[19,19],54],[[20,20],55],[[21,21],53],[[22,22],54],[[23,23],55],[[43,43],53],[[45,45],54],[[46,46],55],[[14,14],53],[[15,15],54],[[16,16],56],[[17,17],57],[[18,18],53],[[19,19],54],[[20,20],55],[[21,21],53],[[22,22],54],[[23,23],55],[[43,43],53],[[45,45],54],[[46,46],55],[[14,14],53],[[15,15],54],[[16,16],56],[[17,17],57],[[18,18],53],[[19,19],54],[[20,20],55],[[21,21],53],[[22,22],54],[[23,23],55],[[43,43],53],[[45,45],54],[[46,46],55],[[14,14],53],[[15,15],54],[[16,16],56],[[17,17],57],[[18,18],53],[[19,19],54],[[20,20],55],[[21,21],53],[[22,22],54],[[23,23],55],[[43,43],53],[[45,45],54],[[46,46],55],[[14,14],53],[[15,15],54],[[16,16],56],[[17,17],57],[[18,18],53],[[19,19],54],[[20,20],55],[[21,21],53],[[22,22],54],[[23,23],55],[[43,43],53],[[45,45],54],[[46,46],55],[[28,65],15],[[29,65],14],[[30,65],16],[[31,65],17],[[36,65],18],[[37,65],19],[[38,65],20],[[28,65],15],[[29,65],14],[[30,65],16],[[31,65],17],[[36,65],18],[[37,65],19],[[38,65],20],0,0,[32,32],[39,39],[[67,106],26],[[61,106],26],[[62,106],26],[[60,106],26],[108,26],[69,106],[[],60],[[15,15],15],[[16,16],16],[[19,19],19],[[22,22],22],[[45,45],45],0,[93,113],[[58,114],[[12,[115]]]],[[53,114],[[12,[115]]]],[[54,114],[[12,[115]]]],[[55,114],[[12,[115]]]],[[56,114],[[12,[115]]]],[[57,114],[[12,[115]]]],[[24,114],[[12,[115]]]],[[27,114],[[12,[115]]]],[[28,114],[[12,[115]]]],[[14,114],[[12,[115]]]],[[15,114],[[12,[115]]]],[[29,114],[[12,[115]]]],[[30,114],[[12,[115]]]],[[31,114],[[12,[115]]]],[[32,114],[[12,[115]]]],[[16,114],[[12,[115]]]],[[17,114],[[12,[115]]]],[[33,114],[[12,[115]]]],[[35,114],[[12,[115]]]],[[36,114],[[12,[115]]]],[[37,114],[[12,[115]]]],[[38,114],[[12,[115]]]],[[39,114],[[12,[115]]]],[[18,114],[[12,[115]]]],[[19,114],[[12,[115]]]],[[20,114],[[12,[115]]]],[[21,114],[[12,[115]]]],[[22,114],[[12,[115]]]],[[23,114],[[12,[115]]]],[[43,114],[[12,[115]]]],[[45,114],[[12,[115]]]],[[46,114],[[12,[115]]]],0,[[]],[[],74],[[],64],[[],75],[[],76],[[],78],[[],79],[[],80],[[],83],[[],84],[[],50],[[],51],[[],85],[[],86],[[],87],[[],88],[[],89],[[],67],[[],40],[[],91],[[],92],[[],93],[[],94],[[],95],[[],96],[[],97],[[],98],[[],99],[[],100],[[],102],[[],103],[[],60],[[],72],[[],105],[[],69],[[],107],[[],108],[[],41],[[],4],[[],58],[[],53],[[],54],[[],55],[[],56],[[],57],[[],24],[[],27],[[],28],[[],14],[[],15],[[],29],[[],30],[[],31],[[],32],[[],16],[[],17],[[],33],[[],35],[[],36],[[],37],[[],38],[[],39],[[],18],[[],19],[[],20],[[],21],[[],22],[[],23],[[],43],[[],45],[[],46],[51,52],[51,25],[51,34],[74],[70],[86],[73],[88],[91],[116],[117],[60],[118],[24],[27],[29],[32],[16],[17],[33],[35],[74],[86],[73],[88],[91],[117],[60],[118],[24],[27],[29],[32],[16],[17],[33],[35],[[],[[12,[95]]]],[[],[[12,[98]]]],[[],[[12,[58]]]],[[],[[12,[53]]]],[[],[[12,[54]]]],[[],[[12,[55]]]],[[],[[12,[56]]]],[[],[[12,[57]]]],[[],[[12,[24]]]],[[],[[12,[27]]]],[[],[[12,[28]]]],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[29]]]],[[],[[12,[30]]]],[[],[[12,[31]]]],[[],[[12,[32]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[33]]]],[[],[[12,[35]]]],[[],[[12,[36]]]],[[],[[12,[37]]]],[[],[[12,[38]]]],[[],[[12,[39]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[43]]]],[[],[[12,[45]]]],[[],[[12,[46]]]],[28,25],[29,25],[30,25],[31,25],[36,34],[37,34],[38,34],[[14,14],25],[[15,15],25],[[16,16],25],[[17,17],25],[[18,18],34],[[19,19],34],[[20,20],34],[[14,14],25],[[15,15],25],[[16,16],25],[[17,17],25],[[18,18],34],[[19,19],34],[[20,20],34],[[14,14],14],[[14,25],14],[[15,25],15],[[15,15],15],[[32,25],32],[[16,25],16],[[16,16],16],[[17,17],17],[[17,25],17],[[39,34],39],[[18,18],18],[[18,34],18],[[19,19],19],[[19,34],19],[[20,20],20],[[20,34],20],[[21,42],21],[[21,21],21],[[22,22],22],[[22,42],22],[[23,42],23],[[23,23],23],[[43,43],43],[[43,44],43],[[45,44],45],[[45,45],45],[[46,46],46],[[46,44],46],[[14,25]],[[14,14]],[[15,25]],[[15,15]],[[16,16]],[[16,25]],[[17,17]],[[17,25]],[[18,34]],[[18,18]],[[19,19]],[[19,34]],[[20,20]],[[20,34]],[[21,42]],[[21,21]],[[22,42]],[[22,22]],[[23,23]],[[23,42]],[[43,44]],[[43,43]],[[45,44]],[[45,45]],[[46,46]],[[46,44]],[[18,18],36],[[19,19,19],37],[[20,20,20,20],38],[[14,14],25],[[15,15],25],[[32,32],25],[[16,16],25],[[17,17],25],[[39,39],34],[[18,18],34],[[19,19],34],[[20,20],34],[[21,21],42],[[22,22],42],[[23,23],42],[[43,43],44],[[45,45],44],[[46,46],44],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[22,22],22],[[23,23],23],[[43,43],43],[[45,45],45],[[46,46],46],[[34,34,34,34],39],[68],[104],0,[76,52],[[34,34],18],[[34,34,34],19],[[34,34,34,34],20],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[63,26],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[119],[75,52],[76,52],[51,52],[51,25],[51,34],[75,25],[76,25],[75,34],[[64,64],26],[[79,79],26],[[87,87],26],[[92,92],26],[[93,93],26],[[95,95],26],[[98,98],26],[[106,106],26],[[58,58],26],[[53,53],26],[[54,54],26],[[55,55],26],[[56,56],26],[[57,57],26],[[24,24],26],[[27,27],26],[[28,28],26],[[14,14],26],[[15,15],26],[[29,29],26],[[30,30],26],[[31,31],26],[[32,32],26],[[16,16],26],[[17,17],26],[[33,33],26],[[35,35],26],[[36,36],26],[[37,37],26],[[38,38],26],[[39,39],26],[[18,18],26],[[19,19],26],[[20,20],26],[[21,21],26],[[22,22],26],[[23,23],26],[[43,43],26],[[45,45],26],[[46,46],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[120,[[12,[121,122]]]],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[14,25],15],[[15,25],17],[[16,25],17],[[18,34],19],[[19,34],20],[[21,42],22],[[22,42],23],[[43,44],45],[[45,44],46],0,0,[[53,123],[[124,[59]]]],[[54,123],[[124,[59]]]],[[55,123],[[124,[59]]]],[[24,123],[[124,[59]]]],[[27,123],[[124,[59]]]],[[28,123],[[124,[59]]]],[[14,123],[[124,[59]]]],[[15,123],[[124,[59]]]],[[29,123],[[124,[59]]]],[[30,123],[[124,[59]]]],[[31,123],[[124,[59]]]],[[16,123],[[124,[59]]]],[[17,123],[[124,[59]]]],[[33,123],[[124,[59]]]],[[35,123],[[124,[59]]]],[[36,123],[[124,[59]]]],[[37,123],[[124,[59]]]],[[38,123],[[124,[59]]]],[[18,123],[[124,[59]]]],[[19,123],[[124,[59]]]],[[20,123],[[124,[59]]]],[[21,123],[[124,[59]]]],[[22,123],[[124,[59]]]],[[23,123],[[124,[59]]]],[[43,123],[[124,[59]]]],[[45,123],[[124,[59]]]],[[46,123],[[124,[59]]]],[[53,65],[[124,[59]]]],[[54,65],[[124,[59]]]],[[55,65],[[124,[59]]]],[[24,65],[[124,[59]]]],[[27,65],[[124,[59]]]],[[28,65],[[124,[59]]]],[[14,65],[[124,[59]]]],[[15,65],[[124,[59]]]],[[29,65],[[124,[59]]]],[[30,65],[[124,[59]]]],[[31,65],[[124,[59]]]],[[16,65],[[124,[59]]]],[[17,65],[[124,[59]]]],[[33,65],[[124,[59]]]],[[35,65],[[124,[59]]]],[[36,65],[[124,[59]]]],[[37,65],[[124,[59]]]],[[38,65],[[124,[59]]]],[[18,65],[[124,[59]]]],[[19,65],[[124,[59]]]],[[20,65],[[124,[59]]]],[[21,65],[[124,[59]]]],[[22,65],[[124,[59]]]],[[23,65],[[124,[59]]]],[[43,65],[[124,[59]]]],[[45,65],[[124,[59]]]],[[46,65],[[124,[59]]]],[[53,65],[[124,[59]]]],[[54,65],[[124,[59]]]],[[55,65],[[124,[59]]]],[[24,65],[[124,[59]]]],[[27,65],[[124,[59]]]],[[28,65],[[124,[59]]]],[[14,65],[[124,[59]]]],[[15,65],[[124,[59]]]],[[29,65],[[124,[59]]]],[[30,65],[[124,[59]]]],[[31,65],[[124,[59]]]],[[16,65],[[124,[59]]]],[[17,65],[[124,[59]]]],[[33,65],[[124,[59]]]],[[35,65],[[124,[59]]]],[[36,65],[[124,[59]]]],[[37,65],[[124,[59]]]],[[38,65],[[124,[59]]]],[[18,65],[[124,[59]]]],[[19,65],[[124,[59]]]],[[20,65],[[124,[59]]]],[[21,65],[[124,[59]]]],[[22,65],[[124,[59]]]],[[23,65],[[124,[59]]]],[[43,65],[[124,[59]]]],[[45,65],[[124,[59]]]],[[46,65],[[124,[59]]]],[53,65],[54,65],[55,65],[24,65],[27,65],[28,65],[14,65],[15,65],[29,65],[30,65],[31,65],[16,65],[17,65],[33,65],[35,65],[36,65],[37,65],[38,65],[18,65],[19,65],[20,65],[21,65],[22,65],[23,65],[43,65],[45,65],[46,65],[[53,123],[[124,[59]]]],[[54,123],[[124,[59]]]],[[55,123],[[124,[59]]]],[[24,123],[[124,[59]]]],[[27,123],[[124,[59]]]],[[28,123],[[124,[59]]]],[[14,123],[[124,[59]]]],[[15,123],[[124,[59]]]],[[29,123],[[124,[59]]]],[[30,123],[[124,[59]]]],[[31,123],[[124,[59]]]],[[16,123],[[124,[59]]]],[[17,123],[[124,[59]]]],[[33,123],[[124,[59]]]],[[35,123],[[124,[59]]]],[[36,123],[[124,[59]]]],[[37,123],[[124,[59]]]],[[38,123],[[124,[59]]]],[[18,123],[[124,[59]]]],[[19,123],[[124,[59]]]],[[20,123],[[124,[59]]]],[[21,123],[[124,[59]]]],[[22,123],[[124,[59]]]],[[23,123],[[124,[59]]]],[[43,123],[[124,[59]]]],[[45,123],[[124,[59]]]],[[46,123],[[124,[59]]]],[70,[[124,[70]]]],[73,[[124,[73]]]],[76,26],0,0,0,0,0,0,[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[64,114],[[12,[115]]]],[[125,114],[[12,[115]]]],[[125,114],[[12,[115]]]],[[126,114],[[12,[115]]]],[[126,114],[[12,[115]]]],[[66,114],[[12,[115]]]],[[66,114],[[12,[115]]]],[[66,114],[[12,[115]]]],[[66,114],[[12,[115]]]],[[75,114],[[12,[115]]]],[[76,114],[[12,[115]]]],[[77,114],[[12,[115]]]],[[78,114],[[12,[115]]]],[[79,114],[[12,[115]]]],[[80,114],[[12,[115]]]],[[81,114],[[12,[115]]]],[[82,114],[[12,[115]]]],[[70,114],[[12,[115]]]],[[84,114],[[12,[115]]]],[[50,114],[[12,[115]]]],[[51,114],[[12,[115]]]],[[73,114],[[12,[115]]]],[[87,114],[[12,[115]]]],[[87,114],[[12,[115]]]],[[89,114],[[12,[115]]]],[[90,114],[[12,[115]]]],[[90,114],[[12,[115]]]],[[92,114],[[12,[115]]]],[[93,114],[[12,[115]]]],[[93,114],[[12,[115]]]],[[94,114],[[12,[115]]]],[[95,114],[[12,[115]]]],[[96,114],[[12,[115]]]],[[97,114],[[12,[115]]]],[[98,114],[[12,[115]]]],[[99,114],[[12,[115]]]],[[100,114],[[12,[115]]]],[[101,114],[[12,[115]]]],[[102,114],[[12,[115]]]],[[103,114],[[12,[115]]]],[[47,114],[[12,[115]]]],[[60,114],[[12,[115]]]],[[106,114],[[12,[115]]]],[[109,114],[[12,[115]]]],[[41,114],[[12,[115]]]],[[127,114],[[12,[115]]]],[[127,114],[[12,[115]]]],[[58,114],[[12,[115]]]],[[53,114],[[12,[115]]]],[[53,114],[[12,[115]]]],[[54,114],[[12,[115]]]],[[54,114],[[12,[115]]]],[[55,114],[[12,[115]]]],[[55,114],[[12,[115]]]],[[56,114],[[12,[115]]]],[[56,114],[[12,[115]]]],[[57,114],[[12,[115]]]],[[57,114],[[12,[115]]]],[[24,114],[[12,[115]]]],[[24,114],[[12,[115]]]],[[27,114],[[12,[115]]]],[[27,114],[[12,[115]]]],[[28,114],[[12,[115]]]],[[28,114],[[12,[115]]]],[[14,114],[[12,[115]]]],[[14,114],[[12,[115]]]],[[15,114],[[12,[115]]]],[[15,114],[[12,[115]]]],[[29,114],[[12,[115]]]],[[29,114],[[12,[115]]]],[[30,114],[[12,[115]]]],[[30,114],[[12,[115]]]],[[31,114],[[12,[115]]]],[[31,114],[[12,[115]]]],[[32,114],[[12,[115]]]],[[32,114],[[12,[115]]]],[[16,114],[[12,[115]]]],[[16,114],[[12,[115]]]],[[17,114],[[12,[115]]]],[[17,114],[[12,[115]]]],[[33,114],[[12,[115]]]],[[33,114],[[12,[115]]]],[[35,114],[[12,[115]]]],[[35,114],[[12,[115]]]],[[36,114],[[12,[115]]]],[[36,114],[[12,[115]]]],[[37,114],[[12,[115]]]],[[37,114],[[12,[115]]]],[[38,114],[[12,[115]]]],[[38,114],[[12,[115]]]],[[39,114],[[12,[115]]]],[[39,114],[[12,[115]]]],[[18,114],[[12,[115]]]],[[18,114],[[12,[115]]]],[[19,114],[[12,[115]]]],[[19,114],[[12,[115]]]],[[20,114],[[12,[115]]]],[[20,114],[[12,[115]]]],[[21,114],[[12,[115]]]],[[21,114],[[12,[115]]]],[[22,114],[[12,[115]]]],[[22,114],[[12,[115]]]],[[23,114],[[12,[115]]]],[[23,114],[[12,[115]]]],[[43,114],[[12,[115]]]],[[43,114],[[12,[115]]]],[[45,114],[[12,[115]]]],[[45,114],[[12,[115]]]],[[46,114],[[12,[115]]]],[[46,114],[[12,[115]]]],[[],68],0,[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],0,[[]],[[],64],[[]],[128],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],93],[129,93],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,28],[[]],[24,28],[[]],[[],14],[[],14],[[],15],[[]],[[],15],[16,15],[[],15],[[]],[[]],[28,30],[24,30],[27,31],[[]],[[]],[[],16],[[],16],[130,16],[17,16],[[],16],[15,16],[[]],[32,17],[[],17],[130,17],[[],17],[[],17],[[],17],[[]],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[33,37],[[]],[35,38],[[]],[[]],[[],18],[[],18],[[]],[[],19],[[]],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[39,20],[[]],[[],20],[[],20],[[]],[[],21],[[],21],[[],22],[[]],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[]],[[],23],[[],43],[[]],[[],43],[[],45],[[],45],[[],45],[[]],[[],46],[[]],[[],46],[[],46],[[],46],[[],46],[[],46],[27,32],[35,39],[25,24],[25,28],[25,14],[25,29],[25,30],[34,33],[34,36],[34,37],[34,18],[[25,14],24],[[34,18],33],[[],14],[[],15],[[],32],[[],16],[[],17],[[],39],[[],18],[[],19],[[],20],[[],21],[[],22],[[],23],[[],43],[[],45],[[],46],[[15,25],27],[[15,25],28],[[15,25],30],[[15,25],31],[[15,25],32],[[19,34],35],[[19,34],37],[[19,34],38],[[19,34],39],[[14,14,14],24],[[16,16,16,16],27],[[15,15,15],28],[[14,14],29],[[16,16,16],30],[[17,17,17,17],31],[[18,18,18],33],[[19,19,19,19],35],[[18,18],36],[[19,19,19],37],[[20,20,20,20],38],[[],24],[[],27],[[],28],[[],29],[[],30],[[],31],[[],33],[[],35],[[],36],[[],37],[[],38],[[],24],[[],27],[[],28],[[],29],[[],30],[[],31],[[],33],[[],35],[[],36],[[],37],[[],38],[[],24],[[],27],[[],28],[[],29],[[],30],[[],31],[[],33],[[],35],[[],36],[[],37],[[],38],[68,67],[68,67],[[[8,[[64,[68]]]]],72],[113,93],[113,93],[15,28],[14,29],[15,30],[17,31],[18,36],[19,37],[20,38],[[58,25,25,25],28],[[58,25,25,25],30],[[58,25,25,25],31],[[58,25,25,25],32],[[58,34,34,34],37],[[58,34,34,34],38],[[58,34,34,34],39],[29,24],[29,28],[29,30],[36,33],[36,37],[[29,14],24],[[36,18],33],[28,24],[28,27],[28,29],[28,31],[28,32],[37,33],[37,35],[37,36],[37,38],[37,39],[[28,15],27],[[37,19],35],[30,24],[30,29],[30,31],[30,32],[31,27],[31,28],[31,30],[31,32],[38,35],[38,37],[38,39],[[131,129],93],[32,27],[32,28],[32,30],[32,31],[39,35],[39,37],[39,38],[59,[[124,[53]]]],[59,[[124,[54]]]],[59,[[124,[55]]]],[59,[[124,[24]]]],[59,[[124,[27]]]],[59,[[124,[28]]]],[59,[[124,[14]]]],[59,[[124,[15]]]],[59,[[124,[29]]]],[59,[[124,[30]]]],[59,[[124,[31]]]],[59,[[124,[32]]]],[59,[[124,[16]]]],[59,[[124,[17]]]],[59,[[124,[33]]]],[59,[[124,[35]]]],[59,[[124,[36]]]],[59,[[124,[37]]]],[59,[[124,[38]]]],[59,[[124,[39]]]],[59,[[124,[18]]]],[59,[[124,[19]]]],[59,[[124,[20]]]],[59,[[124,[21]]]],[59,[[124,[22]]]],[59,[[124,[23]]]],[59,[[124,[43]]]],[59,[[124,[45]]]],[59,[[124,[46]]]],[32,103],[[15,15],32],[[19,19],39],[[14,14],32],[[18,18],39],[[15,15],32],[[19,19],39],[[32,15],27],[[32,15],31],[[39,19],35],[[39,19],38],[25,27],[25,28],[25,30],[25,31],[25,32],[34,35],[34,37],[34,38],[34,39],[25,27],[25,28],[25,30],[25,31],[25,32],[34,35],[34,37],[34,38],[34,39],[25,27],[25,28],[25,30],[25,31],[25,32],[34,35],[34,37],[34,38],[34,39],[15,103],[14,24],[15,27],[14,28],[14,30],[15,31],[18,33],[19,35],[18,37],[19,38],[[14,25],29],[[18,34],36],[[14,25,14],24],[[14,25,14],28],[[14,25,14],30],[[18,34,18],33],[[18,34,18],37],[[15,32,15],27],[[15,32,15],31],[[19,39,19],35],[[19,39,19],38],[15,32],[19,39],[[25,79],76],[[],14],[[],15],[[],32],[[],16],[[],17],[[],39],[[],18],[[],19],[[],20],[[],21],[[],22],[[],23],[[],43],[[],45],[[],46],[123,[[12,[93]]]],[123,[[12,[93,132]]]],[15,103],[14,24],[15,27],[14,28],[14,30],[15,31],[18,33],[19,35],[18,37],[19,38],[17,32],[20,39],[4],[4],[133],[133],[4],[133],[4],[133],[4],[4],[133],[4],[133],[4],[133],[4],[133],[4],[133],[4],[133],[4],[133],[4],[133],[4],[133],[133],[4],[4],[133],[4],[133],[4],[133],[4],[133],[133],[4],[4],[133],[133],[4],[133],[4],[133],[4],[4],[133],[133],[4],[4],[133],[4],[133],[133],[4],[133],[4],[133],[4],[4],[133],[133],[4],[133],[4],[4],[133],[4],[133],[133],[4],[4],[133],[133],[4],[133],[4],[4],[133],[4],[133],[4],[133],[133],[4],[4],[133],[133],[4],[133],[4],[4],[133],[133],[4],[4],[133],[133],[4],[133],[4],[133],[4],[133],[4],[4],[133],[4],[133],[4],[133],[133],[4],[133],[4],[4],[133],[133],[4],[133],[4],[133],[4],[133],[4],[4],[133],[133],[4],[4],[133],[133],[4],[4],[133],[133],[4],[133],[4],[[25,25,25,25],32],[[34,34,34,34],39],[106,44],[98,134],[95,124],[[135,98],134],[[136,95],124],[[137,95],124],[[138,68,106],124],[[67,106],124],[40,136],[[61,106],124],[[62,106],124],[[68,106],[[124,[134]]]],[[101,43],[[124,[106]]]],[105,72],[[107,93],[[124,[[8,[[64,[134]]]]]]]],[108,71],[95,139],[98,140],[95,140],[[105,93],[[8,[[64,[68]]]]]],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[123,124],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[],131],[[138,68]],[62],[68],[98,134],[95,124],[64],[[135,98],134],[[137,95],124],[[138,68,106],124],[[67,106],124],[40,137],[[62,106],124],[[68,106],[[124,[134]]]],[4,[[124,[71]]]],[4],[4],[4],[4],[4],[4],[58,141],[53,141],[54,141],[55,141],[56,141],[57,141],[24,141],[27,141],[28,141],[14,141],[15,141],[29,141],[30,141],[31,141],[32,141],[16,141],[17,141],[33,141],[35,141],[36,141],[37,141],[38,141],[39,141],[18,141],[19,141],[20,141],[21,141],[22,141],[23,141],[43,141],[45,141],[46,141],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],0,[79],[87],[92],[93],[95],[98],[106],[58],[53],[54],[55],[56],[57],[21],[22],[23],[43],[45],[46],0,0,[[],93],[[],93],[48,93],[109,93],0,0,0,0,[93,[[124,[93]]]],[106,44],[[14,65]],[[15,65]],[[16,65]],[[17,65]],[[18,65]],[[19,65]],[[20,65]],[[21,65]],[[22,65]],[[23,65]],[[43,65]],[[45,65]],[[46,65]],0,0,[[14,65]],[[15,65]],[[16,65]],[[17,65]],[[18,65]],[[19,65]],[[20,65]],[[21,65]],[[22,65]],[[23,65]],[[43,65]],[[45,65]],[[46,65]],[105],[4],[4],[4],[4],[4],[[48,4]],[[47,4]],[4],[4],[4],0,[[49,4]],[[138,68,106],124],[[67,106],124],[[62,106],124],[[68,106,134],26],[[107,93,104],[[124,[104]]]],[108],[4],[49,49],[49,49],[49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[58,6]]],[[7,[1,6]]]],[[[7,[53,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[54,6]]],[[7,[1,6]]]],[[[7,[55,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[56,6]]],[[7,[1,6]]]],[[[7,[57,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[24,6]]],[[7,[1,6]]]],[[[7,[27,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[28,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[14,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[15,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[29,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[30,6]]],[[7,[1,6]]]],[[[7,[31,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[32,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[16,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[17,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[33,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[35,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[36,6]]],[[7,[1,6]]]],[[[7,[37,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[38,6]]],[[7,[1,6]]]],[[[7,[39,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[18,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[19,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[20,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[21,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[22,6]]],[[7,[1,6]]]],[[[7,[23,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[43,6]]],[[7,[1,6]]]],[[[7,[45,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[46,6]]],[[7,[1,6]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[8,[[8,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[[]],[92,143],[103,144],[64],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[58,6]]],[[7,[59,6]]]],[[[7,[53,6]]],[[7,[59,6]]]],[[[7,[54,6]]],[[7,[59,6]]]],[[[7,[55,6]]],[[7,[59,6]]]],[[[7,[56,6]]],[[7,[59,6]]]],[[[7,[57,6]]],[[7,[59,6]]]],[[[7,[24,6]]],[[7,[59,6]]]],[[[7,[27,6]]],[[7,[59,6]]]],[[[7,[28,6]]],[[7,[59,6]]]],[[[7,[14,6]]],[[7,[59,6]]]],[[[7,[15,6]]],[[7,[59,6]]]],[[[7,[29,6]]],[[7,[59,6]]]],[[[7,[30,6]]],[[7,[59,6]]]],[[[7,[31,6]]],[[7,[59,6]]]],[[[7,[32,6]]],[[7,[59,6]]]],[[[7,[16,6]]],[[7,[59,6]]]],[[[7,[17,6]]],[[7,[59,6]]]],[[[7,[33,6]]],[[7,[59,6]]]],[[[7,[35,6]]],[[7,[59,6]]]],[[[7,[36,6]]],[[7,[59,6]]]],[[[7,[37,6]]],[[7,[59,6]]]],[[[7,[38,6]]],[[7,[59,6]]]],[[[7,[39,6]]],[[7,[59,6]]]],[[[7,[18,6]]],[[7,[59,6]]]],[[[7,[19,6]]],[[7,[59,6]]]],[[[7,[20,6]]],[[7,[59,6]]]],[[[7,[21,6]]],[[7,[59,6]]]],[[[7,[22,6]]],[[7,[59,6]]]],[[[7,[23,6]]],[[7,[59,6]]]],[[[7,[43,6]]],[[7,[59,6]]]],[[[7,[45,6]]],[[7,[59,6]]]],[[[7,[46,6]]],[[7,[59,6]]]],[67,68],[108,107],[24,24],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[35,35],[36,36],[37,37],[38,38],[39,39],[[69,106],26],[24,26],[27,26],[28,26],[14,26],[15,26],[29,26],[30,26],[31,26],[32,26],[16,26],[17,26],[33,26],[35,26],[36,26],[37,26],[38,26],[39,26],[18,26],[19,26],[20,26],[24,26],[27,26],[28,26],[14,26],[15,26],[29,26],[30,26],[31,26],[32,26],[16,26],[17,26],[33,26],[35,26],[36,26],[37,26],[38,26],[39,26],[18,26],[19,26],[20,26],[14,53],[15,54],[16,56],[17,57],[18,53],[19,54],[20,55],[32,26],[39,26],[14,44],[15,44],[16,44],[17,44],[18,44],[19,44],[20,44],[21,44],[22,44],[23,44],[93,26],[14,26],[15,26],[32,26],[16,26],[17,26],[39,26],[18,26],[19,26],[20,26],[51,26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[138,68],145],[67,145],[61,145],[62,145],[68,145],[53,146],[54,146],[55,146],[24,146],[27,146],[28,146],[14,146],[15,146],[29,146],[30,146],[31,146],[16,146],[17,146],[33,146],[35,146],[36,146],[37,146],[38,146],[18,146],[19,146],[20,146],[21,146],[22,146],[23,146],[43,146],[45,146],[46,146],[[138,68],145],[67,145],[62,145],[68,145],[[138,68,[9,[60]]],147],[[67,[9,[60]]],147],[[62,[9,[60]]],147],[[68,[9,[60]]],148],[69,149],[[[9,[60]]]],[[138,68,[9,[60]]],150],[[67,[9,[60]]],150],[[61,[9,[60]]],150],[[61,[9,[60]]]],[[62,[9,[60]]]],[[62,[9,[60]]]],[[62,[9,[60]]],150],[[68,[9,[60]]],151],[[69,60],152],[[42,42],21],[[42,42,42],22],[[42,42,42,42],23],[76,26],0,[[69,106]],[69,11],0,0,[68,153],0,[14,25],[15,25],[32,25],[16,25],[17,25],[39,34],[18,34],[19,34],[20,34],[14,25],[15,25],[32,25],[16,25],[17,25],[39,34],[18,34],[19,34],[20,34],[14,25],[15,25],[32,25],[16,25],[17,25],[39,34],[18,34],[19,34],[20,34],[[14,14,25],14],[[15,15,25],15],[[32,32,25],32],[[16,16,25],16],[[17,17,25],17],[[39,39,34],39],[[18,18,34],18],[[19,19,34],19],[[20,20,34],20],0,[[[95,[154]],10,11]],[[15,15,15],27],[[15,15,15],31],[[19,19,19],35],[[19,19,19],38],[[15,15,15],27],[[15,15,15],31],[[19,19,19],35],[[19,19,19],38],[[15,15,15],27],[[15,15,15],31],[[19,19,19],35],[[19,19,19],38],[[15,15,15],27],[[15,15,15],31],[[19,19,19],35],[[19,19,19],38],[4],[70,70],[73,73],[[14,14],29],[[15,15,15],28],[[16,16,16],30],[[17,17,17,17],31],0,0,0,0,[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[22,22],22],[[23,23],23],[[43,43],43],[[45,45],45],[[46,46],46],0,[14,25],[15,25],[16,25],[17,25],[18,34],[19,34],[20,34],[21,42],[22,42],[23,42],[43,44],[45,44],[46,44],0,[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[22,22],22],[[23,23],23],[[43,43],43],[[45,45],45],[[46,46],46],[14,25],[15,25],[16,25],[17,25],[18,34],[19,34],[20,34],[21,42],[22,42],[23,42],[43,44],[45,44],[46,44],[76,79],[[24,30]],[[24,28]],[[24,24]],[[27,31]],[[27,27]],[[28,25]],[[28,28]],[[28,15]],[[28,24]],[[28,16],16],[[14,25],14],[[14,14],14],[[15,25],15],[[15,15],15],[[29,25]],[[29,29]],[[29,14]],[[30,16]],[[30,15],15],[[30,24]],[[30,25]],[[30,30]],[[31,31]],[[31,17]],[[31,27]],[[31,25]],[[32,16]],[[32,15]],[[32,32],32],[[32,25],32],[[16,25],16],[[16,16],16],[[17,17],17],[[17,25],17],[[33,33]],[[33,37]],[[35,38]],[[35,35]],[[36,36]],[[36,18]],[[36,34]],[[37,37]],[[37,34]],[[37,33]],[[37,19]],[[38,20]],[[38,38]],[[38,35]],[[38,34]],[[39,34],39],[[39,19]],[[39,39],39],[[18,18],18],[[18,34],18],[[19,19],19],[[19,34],19],[[20,20],20],[[20,34],20],[[21,21],21],[[21,42],21],[[22,42],22],[[22,22],22],[[23,23],23],[[23,42],23],[[43,44],43],[[43,43],43],[[45,44],45],[[45,45],45],[[46,46],46],[[46,44],46],[[14,14,14],14],[[15,15,15],15],[[16,16,16],16],[[17,17,17],17],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[28,25]],[[28,28]],[[14,14]],[[14,25]],[[15,25]],[[15,15]],[[29,29]],[[29,25]],[[30,30]],[[30,25]],[[31,31]],[[31,25]],[[32,32]],[[16,25]],[[16,16]],[[17,17]],[[17,25]],[[36,36]],[[36,34]],[[37,34]],[[37,37]],[[38,34]],[[38,38]],[[39,39]],[[18,18]],[[18,34]],[[19,19]],[[19,34]],[[20,34]],[[20,20]],[[21,42]],[[21,21]],[[22,42]],[[22,22]],[[23,23]],[[23,42]],[[43,44]],[[43,43]],[[45,44]],[[45,45]],[[46,44]],[[46,46]],[[29,29],29],[[36,36],36],[[28,28],28],[[30,30],30],[[37,37],37],[[31,31],31],[[38,38],38],[[32,32],32],[[39,39],39],[[28,25],28],[[29,25],29],[[30,25],30],[[31,25],31],[[36,34],36],[[37,34],37],[[38,34],38],[[29,14],14],[[36,18],18],[[28,15],15],[[30,15],15],[[32,15],15],[[37,19],19],[[39,19],19],[[28,16],16],[[30,16],16],[[32,16],16],[[31,17],17],[[38,20],20],[[],155],[[],155],[48,155],[47,123],[109,155],0,0,[[53,65],[[124,[123]]]],[[54,65],[[124,[123]]]],[[55,65],[[124,[123]]]],[[24,65],[[124,[123]]]],[[27,65],[[124,[123]]]],[[28,65],[[124,[123]]]],[[14,65],[[124,[123]]]],[[15,65],[[124,[123]]]],[[29,65],[[124,[123]]]],[[30,65],[[124,[123]]]],[[31,65],[[124,[123]]]],[[16,65],[[124,[123]]]],[[17,65],[[124,[123]]]],[[33,65],[[124,[123]]]],[[35,65],[[124,[123]]]],[[36,65],[[124,[123]]]],[[37,65],[[124,[123]]]],[[38,65],[[124,[123]]]],[[18,65],[[124,[123]]]],[[19,65],[[124,[123]]]],[[20,65],[[124,[123]]]],[[21,65],[[124,[123]]]],[[22,65],[[124,[123]]]],[[23,65],[[124,[123]]]],[[43,65],[[124,[123]]]],[[45,65],[[124,[123]]]],[[46,65],[[124,[123]]]],[28],[14,14],[15,15],[29],[30],[31],[32,32],[16,16],[17,17],[36],[37],[38],[39,39],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[[],64],[[],75],[[52,79],76],[[],138],[[25,14,25],50],[156,51],[123,[[12,[87,90]]]],[[[124,[155]]],92],[[],93],[[[124,[155]]],95],[[[124,[155]]],98],[[[95,[97]]],100],[[153,124],68],[[43,14,[95,[97]]],101],[[],104],[[],48],[[44,44],106],[[],107],[[],108],[[],4],[[26,26],53],[[26,26,26],54],[[26,26,26,26],55],[[26,26,26],56],[[26,26,26,26],57],[[25,25],14],[[25,25,25],15],[[25,25,25],16],[[25,25,25,25],17],[[34,34],18],[[34,34,34],19],[[34,34,34,34],20],[[42,42],21],[[42,42,42],22],[[42,42,42,42],23],[[44,44],43],[[44,44,44],45],[[44,44,44,44],46],[157,104],[150,124],[147,124],[151,124],[148,124],[149,124],[152,124],[[],93],[14,14],[15,15],[32,32],[16,16],[17,17],[39,39],[18,18],[19,19],[20,20],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[92,158]],[53,53],[54,54],[55,55],[56,56],[57,57],[21],[22],[23],[43],[45],[46],[[25,25,25,25,25,25],31],[[34,34,34,34,34,34],38],[[25,25,25,25,25,25],31],[[34,34,34,34,34,34],38],[[25,25,25,25,25,25],31],[[34,34,34,34,34,34],38],[[64,64],[[124,[112]]]],[[93,93],[[124,[112]]]],[[106,106],[[124,[112]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],0,0,0,[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[123,[[12,[59,159]]]],[75],[76],[51],[75,26],[76,26],[76,25],[76,25],[14,14],[18,18],[21,21],[[14,14],25],[[18,18],34],[[21,21],42],[[25,25,25],31],[[34,34,34],38],[[25,25,25],31],[[34,34,34],38],[[25,25,25],31],[[34,34,34],38],[[25,25,25],31],[[34,34,34],38],[[25,25,25,25],31],[[34,34,34,34],38],[[25,25,25,25],31],[[34,34,34,34],38],[[25,25,25,25],31],[[34,34,34,34],38],[[80,[95,[77]],25]],0,[[14,25],14],[[15,25],15],[[16,25],16],[[17,25],17],[[18,34],18],[[19,34],19],[[20,34],20],[[],24],[[],27],[[],28],[[],28],[[],14],[[],14],[[],15],[[],15],[[],29],[[],29],[[],30],[[],30],[[],31],[[],31],[[],32],[[],32],[[],16],[[],16],[[],17],[[],17],[[],33],[[],35],[[],36],[[],36],[[],37],[[],37],[[],38],[[],38],[[],39],[[],39],[[],18],[[],18],[[],19],[[],19],[[],20],[[],20],[[],21],[[],21],[[],22],[[],22],[[],23],[[],23],[[],43],[[],43],[[],45],[[],45],[[],46],[[],46],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[31,15],15],[[38,19],19],[160],[160],[[25,25,25,25],32],0,0,0,[93,129],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[[134,134]],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[134],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[58,161],[53,161],[54,161],[55,161],[56,161],[57,161],[24,161],[27,161],[28,161],[14,161],[15,161],[29,161],[30,161],[31,161],[32,161],[16,161],[17,161],[33,161],[35,161],[36,161],[37,161],[38,161],[39,161],[18,161],[19,161],[20,161],[21,161],[22,161],[23,161],[43,161],[45,161],[46,161],[[[7,[58,6]]],162],[[[7,[53,6]]],162],[[[7,[54,6]]],162],[[[7,[55,6]]],162],[[[7,[56,6]]],162],[[[7,[57,6]]],162],[[[7,[24,6]]],162],[[[7,[27,6]]],162],[[[7,[28,6]]],162],[[[7,[14,6]]],162],[[[7,[15,6]]],162],[[[7,[29,6]]],162],[[[7,[30,6]]],162],[[[7,[31,6]]],162],[[[7,[32,6]]],162],[[[7,[16,6]]],162],[[[7,[17,6]]],162],[[[7,[33,6]]],162],[[[7,[35,6]]],162],[[[7,[36,6]]],162],[[[7,[37,6]]],162],[[[7,[38,6]]],162],[[[7,[39,6]]],162],[[[7,[18,6]]],162],[[[7,[19,6]]],162],[[[7,[20,6]]],162],[[[7,[21,6]]],162],[[[7,[22,6]]],162],[[[7,[23,6]]],162],[[[7,[43,6]]],162],[[[7,[45,6]]],162],[[[7,[46,6]]],162],[[53,59],[[124,[26]]]],[[54,59],[[124,[26]]]],[[55,59],[[124,[26]]]],[[24,59],[[124,[26]]]],[[27,59],[[124,[26]]]],[[28,59],[[124,[26]]]],[[14,59],[[124,[26]]]],[[15,59],[[124,[26]]]],[[29,59],[[124,[26]]]],[[30,59],[[124,[26]]]],[[31,59],[[124,[26]]]],[[32,59],[[124,[26]]]],[[16,59],[[124,[26]]]],[[17,59],[[124,[26]]]],[[33,59],[[124,[26]]]],[[35,59],[[124,[26]]]],[[36,59],[[124,[26]]]],[[37,59],[[124,[26]]]],[[38,59],[[124,[26]]]],[[39,59],[[124,[26]]]],[[18,59],[[124,[26]]]],[[19,59],[[124,[26]]]],[[20,59],[[124,[26]]]],[[21,59],[[124,[26]]]],[[22,59],[[124,[26]]]],[[23,59],[[124,[26]]]],[[43,59],[[124,[26]]]],[[45,59],[[124,[26]]]],[[46,59],[[124,[26]]]],[58,163],[53,163],[54,163],[55,163],[56,163],[57,163],[24,163],[27,163],[28,163],[14,163],[15,163],[29,163],[30,163],[31,163],[32,163],[16,163],[17,163],[33,163],[35,163],[36,163],[37,163],[38,163],[39,163],[18,163],[19,163],[20,163],[21,163],[22,163],[23,163],[43,163],[45,163],[46,163],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[14,14],14],[[15,15],15],[[16,16],16],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[14,14],14],[[14,25],14],[[15,15],15],[[15,25],15],[[16,16],16],[[16,25],16],[[17,25],17],[[17,17],17],[[18,18],18],[[18,34],18],[[19,34],19],[[19,19],19],[[20,34],20],[[20,20],20],[[21,21],21],[[21,42],21],[[22,42],22],[[22,22],22],[[23,23],23],[[23,42],23],[[43,44],43],[[43,43],43],[[45,44],45],[[45,45],45],[[46,46],46],[[46,44],46],[[14,25]],[[14,14]],[[15,15]],[[15,25]],[[16,25]],[[16,16]],[[17,17]],[[17,25]],[[18,18]],[[18,34]],[[19,34]],[[19,19]],[[20,34]],[[20,20]],[[21,21]],[[21,42]],[[22,42]],[[22,22]],[[23,42]],[[23,23]],[[43,44]],[[43,43]],[[45,44]],[[45,45]],[[46,46]],[[46,44]],[76,52],[76,25],[[138,68,106],124],[[67,106],124],[40,[[7,[164,6]]]],[[62,106],124],[[68,106,[124,[134]]],26],[[107,93],[[124,[104]]]],0,[75],[76],[4,71],[[14,14],14],[[18,18],18],[[21,21],21],0,[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[28,65],15],[[29,65],14],[[30,65],16],[[31,65],17],[[36,65],18],[[37,65],19],[[38,65],20],[4,[[12,[165]]]],[[49,4],[[12,[165]]]],[[48,4],[[12,[165]]]],[[47,4],[[12,[165]]]],0,[4,[[12,[165]]]],[4,[[12,[165]]]],0,[[53,14,14],14],[[54,15,15],15],[[56,16,16],16],[[57,17,17],17],[[53,18,18],18],[[54,19,19],19],[[55,20,20],20],[[53,21,21],21],[[54,22,22],22],[[55,23,23],23],[[53,43,43],43],[[54,45,45],45],[[55,46,46],46],[[80,81]],[[85,25]],[58,12],[53,12],[54,12],[55,12],[56,12],[57,12],[24,12],[27,12],[28,12],[14,12],[15,12],[29,12],[30,12],[31,12],[32,12],[16,12],[17,12],[33,12],[35,12],[36,12],[37,12],[38,12],[39,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[43,12],[45,12],[46,12],[[101,43,[124,[106]]]],[[58,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[53,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[54,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[55,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[56,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[57,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[24,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[27,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[28,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[14,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[15,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[29,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[30,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[31,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[32,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[16,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[17,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[33,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[35,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[36,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[37,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[38,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[39,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[18,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[19,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[20,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[21,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[22,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[23,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[43,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[45,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[46,[7,[59,6]]],[[12,[[7,[59,6]]]]]],[[76,52]],[[75,52]],[[76,52]],[[76,79]],[[21,166]],[[21,42]],[[21,44]],[[21,134]],[[21,167]],[[21,21]],[[21,168]],[[21,43]],[[22,168]],[[22,167]],[[22,166]],[[22,45]],[[22,134]],[[22,22]],[[22,42]],[[22,44]],[[23,42]],[[23,168]],[[23,46]],[[23,44]],[[23,23]],[[23,134]],[[23,166]],[[23,167]],[[43,44]],[[43,167]],[[43,166]],[[43,42]],[[43,134]],[[43,43]],[[43,168]],[[43,21]],[[45,45]],[[45,168]],[[45,22]],[[45,167]],[[45,134]],[[45,44]],[[45,166]],[[45,42]],[[46,44]],[[46,167]],[[46,42]],[[46,23]],[[46,46]],[[46,166]],[[46,134]],[[46,168]],[[21,134]],[[21,43]],[[21,42]],[[21,166]],[[21,168]],[[21,21]],[[21,167]],[[21,44]],[[22,44]],[[22,168]],[[22,45]],[[22,166]],[[22,134]],[[22,22]],[[22,167]],[[22,42]],[[23,134]],[[23,166]],[[23,42]],[[23,168]],[[23,46]],[[23,44]],[[23,167]],[[23,23]],[[43,21]],[[43,168]],[[43,167]],[[43,42]],[[43,166]],[[43,44]],[[43,43]],[[43,134]],[[45,166]],[[45,168]],[[45,45]],[[45,44]],[[45,22]],[[45,167]],[[45,42]],[[45,134]],[[46,23]],[[46,42]],[[46,134]],[[46,44]],[[46,166]],[[46,46]],[[46,167]],[[46,168]],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],0,[[32,32,25],32],[[39,39,34],39],[26,53],[26,54],[26,55],[26,56],[26,57],[25,14],[25,15],[25,16],[25,17],[34,18],[34,19],[34,20],[42,21],[42,22],[42,23],[44,43],[44,45],[44,46],0,[[28,28]],[[14,14],14],[[14,25],14],[[15,25],15],[[15,15],15],[[29,29]],[[30,30]],[[31,31]],[[32,32],32],[[16,25],16],[[16,16],16],[[17,17],17],[[17,25],17],[[36,36]],[[37,37]],[[38,38]],[[39,39],39],[[18,34],18],[[18,18],18],[[19,19],19],[[19,34],19],[[20,34],20],[[20,20],20],[[21,21],21],[[21,42],21],[[22,42],22],[[22,22],22],[[23,42],23],[[23,23],23],[[43,44],43],[[43,43],43],[[45,45],45],[[45,44],45],[[46,44],46],[[46,46],46],[[28,28]],[[14,14]],[[14,25]],[[15,25]],[[15,15]],[[29,29]],[[30,30]],[[31,31]],[[16,25]],[[16,16]],[[17,25]],[[17,17]],[[36,36]],[[37,37]],[[38,38]],[[18,18]],[[18,34]],[[19,19]],[[19,34]],[[20,34]],[[20,20]],[[21,42]],[[21,21]],[[22,22]],[[22,42]],[[23,42]],[[23,23]],[[43,43]],[[43,44]],[[45,44]],[[45,45]],[[46,46]],[[46,44]],[[29,29],29],[[36,36],36],[[28,28],28],[[30,30],30],[[37,37],37],[[31,31],31],[[38,38],38],[[],28],[[],28],[[],14],[[],14],[[],15],[[],15],[[],29],[[],29],[[],30],[[],30],[[],31],[[],31],[[],32],[[],32],[[],16],[[],16],[[],17],[[],17],[[],36],[[],36],[[],37],[[],37],[[],38],[[],38],[[],39],[[],39],[[],18],[[],18],[[],19],[[],19],[[],20],[[],20],[[],21],[[],21],[[],22],[[],22],[[],23],[[],23],[[],43],[[],43],[[],45],[[],45],[[],46],[[],46],0,[[],47],[47,47],0,0,[[75,52],75],[[76,52],76],0,0,0,0,[76,44],[93,131],[14],[15],[32],[16],[17],[39],[18],[19],[20],[21],[22],[23],[43],[45],[46],[32],[39],[24],[27],[28],[29],[30],[31],[33],[35],[36],[37],[38],[24],[27],[28],[29],[30],[31],[33],[35],[36],[37],[38],[[32,58]],[[39,58]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27],[31],[35],[38],[32,15],[39,19],[93,[[12,[123,169]]]],[[],155],[[],155],[[],155],[[],155],[[],155],[93,155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[],155],[[24,14],14],[[28,14],14],[[30,14],14],[[33,18],18],[[37,18],18],[[27,15],15],[[31,15],15],[[35,19],19],[[38,19],19],[[27,16],16],[[31,16],16],[[24,14],14],[[28,14],14],[[30,14],14],[[33,18],18],[[37,18],18],[[27,15],15],[[31,15],15],[[35,19],19],[[38,19],19],[[27,16],16],[[31,16],16],0,0,0,0,0,[28,28],[29,29],[30,30],[31,31],[36,36],[37,37],[38,38],0,[15,14],[16,14],[17,15],[19,18],[20,19],[22,21],[23,22],[45,43],[46,45],[64,[[12,[70,125]]]],[64,[[12,[73,126]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[123,[[12,[87]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[40,[[124,[136]]]],[105,[[12,[72,127]]]],[108,[[124,[71]]]],[[105,93],[[12,[[8,[[64,[68]]]],127]]]],[40,[[124,[137]]]],[105,[[12,[127]]]],[108,[[12,[127]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[14,[[124,[14]]]],[15,[[124,[15]]]],[16,[[124,[16]]]],[17,[[124,[17]]]],[18,[[124,[18]]]],[19,[[124,[19]]]],[20,[[124,[20]]]],[40,[[124,[[7,[164,6]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[58,123],[53,123],[54,123],[55,123],[56,123],[57,123],[24,123],[27,123],[28,123],[14,123],[15,123],[29,123],[30,123],[31,123],[32,123],[16,123],[17,123],[33,123],[35,123],[36,123],[37,123],[38,123],[39,123],[18,123],[19,123],[20,123],[21,123],[22,123],[23,123],[43,123],[45,123],[46,123],[98,95],0,[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[[],93],[75],[76],[51],[95,98],[108,107],[108,107],[[]],[51],[[51,156]],[[44,44],43],[[44,44,44],45],[[44,44,44,44],46],[[25,25],14],[[25,25,25],15],[[25,25,25],16],[[25,25,25,25],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],49],[[],93],[[25,25,14,25],50],[24],[27],[28],[29],[30],[31],[33],[35],[36],[37],[38],[14],[15],[32],[16],[17],[39],[18],[19],[20],[21],[22],[23],[43],[45],[46],[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,14],[15,14],[16,14],[17,14],[18,18],[19,18],[20,18],[21,21],[22,21],[23,21],[43,43],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[[]],[14,14],[15,14],[16,14],[17,14],[18,18],[19,18],[20,18],[21,21],[22,21],[23,21],[43,43],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[32,15],[16,16],[17,15],[39,19],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,14],[16,14],[17,14],[19,18],[20,18],[22,21],[23,21],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,14],[15,14],[16,14],[17,14],[18,18],[19,18],[20,18],[21,21],[22,21],[23,21],[43,43],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[[]],[14,14],[15,14],[16,14],[17,14],[18,18],[19,18],[20,18],[21,21],[22,21],[23,21],[43,43],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[[]],[14,15],[15,15],[16,16],[17,15],[18,19],[19,19],[20,19],[21,22],[22,22],[23,22],[43,45],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[[]],[14,17],[15,17],[16,17],[17,17],[18,20],[19,20],[20,20],[21,23],[22,23],[23,23],[43,46],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,14],[16,14],[17,14],[19,18],[20,18],[22,21],[23,21],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[17,14],[20,18],[23,21],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,14],[16,14],[17,14],[19,18],[20,18],[22,21],[23,21],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,14],[16,14],[17,14],[19,18],[20,18],[22,21],[23,21],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,14],[16,14],[17,14],[19,18],[20,18],[22,21],[23,21],[45,43],[46,43],[[]],[17,15],[20,19],[23,22],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,15],[16,16],[17,15],[19,19],[20,19],[22,22],[23,22],[45,45],[46,45],[[]],[17,17],[20,20],[23,23],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],[[]],[[]],[15,17],[16,17],[17,17],[19,20],[20,20],[22,23],[23,23],[45,46],[46,46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,14],29],[[15,15,15],28],[[16,16,16],30],[[17,17,17,17],31],0,0,[[25,25,25,25],32],0,0,[[25,25],14],[[25,25,25],15],[[25,25,25],16],[[25,25,25,25],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[18,18],36],[[19,19,19],37],[[20,20,20,20],38],[[34,34,34,34],39],[[34,34],18],[[34,34,34],19],[[34,34,34,34],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[42,42],21],[[42,42,42],22],[[42,42,42,42],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[44,44],43],[[44,44,44],45],[[44,44,44,44],46],0,0,0,0,0,0,0,0,0],"p":[[8,"Any"],[8,"Asset"],[3,"BevyAssets"],[3,"World"],[3,"App"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"LoadContext"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Vec2"],[3,"Vec3"],[3,"Vec3A"],[3,"Vec4"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[3,"Affine2"],[15,"f32"],[15,"bool"],[3,"Affine3A"],[3,"Mat3"],[3,"Mat2"],[3,"Mat3A"],[3,"Mat4"],[3,"Quat"],[3,"DAffine2"],[15,"f64"],[3,"DAffine3"],[3,"DMat2"],[3,"DMat3"],[3,"DMat4"],[3,"DQuat"],[3,"AssetProviders"],[3,"CommandQueue"],[15,"i32"],[3,"UVec2"],[15,"u32"],[3,"UVec3"],[3,"UVec4"],[3,"System"],[3,"SimpleSystemStage"],[3,"SystemStages"],[3,"CameraShake"],[3,"Time"],[3,"Duration"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[3,"BVec3A"],[3,"BVec4A"],[4,"EulerRot"],[8,"Reflect"],[3,"BitSetVec"],[3,"AtomicComponentStoreRef"],[3,"AtomicComponentStoreRefMut"],[8,"DynEq"],[3,"AtomicRefCell"],[15,"usize"],[3,"BitFmt"],[3,"ComponentStore"],[3,"UntypedComponentStore"],[3,"Entities"],[3,"AtomicRef"],[3,"AtomicResource"],[3,"AtomicComponentStore"],[3,"AtomicRefMut"],[3,"BevyWorld"],[3,"Stopwatch"],[3,"Timer"],[3,"AudioSource"],[3,"AnimatedSprite"],[4,"TimerMode"],[3,"AudioEvents"],[4,"AudioEvent"],[3,"AnimationBankSprite"],[3,"ShakeNoise"],[3,"Camera"],[3,"CameraTraumaEvents"],[3,"ClearColor"],[3,"Key"],[3,"FrameTime"],[3,"Window"],[4,"KeyError"],[3,"AssetProvidersResource"],[3,"AssetPath"],[3,"Ulid"],[3,"Path2d"],[3,"Handle"],[3,"Image"],[3,"Atlas"],[3,"UntypedHandle"],[3,"Sprite"],[3,"AtlasSprite"],[3,"TileLayer"],[3,"Tile"],[3,"Transform"],[3,"UntypedResource"],[3,"ComponentStores"],[3,"Entity"],[3,"UntypedResources"],[3,"Resources"],[4,"CoreStage"],[3,"DynamicStruct"],[8,"TypeData"],[4,"Ordering"],[3,"SystemTime"],[3,"Formatter"],[3,"Error"],[3,"Res"],[3,"ResMut"],[3,"Commands"],[8,"Hasher"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[15,"str"],[4,"Option"],[3,"BorrowError"],[3,"BorrowMutError"],[4,"EcsError"],[15,"never"],[15,"u128"],[3,"__m128"],[15,"u64"],[4,"DecodeError"],[3,"World"],[15,"u8"],[8,"AssetProvider"],[3,"AssetProviderRef"],[3,"AssetProviderMut"],[3,"TypedComponentOps"],[3,"Handle"],[3,"HandleUntyped"],[4,"TypeInfo"],[3,"TypeRegistration"],[3,"AssetPath"],[3,"Transform"],[8,"Iterator"],[3,"FieldIter"],[3,"ComponentBitsetIteratorMut"],[3,"UntypedComponentBitsetIteratorMut"],[3,"EntitiesIterWith"],[3,"ComponentBitsetIterator"],[3,"UntypedComponentBitsetIterator"],[3,"EntityIterator"],[3,"Layout"],[8,"TypeUlid"],[3,"String"],[3,"Instant"],[3,"UntypedResourceInfo"],[3,"Path"],[4,"ReflectPathError"],[3,"Demand"],[4,"ReflectMut"],[4,"ReflectOwned"],[4,"ReflectRef"],[8,"UntypedAssetProvider"],[3,"Error"],[15,"i8"],[15,"i16"],[15,"u16"],[4,"EncodeError"],[8,"BonesBevyAssetAppExt"],[8,"BonesBevyAsset"],[8,"BonesBevyAssetLoad"],[8,"QueryItem"],[8,"SystemParam"],[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"],[8,"SystemStage"],[8,"BitSet"],[8,"FromWorld"],[8,"StageLabel"],[8,"IntoBevy"],[8,"RawFns"],[8,"IntoSystem"],[8,"UnwrapMany"],[13,"PlaySound"],[13,"DispatcherExecutionFailed"],[13,"SystemError"]],"a":{"cross":[4469,4470,4471],"determinant":[4469,4470,4471],"magnitude":[3989,3990,3991,3992,3993,3994,3995,3996,3997],"magnitude2":[4007,4008,4009,4010,4011,4012,4013,4014,4015],"mix":[4016,4017,4018,4019,4020,4021,4022,4023,4024],"repeating":[5041],"scale":[2763,2764,2765,2766,2767,2768,2769],"wedge":[4469,4470,4471]}},\
"bones_bevy_asset_macros":{"doc":"","t":[24,24],"n":["BonesBevyAsset","BonesBevyAssetLoad"],"q":["bones_bevy_asset_macros",""],"d":["Derive macro for the <code>BonesBevyAsset</code> trait.","Derive macro for the <code>BonesBevyAssetLoad</code> trait."],"i":[0,0],"f":[0,0],"p":[]},\
"bones_bevy_renderer":{"doc":"Bevy plugin for rendering Bones framework games.","t":[3,3,4,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["BevyBonesEntity","BonesRendererPlugin","BonesStage","HasBonesWorld","SyncRender","SyncTime","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","component_ids","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","from","from","from","from_components","from_world","from_world","get_components","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","prelude","sync_time","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip","with_sync_time","world"],"q":["bones_bevy_renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Marker component for entities that are rendered in Bevy …","The bones renderer plugin.","<code>StageLabel</code> for stages added by bones to the Bevy world.","This is a trait that must be implemented for your Bevy …","This is the stage where the plugin reads the bones world …","This stage is run after <code>CoreStage::First</code> to synchronize …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new <code>BonesRendererPlugin</code> instance.","The prelude","Whether or not to synchronize the <code>Time</code> resource …","","","","","","","","","","","","","","","","Initialize the plugin with the <code>sync_time</code> option set to the …","Return a mutable reference to the bones world stored by …"],"i":[0,0,0,0,3,3,6,21,3,6,21,3,6,21,3,3,6,21,3,6,21,3,6,21,6,6,21,3,6,21,3,6,21,3,6,21,3,6,21,3,21,6,6,21,6,21,3,6,21,3,6,21,3,6,21,3,6,21,3,6,0,6,6,21,3,6,21,3,6,21,3,6,21,3,6,21,3,6,5],"f":[0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2],[2],[2],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[5]],7]],[[8,9]],[[],[[6,[5]]]],[10],[10],[10],[10],[10],[10],[[]],[[]],[[]],[10],[10],[10],[[]],[[]],[[]],[[]],[11],[12],[[]],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[[14,[13]]],[[14,[1,13]]]],[[[14,[13]]],[[14,[1,13]]]],[[[14,[13]]],[[14,[1,13]]]],[15,[[15,[1]]]],[15,[[15,[1]]]],[15,[[15,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[[],[[6,[5]]]],0,0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[]],[[]],[[]],[20,[[6,[5]]]],[[],11]],"p":[[8,"Any"],[3,"RenderAssets"],[4,"BonesStage"],[15,"str"],[8,"HasBonesWorld"],[3,"BonesRendererPlugin"],[3,"App"],[3,"Components"],[3,"Storages"],[15,"usize"],[3,"World"],[3,"World"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Result"],[3,"TypeId"],[4,"Option"],[15,"bool"],[3,"BevyBonesEntity"]]},\
"bones_bevy_utils":{"doc":"Bevy plugin for rendering Bones framework games.","t":[12,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11],"n":["0","BevyWorld","IntoBevy","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","clone_type_data","default","deref","deref_mut","from","from_world","into","into_any","into_any_arc","into_any_rc","into_bevy","prelude","to_owned","try_from","try_into","type_id","ulid","vzip"],"q":["bones_bevy_utils","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Resource that contains a bevy world.","Helper trait for converting bones types to Bevy types.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Convert the type to a Bevy type.","The prelude.","","","","","",""],"i":[2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,12,0,2,2,2,2,2,2],"f":[0,0,0,[[],1],[[],1],[[]],[[]],[2,2],[[]],[[],[[5,[3,4]]]],[[],2],[2],[2],[[]],[6],[[]],[[[5,[4]]],[[5,[1,4]]]],[7,[[7,[1]]]],[8,[[8,[1]]]],[[]],0,[[]],[[],9],[[],9],[[],10],[[],11],[[]]],"p":[[8,"Any"],[3,"BevyWorld"],[8,"TypeData"],[3,"Global"],[3,"Box"],[3,"World"],[3,"Arc"],[3,"Rc"],[4,"Result"],[3,"TypeId"],[3,"Ulid"],[8,"IntoBevy"]]},\
"bones_ecs":{"doc":"Bones ECS","t":[13,13,8,4,8,13,8,13,13,8,8,3,0,0,0,12,5,0,10,0,10,10,0,0,0,0,10,12,12,3,3,3,3,3,12,3,8,3,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,14,14,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,16,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,3,3,3,8,3,3,24,24,13,2,4,8,13,18,2,13,6,18,8,24,13,2,18,3,2,3,11,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,13,13,13,13,3,8,8,3,13,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,11,12,11,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,8,16,3,3,16,3,8,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,24,18,3,6],"n":["AlreadyBorrowed","DispatcherExecutionFailed","EcsData","EcsError","FromWorld","NotInitialized","RawFns","SystemError","TypeUlidCollision","TypedEcsData","UnwrapMany","World","atomic","bitset","components","components","default","entities","from_world","prelude","raw_clone","raw_drop","resources","stage","system","ulid","unwrap_many","0","0","AtomicRef","AtomicRefCell","AtomicRefMut","BorrowError","BorrowMutError","0","BitFmt","BitSet","BitSetVec","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitor","bitset","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","contains","create_bitset","default","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","from","from","impl_bitset","into","into","raw_clone","raw_drop","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","TypedComponentOps","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","bitset","bitset","bitset","bitset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","contains","default","default","default","drop","for_type","from","from","from","from","from","from","from","from","from","from","from","from_components","from_components_unsafe","from_components_unsafe","get","get","get","get","get","get","get_by_uuid","get_many_mut","get_many_mut","get_many_mut","get_mut","get_mut","get_mut","get_mut","init","insert","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_untyped","iter","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","iter_mut","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","layout","new","new","next","next","next","next","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","remove","remove","remove","remove","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get_by_uuid","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Entities","EntitiesIterWith","Entity","EntityIterator","Iter","QueryItem","apply_bitset","bitset","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_killed","clone","clone","clone_into","clone_into","cmp","create","default","eq","fmt","from","from","from","from","generation","hash","index","into","into","into","into","into_iter","into_iter","is_alive","iter_with","iter_with_bitset","iter_with_bitset","kill","killed","new","next","next","partial_cmp","raw_clone","raw_clone","raw_drop","raw_drop","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ulid","vzip","vzip","vzip","vzip","0","AlreadyBorrowed","AtomicRef","AtomicRefCell","AtomicRefMut","BitSet","BorrowError","BorrowMutError","Deref","DerefMut","DispatcherExecutionFailed","EcsData","EcsError","FromWorld","NotInitialized","RAND_BITS","RawFns","SystemError","SystemResult","TIME_BITS","TypeUlid","TypeUlid","TypeUlidCollision","TypedEcsData","ULID","Ulid","UnwrapMany","World","as_ptr","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","components","datetime","default","default","default","default","deref","deref","deref_mut","eq","eq","filter_map","filter_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_datetime","from_datetime_with_source","from_parts","from_str","from_string","from_world","get_mut","get_resource","hash","increment","init_resource","insert_resource","into","into","into","into","into","into","into","into","into_inner","is_nil","maintain","map","map","new","new","new","nil","partial_cmp","partial_cmp","provide","random","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","resource","run_initialized_system","run_system","timestamp_ms","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","to_string","try_borrow","try_borrow_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_source","0","0","AtomicResource","Resources","UntypedResource","UntypedResourceInfo","UntypedResources","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell","clone","clone","clone","clone_fn","clone_into","clone_into","clone_into","contains","default","default","drop","drop_fn","from","from","from","from","from","get","get","insert","insert","into","into","into","into","into","into_untyped","layout","new","new","new","new_raw","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","remove","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_get","try_insert","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","untyped","untyped_mut","vzip","vzip","vzip","vzip","vzip","CommandQueue","Commands","CoreStage","First","Last","PostUpdate","PreUpdate","SimpleSystemStage","StageLabel","SystemStage","SystemStages","Update","add","add_system","add_system","add_system_to_stage","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref_mut","fmt","fmt","from","from","from","from","from","get_state","id","id","id","id","id","initialize","initialize","initialize","initialize_systems","insert_stage_after","insert_stage_before","into","into","into","into","into","name","name","name","name","name","new","queue","raw_clone","raw_clone","raw_drop","raw_drop","run","run","run","stages","systems","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ulid","vzip","vzip","vzip","vzip","vzip","with_core_stages","Comp","CompMut","IntoSystem","Param","Res","ResMut","State","System","SystemParam","apply_bitset","apply_bitset","apply_bitset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","fmt","from","from","from","get_state","get_state","get_state","get_state","get_state","initialize","initialize","initialize","initialize","initialize","initialize","initialize","into","into","into","iter_with_bitset","iter_with_bitset","iter_with_bitset","name","name","run","run","system","system","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","TypeUlid","TypeUlid","ULID","Ulid","UlidMap"],"q":["bones_ecs","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::EcsError","","bones_ecs::atomic","","","","","bones_ecs::bitset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::componentsbones_ecs::entities","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::prelude::EcsError","","bones_ecs::resources","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::stage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::system","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_ecs::ulid","","","","",""],"d":["The requested resource is already borrowed.","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Creates an instance of the type this trait is implemented …","A resource was not initialized in the <code>World</code> but the <code>System</code> …","Helper trait that is auto-implemented for all <code>Clone</code>-able …","This variant is for user-defined errors.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Helper trait that is auto-implemented for anything that …","Helper trait for unwraping each item in an array.","The <code>World</code> is simply a collection of <code>Resources</code>, and …","Atomic Refcell implmentation.","Bitset implementation.","ECS component storage.","Stores the world components.","Free-standing, shorter equivalent to <code>Default::default()</code>.","<code>Entity</code> implementation, storage, and interation.","Creates <code>Self</code> using data from the given <code>World</code>.","The prelude.","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","Drop the value at <code>ptr</code>.","World resource storage.","Implementation of stage abstraction for running …","Implements the system API for the ECS.","ULID-related utilities such as ULID map and type ULIDs.","Unwrap all the items in an array.","","","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","Shorthand for combining bitsets with bit_or.","Shorthand for setting bits on the bitset container.","","","","","","","Check whether or not the bitset contains the given entity.","Creates a bitset big enough to contain the index of each …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Implements the <code>BitSet</code> trait members for your type through …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","Implements typed operations on top of a …","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","Read the bitset containing the list of entites with this …","Read the bitset containing the list of entites with this …","Get the bitset representing which entities have this …","Returns the bitset indicating which entity indices have a …","","","","","","","","","","Borrow the component store.","","","","","","","","","","","","","Mutably borrow the component store.","","","","","","","","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","","","","","Create an <code>UntypedComponentStore</code> that is valid for the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Safety","Borrow a component in the store, if it exists for the …","Gets an immutable reference to the component of <code>Entity</code>.","Gets an immutable reference to the component of <code>Entity</code>.","Gets an immutable reference to the component of <code>Entity</code>.","Get a read-only pointer to the component for the given …","Get the components of a certain type","Get the untyped component storage by the component’s UUID","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Mutably borrow a component in the store, if it exists for …","Gets a mutable reference to the component of <code>Entity</code>.","Gets a mutable reference to the component of <code>Entity</code>.","Get a mutable pointer to the component for the given <code>Entity</code>","Initialize component storage for type <code>T</code>.","Insert a component into the store.","Inserts a component for the given <code>Entity</code> index. Returns …","Inserts a component for the given <code>Entity</code> index.","Returns true if the entity already had a component of this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Converts to the internal, untyped <code>ComponentStore</code>.","Iterate over all components in the store.","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type.","Iterates immutably over all components of this type.","Mutably iterate over all components in the store.","Iterates mutably over all components of this type. Very …","Iterates mutably over all components of this type.","Iterates mutably over all components of this type.","Mutably iterate over all the components in the store that …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterate over all the components in the store that match …","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","Get the layout of the components stored.","Safety","Create a arbitrary <code>UntypedComponentStore</code>.","","","","","","","","","","","Remove a component from an entity, returning the previous …","Removes the component of <code>Entity</code>. Returns <code>Some(T)</code> if the …","Removes the component of <code>Entity</code>.","If there is a previous value, <code>true</code> will be returned.","","","","","","","","","","","","","","","Get the components of a certain type","Get the untyped component storage by the component’s UUID","Initialize component storage for type <code>T</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","The type of iterator this query item creates","A type representing a component-joining entity query.","Modify the iteration bitset","Returns a bitset where each index where the bit is set to …","","","","","","","","","Clears the killed entity list.","","","","","","Creates a new <code>Entity</code> and returns it.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the generation of this <code>Entity</code>.","","Returns the index of this <code>Entity</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if the <code>Entity</code> is still alive.","Iterate over the entities and components in the given …","Return an iterator over the provided bitset.","Iterates over entities using the provided bitset.","Kill an entity.","Returns entities in the killed list.","Creates a new <code>Entity</code> from the provided index and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The requested resource is already borrowed.","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","The BitSet API.","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","Implements <code>Deref</code> for <em>single-item</em> structs. This is …","Implements <code>DerefMut</code> for <em>single-item</em> structs. This is …","The execution of the dispatcher failed and returned one or …","","The types of errors used throughout the ECS.","Creates an instance of the type this trait is implemented …","A resource was not initialized in the <code>World</code> but the <code>System</code> …","The number of bits in a Ulid’s random portion","","This variant is for user-defined errors.","The result of a <code>System</code>’s execution.","The number of bits in a Ulid’s time portion","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","This happens when two Rust types have the same <code>TypeUlid</code>, …","","The type’s <code>Ulid</code>.","A Ulid is a unique 128-bit lexicographically sortable …","","The <code>World</code> is simply a collection of <code>Resources</code>, and …","Returns a raw pointer to the underlying data in this cell.","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","","Immutably borrows the wrapped value.","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","Copies an <code>AtomicRef</code>.","","","","","","","","Stores the world components.","Gets the datetime of when this Ulid was created accurate …","","","","","","","","","","Make a new <code>AtomicRef</code> for an optional component of the …","Make a new <code>AtomicRefMut</code> for an optional component of the …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new Ulid with the given datetime","Creates a new Ulid with the given datetime and random …","Create a Ulid from separated parts.","","Creates a Ulid from a Crockford Base32 encoded string","Creates <code>Self</code> using data from the given <code>World</code>.","Returns a mutable reference to the wrapped value.","Gets a resource handle from the store if it exists.","","Increment the random number, make sure that the ts millis …","Initialize a resource of type <code>T</code> by inserting it’s …","Insert a resource.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>AtomicRefCell</code>, returning the wrapped value.","Test if the Ulid is nil","Remove the component info for dead entities.","Make a new <code>AtomicRef</code> for a component of the borrowed data.","Make a new <code>AtomicRefMut</code> for a component of the borrowed …","Creates a new <code>AtomicRefCell</code> containing <code>value</code>.","Creates a new Ulid with the current time (UTC)","Create a new <code>World</code>.","The ‘nil Ulid’.","","","","Gets the random section of this ulid","","","","","","","Get a resource handle from the store.","Run a system once, assuming any necessary initialization …","Run a system once.","Gets the timestamp section of this ulid","","","","Creates a Crockford Base32 encoded string that represents …","","","","Creates a Crockford Base32 encoded string that represents …","","Attempts to immutably borrow the wrapped value, but …","Attempts to mutably borrow the wrapped value, but instead …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new Ulid using data from the given random number …","","","A handle to a resource from a <code>Resources</code> collection.","A collection of resources.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","","","Lock the resource for reading.","","","","","","Lock the resource for read-writing.","","","","Cell containing the raw pointer to the resource’s data","","","","A function that may be called to clone the resource from …","","","","Check whether or not a resource is in the store.","","","","An optional function that will be called to drop the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a cell containing the resource data pointer for the …","Get a resource handle from the store.","Insert a new resource","Insert a resource.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume <code>Resources</code> and extract the underlying …","The memory layout of the resource","Creates a new <code>UntypedResource</code> from an instance of a Rust …","Create an empty <code>UntypedResources</code>.","Create an empty <code>Resources</code>.","Create a new <code>UntypedResource</code> from raw <code>UntypedResourceInfo</code>.","","","","","","","Remove a resource","","","","","","","","","Gets a resource handle from the store if it exists.","Try to insert a resource.","","","","","","","","","","","Borrow the underlying <code>UntypedResources</code> store.","Mutably borrow the underlying <code>UntypedResources</code> store.","","","","","","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","A <code>StageLabel</code> for the 5 core stages.","The first stage","The fifth stage","The fourth stage","The second stage","A collection of systems that will be run in order.","Trait for things that may be used to identify a system …","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","The third stage","Add a system to be run at the end of the stage.","Add a system to this stage.","","Add a <code>System</code> to the stage with the given label.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The unique identifier for the stage.","Returns a unique identifier for the stage.","","","The unique identifier for the stage.","Initialize the contained systems for the given <code>world</code>.","","","Initialize the systems in the stages agains the <code>World</code>.","Insert a new stage, after another existing stage","Insert a new stage, before another existing stage","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","","","The human-readable name for the stage, used for error …","Create a new, empty stage, for the given label.","The system queue that will be run at the end of the stage","","","","","Execute the systems on the given <code>world</code>.","Execute the systems on the given <code>world</code>.","","The stages in the collection, in the order that they will …","The list of systems in the stage.","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>SystemStages</code> collection, initialized with a stage …","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Converts a function into a <code>System</code>.","The type of the parameter, ranging over the lifetime of …","<code>SystemParam</code> for getting read access to a resource.","<code>SystemParam</code> for getting mutable access to a resource.","The intermediate state for the parameter, that may be …","Struct used to run a system function using the world.","Trait used to implement parameters for <code>System</code> functions.","","","","This is used create an instance of the system parame, …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This is called to produce the intermediate state of the …","","","","","This will be called to give the parameter a chance to …","Initializes the resources required to run this system …","","","","","This should be called once to initialize the system, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the underlying type name of the system.","A best-effort name for the system, for diagnostic purposes.","Runs the system’s function using the provided <code>World</code>","This is run every time the system is executed","Convert into a <code>System</code>.","","","","","","","","","","","","","","","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","The type’s <code>Ulid</code>.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key."],"i":[39,39,0,0,0,39,0,39,39,0,0,0,0,0,0,2,0,0,77,0,79,79,0,0,0,0,80,81,82,0,0,0,0,0,7,0,0,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,6,7,6,7,7,7,7,0,7,7,7,6,6,6,6,7,6,7,0,6,7,7,7,7,6,6,7,6,7,6,7,6,7,0,0,0,0,0,0,0,0,0,0,0,16,17,18,19,36,34,37,35,26,16,17,18,19,20,20,22,36,34,37,35,26,16,17,18,19,20,20,22,19,20,22,19,20,22,16,17,18,16,20,22,19,19,36,34,37,35,26,16,17,18,19,20,22,16,16,20,26,16,17,18,19,22,22,26,18,19,26,16,18,19,22,26,16,18,19,36,34,37,35,26,16,17,18,19,20,22,36,34,37,35,16,26,16,17,18,19,26,16,18,19,26,16,18,19,26,16,17,18,19,19,26,19,36,34,37,35,19,20,22,19,20,22,26,16,18,19,19,20,22,36,34,37,35,26,16,17,18,19,20,22,22,22,22,36,34,37,35,26,16,17,18,19,20,22,36,34,37,35,26,16,17,18,19,20,22,36,34,37,35,26,16,17,18,19,20,22,0,0,0,0,43,0,43,40,44,45,8,40,44,45,8,40,40,8,40,8,40,8,40,40,8,8,44,45,8,40,8,8,8,44,45,8,40,44,45,40,40,43,40,40,40,8,44,45,8,8,40,8,40,8,40,44,45,8,40,44,45,8,40,44,45,8,40,40,44,45,8,40,31,39,0,0,0,0,0,0,0,0,39,0,0,0,39,31,0,39,0,31,0,0,39,0,28,0,0,0,24,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,24,24,50,51,47,48,31,39,2,24,24,50,51,47,48,31,39,2,24,47,31,2,24,31,2,24,31,2,31,0,24,31,2,47,48,48,24,31,47,48,24,50,50,51,51,47,48,31,31,39,39,24,24,24,50,51,47,48,31,31,31,39,2,31,31,31,31,31,77,24,2,31,31,2,2,24,50,51,47,48,31,39,2,24,31,2,47,48,24,31,2,31,24,31,39,31,24,31,2,24,31,2,2,2,2,31,24,31,2,31,50,51,31,31,39,24,24,24,50,51,47,48,31,39,2,24,50,51,47,48,31,39,2,24,50,51,47,48,31,39,2,24,50,51,47,48,31,39,2,31,81,82,0,0,0,0,0,65,62,57,57,63,64,65,62,57,57,63,64,65,62,63,64,65,62,63,64,64,63,64,62,65,65,62,57,63,64,63,64,63,64,65,62,57,63,64,64,65,62,63,64,62,62,63,64,62,63,64,63,62,63,64,65,62,57,63,64,64,64,65,62,57,63,64,65,62,57,63,64,64,64,65,62,57,63,64,0,0,0,71,71,71,71,0,0,0,0,71,66,73,68,69,69,68,71,66,72,72,69,68,71,66,72,71,66,71,66,66,72,72,71,66,69,68,71,66,72,72,73,70,68,71,68,73,68,72,69,69,69,69,68,71,66,72,73,70,68,71,68,68,66,71,66,71,66,73,69,68,69,68,71,66,69,68,71,66,72,69,68,71,66,72,69,68,71,66,72,66,69,68,71,66,72,69,0,0,0,84,0,0,84,0,0,74,75,75,84,67,76,76,78,78,74,75,67,76,78,76,78,78,67,67,76,78,84,76,78,74,75,84,67,76,78,74,75,67,67,76,78,74,75,75,67,67,67,67,59,67,67,76,78,67,76,78,67,76,78,67,76,78,31,0,0,28,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,[2],0,[[3,3]],[3],0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,[[],4],[[]],[[]],[[],4],[[5,4]],[[],5],[[],4],[[],4],[5],[[],6],[4],[[],5],[[]],[[],4],[[]],[[]],[5],[5],[[],4],[[],4],[5,4],[[]],0,0,[[]],[[]],[[]],[[]],[7,7],[[]],[[7,8],4],[[],7],[[],7],[7],[7],[[6,9],[[11,[10]]]],[[6,9],[[11,[10]]]],[[6,9],[[11,[10]]]],[[6,9],[[11,[10]]]],[[7,9],12],[[]],[[]],0,[[]],[[]],[[3,3]],[3],[[]],[[],13],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[16,[15]]],7],[[[17,[15]]],7],[[[18,[15]]],7],[19,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[20,[15]]],[[17,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[20,[15]]],[[18,[15]]]],[[]],[19,19],[[[20,[[0,[21,21]]]]],[[20,[[0,[21,21]]]]]],[22,22],[[]],[[]],[[]],[[[16,[15]],8],4],[[[17,[15]],8],4],[[[18,[15]],8],4],[[],[[16,[15]]]],[[],[[20,[21]]]],[[],22],[19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[16,[[0,[15,23]]]]]],[19,[[16,[15]]]],[[[25,[[24,[19]]]]],[[20,[15]]]],[[[26,[21]],19,8],27],[[[16,[15]],8],27],[[[17,[15]],8],27],[[[18,[15]],8],27],[[19,8],[[27,[3]]]],[22,[[20,[[0,[21,28,29,30]]]]]],[[22,31],[[25,[[24,[19]]]]]],[[[26,[21]],19]],[[[18,[15]]]],[19],[[[26,[21]],19,8],27],[[[16,[15]],8],27],[[[18,[15]],8],27],[[19,8],[[27,[3]]]],[22],[[[26,[21]],19,8,21],[[27,[21]]]],[[[16,[15]],8,15],[[27,[15]]]],[[[18,[15]],8,15],[[27,[15]]]],[[19,8,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[15]]],19],[[[26,[21]],19],32],[[[16,[15]]],32],[[[17,[15]]],32],[[[18,[15]]],32],[19,32],[[[26,[21]],19],32],[[[16,[15]]],32],[[[18,[15]]],32],[19,32],[[[26,[21]],19,[33,[7]]],[[34,[21]]]],[[[16,[15]],[33,[7]]],[[34,[15]]]],[[[18,[15]],[33,[7]]],[[34,[15]]]],[[19,[33,[7]]],35],[[[26,[21]],19,[33,[7]]],[[36,[21]]]],[[[16,[15]],[33,[7]]],[[36,[15]]]],[[[17,[15]],[33,[7]]],[[36,[15]]]],[[[18,[15]],[33,[7]]],[[36,[15]]]],[[19,[33,[7]]],37],[19,38],[[],[[26,[21]]]],[[38,27],19],[36,27],[34,27],[37,27],[35,27],[[3,3]],[[3,3]],[[3,3]],[3],[3],[3],[[[26,[21]],19,8],[[27,[21]]]],[[[16,[15]],8],[[27,[15]]]],[[[18,[15]],8],[[27,[15]]]],[[19,8,[27,[3]]],4],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[22,[[11,[[20,[[0,[21,28,29,30]]]],39]]]],[[22,31],[[11,[[25,[[24,[19]]]],39]]]],[22,[[11,[39]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[7],[40,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40],[8,8],[40,40],[[]],[[]],[[8,8],41],[40,8],[[],40],[[8,8],4],[[8,9],12],[[]],[[]],[[]],[[]],[8,42],[8],[8,42],[[]],[[]],[[]],[[]],[[]],[[]],[[40,8],4],[[40,43],44],[[[33,[7]]]],[[40,7],45],[[40,8]],[40,46],[[42,42],8],[[[44,[32]]],27],[45,27],[[8,8],[[27,[41]]]],[[3,3]],[[3,3]],[3],[3],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[],14],[[],31],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[24],[[],4],[[]],[[]],[[],4],[[5,4]],[[],5],[[],4],[[],4],[5],[[],6],[4],[[],5],[[]],[[],4],[[]],[[]],[5],[5],[[],4],[[],4],[5,4],[[]],[[]],[24,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[47,47],[31,31],[2,2],[[]],[[]],[[]],[[24,24],41],[[31,31],41],0,[31,49],0,[[],24],[[],31],[[],2],[47],[48],[48],[[24,24],4],[[31,31],4],[47,[[27,[47]]]],[48,[[27,[48]]]],[[24,9],[[11,[10]]]],[[50,9],[[11,[10]]]],[[50,9],[[11,[10]]]],[[51,9],[[11,[10]]]],[[51,9],[[11,[10]]]],[[47,9],[[11,[10]]]],[[48,9],[[11,[10]]]],[[31,9],[[11,[10]]]],[[31,9],[[11,[10]]]],[[39,9],12],[[39,9],12],[52],[[]],[[],24],[[]],[[]],[[]],[[]],[[],31],[[]],[53,31],[[]],[[]],[49,31],[49,31],[[54,53],31],[55,[[11,[31]]]],[55,[[11,[31,56]]]],[2],[24],[2,[[27,[[57,[15]]]]]],[31],[31,[[27,[31]]]],[2],[[2,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],[31,4],[2],[47,47],[48,48],[[],24],[[],31],[[],2],[[],31],[[24,24],[[27,[41]]]],[[31,31],[[27,[41]]]],[58],[31,53],[[3,3]],[[3,3]],[[3,3]],[3],[3],[3],[2,[[57,[15]]]],[[2,59],60],[[2,59],60],[31,54],[[]],[[]],[[]],[31,[[11,[55,61]]]],[[],13],[[],13],[[],13],[31,13],[[],13],[24,[[11,[47,50]]]],[24,[[11,[48,51]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],0,0,0,0,0,0,0,[[]],[[]],[[[57,[15]]],[[47,[15]]]],[[]],[[]],[[]],[[]],[[]],[[[57,[15]]],[[48,[15]]]],[[]],[[]],[[]],0,[62,62],[63,63],[64,64],0,[[]],[[]],[[]],[64,4],[[],63],[[],64],[62],0,[[]],[[]],[[]],[[]],[[]],[[63,31],[[27,[[25,[[24,[3]]]]]]]],[64,[[57,[15]]]],[[63,31,62],[[27,[62]]]],[[64,15]],[[]],[[]],[[]],[[]],[[]],[64,63],0,[[[0,[21,30,29]]],62],[[],63],[[],64],[65,62],[[3,3]],[[3,3]],[[3,3]],[3],[3],[3],[[63,31],[[27,[62]]]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[64,[[27,[[57,[15]]]]]],[[64,15],[[11,[39]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[],14],[[],14],[64,63],[64,63],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[66,59]],[67],[[68,67]],[[69,70,59],69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[66,66],[[]],[[]],[[],66],[72],[72],[[71,9],12],[[66,9],12],[[]],[[]],[[]],[[]],[[]],[2],[[],31],[[],31],[68,31],[71,31],0,[2],[[68,2]],[2],[[69,2]],[[69,70,73],69],[[69,70,73],69],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[68,13],[71,13],0,[70,68],0,[[3,3]],[[3,3]],[3],[3],[2,60],[[69,2],60],[[68,2],60],0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[],14],[[],14],[[],31],[[]],[[]],[[]],[[]],[[]],[[],69],0,0,0,0,0,0,0,0,0,[[74,7]],[[75,7]],[[75,7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[[0,[15,1]]]]]],[[[78,[[0,[15,77]]]]]],[[[78,[[0,[15,77]]]]]],[[67,9],12],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[67,2]],[2],[2],[2],[2],0,[[]],[[]],[[]],[[74,[33,[7]]]],[[75,[33,[7]]]],[[75,[33,[7]]]],[67,55],0,[[67,2],60],0,[[],67],[67,67],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[]],[[]],[[]],0,0,0,0,0,0],"p":[[8,"Default"],[3,"World"],[15,"u8"],[15,"bool"],[15,"usize"],[3,"BitFmt"],[3,"BitSetVec"],[3,"Entity"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"String"],[3,"TypeId"],[8,"TypedEcsData"],[3,"ComponentStore"],[3,"AtomicComponentStoreRef"],[3,"AtomicComponentStoreRefMut"],[3,"UntypedComponentStore"],[3,"AtomicComponentStore"],[8,"Clone"],[3,"ComponentStores"],[8,"Pod"],[3,"AtomicRefCell"],[3,"Arc"],[3,"TypedComponentOps"],[4,"Option"],[8,"TypeUlid"],[8,"Send"],[8,"Sync"],[3,"Ulid"],[8,"Iterator"],[3,"Rc"],[3,"ComponentBitsetIteratorMut"],[3,"UntypedComponentBitsetIteratorMut"],[3,"ComponentBitsetIterator"],[3,"UntypedComponentBitsetIterator"],[3,"Layout"],[4,"EcsError"],[3,"Entities"],[4,"Ordering"],[15,"u32"],[8,"QueryItem"],[3,"EntitiesIterWith"],[3,"EntityIterator"],[3,"Vec"],[3,"AtomicRef"],[3,"AtomicRefMut"],[3,"SystemTime"],[3,"BorrowError"],[3,"BorrowMutError"],[15,"never"],[15,"u128"],[15,"u64"],[15,"str"],[4,"DecodeError"],[3,"AtomicResource"],[3,"Demand"],[8,"IntoSystem"],[6,"SystemResult"],[4,"EncodeError"],[3,"UntypedResource"],[3,"UntypedResources"],[3,"Resources"],[3,"UntypedResourceInfo"],[3,"CommandQueue"],[3,"System"],[3,"SimpleSystemStage"],[3,"SystemStages"],[8,"StageLabel"],[4,"CoreStage"],[3,"Commands"],[8,"SystemStage"],[6,"Comp"],[6,"CompMut"],[3,"Res"],[8,"FromWorld"],[3,"ResMut"],[8,"RawFns"],[8,"UnwrapMany"],[13,"DispatcherExecutionFailed"],[13,"SystemError"],[8,"BitSet"],[8,"SystemParam"]]},\
"bones_input":{"doc":"Standardized types meant to be provided to Bones games …","t":[3,11,11,11,11,11,11,11,11,0,12,0,11,11,11,11,11,11,13,13,3,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Window","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","prelude","size","time","to_owned","try_from","try_into","type_id","ulid","vzip","Once","Repeating","Stopwatch","Time","Timer","TimerMode","advance_exact","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","delta","delta_seconds","delta_seconds_f64","duration","elapsed","elapsed","elapsed","elapsed_seconds","elapsed_seconds_f64","elapsed_secs","elapsed_secs","elapsed_secs_f64","eq","finished","fmt","fmt","fmt","fmt","from","from","from","from","from_seconds","hash","into","into","into","into","is_paused","just_finished","mode","new","new","new","pause","pause","pause","paused","paused","percent","percent_left","remaining","remaining_secs","reset","reset","set_duration","set_elapsed","set_elapsed","set_mode","tick","tick","times_finished_this_tick","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ulid","unpause","unpause","unpause","update","update_with_instant","vzip","vzip","vzip","vzip"],"q":["bones_input","","","","","","","","","","","","","","","","","","bones_input::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Information about the window the game is running in.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The prelude.","The logical size of the window’s client area.","Time functionality for the Bones framework.","","","","","","","Run once and stop.","Reset when finished.","A Stopwatch is a struct that track elapsed time when …","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","Advance the time exactly by the given duration.","","","","","","","","","","","","","","","","","","","","","Returns how much time has advanced since the last <code>update</code>, …","Returns how much time has advanced since the last <code>update</code>, …","Returns how much time has advanced since the last <code>update</code>, …","Returns the duration of the timer.","Returns the elapsed time since the last <code>reset</code> of the …","Returns the time elapsed on the timer. Guaranteed to be …","Returns how much time has advanced since <code>startup</code>, as …","Returns how much time has advanced since <code>startup</code>, as <code>f32</code> …","Returns how much time has advanced since <code>startup</code>, as <code>f64</code> …","Returns the elapsed time since the last <code>reset</code> of the …","Returns the time elapsed on the timer as an <code>f32</code>. See also …","Returns the elapsed time since the last <code>reset</code> of the …","","Returns <code>true</code> if the timer has reached its duration at …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new timer with a given duration in seconds.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the clock is currently paused.","Returns <code>true</code> only on the tick the timer reached its …","Returns the mode of the timer.","Create a new unpaused <code>Stopwatch</code> with no elapsed time.","Creates a new timer with a given duration.","Constructs a new <code>Time</code> instance with a specific startup …","Pauses the stopwatch. Any call to <code>tick</code> while paused will …","Pauses the Timer. Disables the ticking of the timer.","Stops the clock, preventing it from advancing until …","Returns <code>true</code> if the stopwatch is paused.","Returns <code>true</code> if the timer is paused.","Returns the percentage of the timer elapsed time (goes …","Returns the percentage of the timer remaining time (goes …","Returns the remaining time using Duration","Returns the remaining time in seconds","Resets the stopwatch. The reset doesn’t affect the …","Resets the timer. The reset doesn’t affect the <code>paused</code> …","Sets the duration of the timer.","Sets the elapsed time of the stopwatch.","Sets the elapsed time of the timer without any other …","Sets the mode of the timer.","Advance the stopwatch by <code>delta</code> seconds. If the stopwatch …","Advance the timer by <code>delta</code> seconds. Non repeating timer …","Returns the number of times a repeating timer finished …","","","","","","","","","","","","","","","","","","Unpauses the stopwatch. Resume the effect of ticking on …","Unpauses the Timer. Resumes the ticking of the timer.","Resumes the clock if paused.","Updates the internal time measurements.","Updates time with a specified <code>Instant</code>.","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,11,11,0,0,0,0,7,9,10,11,7,9,10,11,7,9,10,11,7,9,10,11,7,9,10,11,7,7,7,7,10,9,10,7,7,7,9,10,9,11,10,9,10,11,7,9,10,11,7,10,11,9,10,11,7,7,10,10,9,10,7,9,10,7,9,10,10,10,10,10,9,10,10,9,10,10,9,10,10,9,10,11,7,9,10,11,7,9,10,11,7,9,10,11,7,7,9,10,7,7,7,9,10,11,7],"f":[0,[[]],[[]],[1,1],[[]],[[],1],[[1,2],3],[[]],[[]],0,0,0,[[]],[[],4],[[],4],[[],5],[[],6],[[]],0,0,0,0,0,0,[[7,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[10,10],[11,11],[7,7],[[]],[[]],[[]],[[]],[[],9],[[],10],[[],11],[[],7],[7,8],[7,12],[7,13],[10,8],[9,8],[10,8],[7,8],[7,12],[7,13],[9,12],[10,12],[9,13],[[11,11],14],[10,14],[[9,2],3],[[10,2],3],[[11,2],3],[[7,2],3],[[]],[[]],[[]],[[]],[[12,11],10],[11],[[]],[[]],[[]],[[]],[7,14],[10,14],[10,11],[[],9],[[8,11],10],[15,7],[9],[10],[7],[9,14],[10,14],[10,12],[10,12],[10,8],[10,12],[9],[10],[[10,8]],[[9,8]],[[10,8]],[[10,11]],[[9,8],9],[[10,8],10],[10,16],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],6],[9],[10],[7],[7],[[7,15]],[[]],[[]],[[]],[[]]],"p":[[3,"Window"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Ulid"],[3,"Time"],[3,"Duration"],[3,"Stopwatch"],[3,"Timer"],[4,"TimerMode"],[15,"f32"],[15,"f64"],[15,"bool"],[3,"Instant"],[15,"u32"]],"a":{"repeating":[93]}},\
"bones_lib":{"doc":"Opinionated game meta-engine built on Bevy.","t":[12,3,0,11,11,2,11,11,0,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,11,11,11,11,11,11,11,11,3,3,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,12,5,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,11,11,12,3,8,3,3,3,3,3,6,8,3,10,10,10,10,12,12,12,12,0,12,3,8,3,3,3,3,3,6,8,3,10,10,10,10,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,8,4,8,13,8,13,13,8,8,3,0,0,0,12,5,0,10,0,10,10,0,0,0,0,10,12,12,3,3,3,3,3,12,3,8,3,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,14,14,5,14,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,16,8,10,10,12,12,13,3,3,3,3,3,3,3,3,8,3,3,3,3,3,6,6,3,3,3,3,4,24,24,13,8,4,3,3,3,3,13,8,8,16,13,13,16,13,13,8,8,3,3,3,3,8,16,3,13,8,6,8,3,8,24,13,3,8,18,3,6,3,3,3,3,3,3,8,13,3,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,14,14,10,12,12,12,5,5,12,10,10,10,10,12,14,10,10,12,10,12,10,10,12,12,12,10,10,10,12,12,10,12,10,12,12,3,3,3,3,3,12,12,12,12,3,3,4,13,13,13,13,3,8,8,3,13,10,10,10,12,10,10,10,12,12,10,12,12,6,6,8,16,3,3,16,3,8,10,10,10,12,12,12,10,12,8,24,18,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,0,11,11,11,11,11,11,13,13,3,3,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,3,4,12,12,12,12,12,12,3,3,13,2,2,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,6,6,3,3,3,3,4,3,3,3,3,3,3,3,3,3,24,24,13,8,4,3,3,3,3,4,13,2,8,3,3,3,3,3,8,8,16,3,4,13,3,3,3,3,13,13,13,16,3,13,13,13,3,8,8,13,3,6,3,3,3,3,8,16,3,3,13,8,6,8,3,3,3,3,3,4,13,3,8,24,13,3,8,18,3,3,3,3,6,8,3,3,3,3,3,3,3,8,13,3,16,16,8,3,16,16,3,8,3,16,16,8,3,3,13,13,13,13,13,13,12,10,10,11,11,12,12,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,14,14,0,10,11,11,12,11,12,11,11,12,12,5,5,11,11,11,5,5,5,5,12,5,5,5,0,0,12,12,12,12,12,12,11,10,11,11,10,10,10,10,10,12,12,0,10,10,12,12,12,14,12,10,10,12,11,11,11,11,10,10,5,5,5,14,12,12,12,5,5,5,5,12,12,12,12,10,10,12,12,12,12,12,12,0,5,12,12,10,11,10,11,12,10,12,12,12,12,0,10,12,12,12,12,0,11,12,12,12,12,12,11,11,11,0,11,10,5,5,5,5,5,5,5,11,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,3,3,3,3,3,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,12,12,5,12,12,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,5,5,5,12,12,12,12,12,12,12,12,12,12,3,8,3,3,3,3,3,6,8,3,10,10,10,10,12,12,12,12,16,16,8,16,16,8,16,16,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,13,3,3,3,4,3,3,3,5,5,5,12,12,12,12,12,12,12,12,12,0,0,0,14,14,0,0,0,0,0,4,3,3,13,12,12,12,12,3,3,12,12,12,3,4,13,13,3,12,12,12,12,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,13,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,6,6,3,3,3,3,4,3,3,3,3,3,3,3,3,3,24,24,13,8,4,3,3,3,3,4,18,18,18,18,18,13,8,3,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,3,8,16,3,4,13,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,16,3,13,13,13,3,8,18,8,3,6,3,3,3,3,8,16,3,13,8,6,8,3,18,18,18,18,18,18,3,3,13,3,8,24,13,3,8,18,3,3,3,3,6,8,3,3,3,3,3,3,3,8,13,3,16,16,8,3,16,16,3,8,3,16,16,8,18,18,18,18,3,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,10,10,11,11,12,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,5,5,5,14,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,3,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,12,12,5,12,12,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,5,5,5,12,12,12,12,12,12,12,12,12,12,3,8,3,3,3,3,3,6,8,3,10,10,10,10,12,12,12,12,16,16,8,16,16,8,16,16,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,3,3,5,5,5,12,12,12,12,12,12,12,12,12,3,3,3,3,12,12,12,12,12,12,12,3,3,12,12,12,12,12,12,12,3,12,12,12],"n":["0","FrameTime","animation","as_any","as_any_mut","bevy_utils","borrow","borrow_mut","camera","clone","clone_into","clone_type_data","default","deref","deref_mut","from","from_world","from_world","install","into","into_any","into_any_arc","into_any_rc","prelude","raw_clone","raw_drop","to_owned","try_from","try_into","type_id","ulid","vzip","AnimatedSprite","AnimationBankSprite","animate_sprites","animations","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_type_data","clone_type_data","current","default","fmt","fmt","fps","frames","from","from","from_world","from_world","index","install","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","last_animation","raw_clone","raw_clone","raw_drop","raw_drop","repeat","timer","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ulid","ulid","update_animation_banks","vzip","vzip","0","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Handle","ResAssetProviders","UntypedAssetProvider","UntypedHandle","get","get","get_mut","get_mut","label","path","path","path","prelude","0","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Handle","ResAssetProviders","UntypedAssetProvider","UntypedHandle","get","get","get_mut","get_mut","label","path","path","path","0","CameraShake","CameraTraumaEvents","ShakeNoise","add_trauma","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","center","clone","clone","clone","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","decay_rate","default","default","default","fmt","from","from","from","from_world","from_world","from_world","from_world","from_world","from_world","install","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","max_angle_rad","max_offset","new","queue","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","send","to_owned","to_owned","to_owned","trauma","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulid","ulid","ulid","vzip","vzip","vzip","with_trauma","AlreadyBorrowed","DispatcherExecutionFailed","EcsData","EcsError","FromWorld","NotInitialized","RawFns","SystemError","TypeUlidCollision","TypedEcsData","UnwrapMany","World","atomic","bitset","components","components","default","entities","from_world","prelude","raw_clone","raw_drop","resources","stage","system","ulid","unwrap_many","0","0","AtomicRef","AtomicRefCell","AtomicRefMut","BorrowError","BorrowMutError","0","BitFmt","BitSet","BitSetVec","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitor","bitset","create_bitset","impl_bitset","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","TypedComponentOps","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","Entities","EntitiesIterWith","Entity","EntityIterator","Iter","QueryItem","apply_bitset","iter_with_bitset","0","0","AlreadyBorrowed","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","AtomicRef","AtomicRefCell","AtomicRefMut","AtomicResource","BitFmt","BitSet","BitSetVec","BorrowError","BorrowMutError","CommandQueue","Commands","Comp","CompMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","CoreStage","Deref","DerefMut","DispatcherExecutionFailed","EcsData","EcsError","Entities","EntitiesIterWith","Entity","EntityIterator","First","FromWorld","IntoSystem","Iter","Last","NotInitialized","Param","PostUpdate","PreUpdate","QueryItem","RawFns","Res","ResMut","Resources","SimpleSystemStage","StageLabel","State","System","SystemError","SystemParam","SystemResult","SystemStage","SystemStages","TypeUlid","TypeUlid","TypeUlidCollision","TypedComponentOps","TypedEcsData","ULID","Ulid","UlidMap","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","UntypedResource","UntypedResourceInfo","UntypedResources","UnwrapMany","Update","World","add_system","apply_bitset","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitor","bitset","borrow","cell","clone_fn","components","create_bitset","default","drop_fn","from_world","get_state","id","id","id","impl_bitset","initialize","initialize","initialize","iter_with_bitset","layout","name","name","name","name","queue","raw_clone","raw_drop","run","run","stages","system","systems","unwrap_many","0","0","AtomicResource","Resources","UntypedResource","UntypedResourceInfo","UntypedResources","cell","clone_fn","drop_fn","layout","CommandQueue","Commands","CoreStage","First","Last","PostUpdate","PreUpdate","SimpleSystemStage","StageLabel","SystemStage","SystemStages","Update","add_system","id","id","id","initialize","name","name","name","queue","run","stages","systems","Comp","CompMut","IntoSystem","Param","Res","ResMut","State","System","SystemParam","borrow","get_state","initialize","initialize","name","run","system","0","TypeUlid","TypeUlid","ULID","Ulid","UlidMap","Window","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","clone_type_data","default","fmt","from","from_world","from_world","into","into_any","into_any_arc","into_any_rc","prelude","raw_clone","raw_drop","size","time","to_owned","try_from","try_into","type_id","ulid","vzip","Once","Repeating","Stopwatch","Time","Timer","TimerMode","Window","advance_exact","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_dyn_eq","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","default","default","default","default","delta","delta_seconds","delta_seconds_f64","duration","dyn_eq","dyn_hash","elapsed","elapsed","elapsed","elapsed_seconds","elapsed_seconds_f64","elapsed_secs","elapsed_secs","elapsed_secs_f64","eq","finished","fmt","fmt","fmt","fmt","from","from","from","from","from_seconds","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","get_hash","hash","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_paused","just_finished","mode","new","new","new","pause","pause","pause","paused","paused","percent","percent_left","raw_clone","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","raw_drop","remaining","remaining_secs","reset","reset","set_duration","set_elapsed","set_elapsed","set_mode","size","tick","tick","times_finished_this_tick","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ulid","unpause","unpause","unpause","update","update_with_instant","vzip","vzip","vzip","vzip","Once","Repeating","Stopwatch","Time","Timer","TimerMode","0","0","0","0","0","0","Affine2","Affine3A","AlreadyBorrowed","AnimatedSprite","AnimationBankSprite","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Atlas","AtlasSprite","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","AtomicRef","AtomicRefCell","AtomicRefMut","AtomicResource","AudioEvent","AudioEvents","AudioSource","BVec2","BVec3","BVec3A","BVec4","BVec4A","BevyWorld","BitFmt","BitSet","BitSetVec","BorrowError","BorrowMutError","Camera","ClearColor","CommandQueue","Commands","Comp","CompMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","CoreStage","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","Deref","DerefMut","DispatcherExecutionFailed","EcsData","EcsError","Entities","EntitiesIterWith","Entity","EntityIterator","EulerRot","First","FrameTime","FromWorld","Handle","IVec2","IVec3","IVec4","Image","IntoBevy","IntoSystem","Iter","Key","KeyError","Last","Mat2","Mat3","Mat3A","Mat4","NotAscii","NotInitialized","Once","Param","Path2d","PlaySound","PostUpdate","PreUpdate","Quat","QueryItem","RawFns","Repeating","Res","ResAssetProviders","ResMut","Resources","SimpleSystemStage","Sprite","StageLabel","State","Stopwatch","System","SystemError","SystemParam","SystemResult","SystemStage","SystemStages","Tile","TileLayer","Time","Timer","TimerMode","TooLong","Transform","TypeUlid","TypeUlid","TypeUlidCollision","TypedComponentOps","TypedEcsData","ULID","UVec2","UVec3","UVec4","Ulid","UlidMap","UntypedAssetProvider","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","UntypedHandle","UntypedResource","UntypedResourceInfo","UntypedResources","UnwrapMany","Update","Vec2","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3","Vec3A","Vec3Swizzles","Vec4","Vec4","Vec4","Vec4Swizzles","Window","World","XYZ","XZY","YXZ","YZX","ZXY","ZYX","active","add_system","apply_bitset","as_any","as_any_mut","atlas","atlas","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitor","bitset","bool","borrow","borrow","borrow_mut","cell","clone","clone_fn","clone_into","clone_type_data","color","components","create_bitset","default","default","deref","deref_mut","dmat2","dmat3","dmat4","dquat","drop_fn","dvec2","dvec3","dvec4","f32","f64","flip_x","flip_x","flip_x","flip_y","flip_y","flip_y","from","from_world","from_world","from_world","get","get","get_mut","get_mut","get_state","grid_size","height","i32","id","id","id","idx","image","impl_bitset","index","initialize","initialize","initialize","into","into_any","into_any_arc","into_any_rc","into_bevy","iter_with_bitset","ivec2","ivec3","ivec4","key","label","layout","line_breaks","mat2","mat3","mat3a","mat4","matrix2","matrix2","matrix3","matrix3","name","name","name","name","path","path","path","points","prelude","quat","queue","queue","raw_clone","raw_clone","raw_drop","raw_drop","rotation","run","run","scale","size","stages","swizzles","system","systems","thickness","tile_size","tiles","time","to_owned","translation","translation","translation","translation","translation","try_from","try_into","type_id","u32","ulid","unwrap_many","uvec2","uvec3","uvec4","vec2","vec3","vec3a","vec4","vzip","w","w","w","w","w","w_axis","w_axis","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","z","z","z","z","z","z","z","z","z_axis","z_axis","z_axis","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","sound_source","volume","0","0","BVec2","BVec3","BVec3A","BVec4","BVec4A","w","x","x","x","y","y","y","z","z","Affine2","Affine3A","Mat2","Mat3","Mat3A","Mat4","Quat","Vec2","Vec3","Vec3A","Vec4","mat2","mat3","mat3a","mat4","matrix2","matrix3","quat","translation","translation","vec2","vec3","vec3a","vec4","w_axis","x","x","x_axis","x_axis","x_axis","y","y","y_axis","y_axis","y_axis","z","z_axis","z_axis","z_axis","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","dmat2","dmat3","dmat4","dquat","dvec2","dvec3","dvec4","matrix2","matrix3","translation","translation","w","w","w_axis","x","x","x","x","x_axis","x_axis","x_axis","y","y","y","y","y_axis","y_axis","y_axis","z","z","z","z_axis","z_axis","IVec2","IVec3","IVec4","ivec2","ivec3","ivec4","w","x","x","x","y","y","y","z","z","0","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Handle","ResAssetProviders","UntypedAssetProvider","UntypedHandle","get","get","get_mut","get_mut","label","path","path","path","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Once","Repeating","Stopwatch","Time","Timer","TimerMode","UVec2","UVec3","UVec4","uvec2","uvec3","uvec4","w","x","x","x","y","y","y","z","z","audio","camera","datatypes","key","key","line","prelude","sprite","tilemap","transform","AudioEvent","AudioEvents","AudioSource","PlaySound","queue","sound_source","volume","0","Camera","ClearColor","active","height","0","Key","KeyError","NotAscii","TooLong","Path2d","color","line_breaks","points","thickness","0","0","0","0","0","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","Affine2","Affine3A","AlreadyBorrowed","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Atlas","AtlasSprite","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","AtomicRef","AtomicRefCell","AtomicRefMut","AtomicResource","AudioEvent","AudioEvents","AudioSource","BVec2","BVec3","BVec3A","BVec4","BVec4A","BitFmt","BitSet","BitSetVec","BorrowError","BorrowMutError","Camera","ClearColor","CommandQueue","Commands","Comp","CompMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","CoreStage","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","Deref","DerefMut","DispatcherExecutionFailed","EcsData","EcsError","Entities","EntitiesIterWith","Entity","EntityIterator","EulerRot","FALSE","FALSE","FALSE","FALSE","FALSE","First","FromWorld","Handle","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IVec2","IVec3","IVec4","Image","IntoSystem","Iter","Key","KeyError","Last","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_W","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NotAscii","NotInitialized","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","Param","Path2d","PlaySound","PostUpdate","PreUpdate","Quat","QueryItem","RAND_BITS","RawFns","Res","ResAssetProviders","ResMut","Resources","SimpleSystemStage","Sprite","StageLabel","State","System","SystemError","SystemParam","SystemResult","SystemStage","SystemStages","TIME_BITS","TRUE","TRUE","TRUE","TRUE","TRUE","Tile","TileLayer","TooLong","Transform","TypeUlid","TypeUlid","TypeUlidCollision","TypedComponentOps","TypedEcsData","ULID","UVec2","UVec3","UVec4","Ulid","UlidMap","UntypedAssetProvider","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","UntypedHandle","UntypedResource","UntypedResourceInfo","UntypedResources","UnwrapMany","Update","Vec2","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3","Vec3A","Vec3Swizzles","Vec4","Vec4","Vec4","Vec4Swizzles","W","W","W","W","World","X","X","X","X","X","X","X","X","X","X","X","X","X","XYZ","XZY","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","YXZ","YZX","Z","Z","Z","Z","Z","Z","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZXY","ZYX","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","active","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat2","add_mat3","add_mat3","add_mat3","add_mat4","add_mat4","add_system","add_system","add_system_to_stage","all","all","all","all","all","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","any","any","any","any","any","any_orthogonal_vector","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","any_orthonormal_vector","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply_bitset","apply_bitset","apply_bitset","apply_bitset","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec2","as_dvec2","as_dvec3","as_dvec3","as_dvec3","as_dvec3","as_dvec4","as_dvec4","as_dvec4","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_f32","as_f64","as_ivec2","as_ivec2","as_ivec2","as_ivec3","as_ivec3","as_ivec3","as_ivec3","as_ivec4","as_ivec4","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_uvec2","as_uvec2","as_uvec2","as_uvec3","as_uvec3","as_uvec3","as_uvec3","as_uvec4","as_uvec4","as_uvec4","as_vec2","as_vec2","as_vec2","as_vec3","as_vec3","as_vec3","as_vec3a","as_vec3a","as_vec3a","as_vec4","as_vec4","as_vec4","atlas","atlas","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitset","bitset","bitset","bitset","bitset","bitset","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","ceil","ceil","ceil","cell","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clear_killed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_fn","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","cmp","cmp","cmp","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col","col","col","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","color","components","conjugate","conjugate","contains","contains","contains","contains","contains","create","create_bitset","cross","cross","cross","cross","cross","datetime","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dquat","drop","drop","drop_fn","dvec2","dvec3","dvec4","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","exp","exp","exp","exp","exp","exp","exp","extend","extend","extend","extend","extend","extend","extend","extend","extend","f32","f64","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","filter_map","filter_map","flip_x","flip_x","flip_x","flip_y","flip_y","flip_y","floor","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_type","fract","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_components","from_components_unsafe","from_components_unsafe","from_datetime","from_datetime_with_source","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_parts","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_rotation","from_rotation_arc","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_str","from_string","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_vec4","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_xyzw","from_xyzw","generation","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_bevy_handle","get_bevy_handle","get_bevy_handle_untyped","get_by_uuid","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_many_mut","get_many_mut","get_many_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_resource","get_state","get_state","get_state","get_state","get_state","get_state","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","grid_size","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","i32","id","id","id","id","id","idx","image","impl_bitset","increment","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init_resource","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize_systems","insert","insert","insert","insert","insert","insert","insert_resource","insert_stage_after","insert_stage_before","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_bevy","into_bevy","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_untyped","into_untyped","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_alive","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_nil","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","iter","iter","iter","iter","iter","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_mut","iter_mut","iter_mut","iter_mut","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_with","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","ivec2","ivec3","ivec4","key","kill","killed","label","layout","layout","length","length","length","length","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","line_breaks","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","look_to_rh","look_to_rh","maintain","map","map","mat2","mat3","mat3a","mat4","matrix2","matrix2","matrix3","matrix3","max","max","max","max","max","max","max","max","max","max","max","max","max","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","min","min","min","min","min","min","min","min","min","min","min","min","min","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat2","mul_mat3","mul_mat3","mul_mat3","mul_mat4","mul_mat4","mul_quat","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","mul_vec4","name","name","name","name","name","name","name","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_raw","next","next","next","next","next","next","nil","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_relative_to","not","not","not","not","not","not","not","not","not","not","not","orthographic_lh","orthographic_lh","orthographic_rh","orthographic_rh","orthographic_rh_gl","orthographic_rh_gl","partial_cmp","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","perp","perp","perp","perp_dot","perp_dot","perp_dot","perspective_infinite_lh","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_infinite_rh","perspective_lh","perspective_lh","perspective_rh","perspective_rh","perspective_rh_gl","perspective_rh_gl","play","points","powf","powf","powf","powf","powf","powf","powf","prelude","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","project_point3","provide","provide","quat","queue","queue","random","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","recip","recip","recip","recip","recip","recip","recip","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","remove","remove","remove","remove","remove","remove","resource","rotate","rotate","rotate","rotation","round","round","round","round","round","round","round","row","row","row","row","row","row","row","run","run","run","run","run","run_initialized_system","run_system","scale","select","select","select","select","select","select","select","select","select","select","select","select","select","send","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","stages","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat2","sub_mat3","sub_mat3","sub_mat3","sub_mat4","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swizzles","system","system","systems","thickness","tile_size","tiles","timestamp_ms","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_scaled_axis","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","translation","translation","translation","transpose","transpose","transpose","transpose","transpose","transpose","transpose","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","try_borrow","try_borrow_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get","try_get","try_get_by_uuid","try_get_mut","try_init","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_remove","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","typed","u32","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","ulid","untyped","untyped","untyped_mut","unwrap_many","uvec2","uvec3","uvec4","vec2","vec3","vec3a","vec4","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","w","w","w","w_axis","w_axis","with_core_stages","with_source","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","ww","ww","ww","ww","www","www","www","www","www","wwww","wwww","wwww","wwww","wwww","wwwx","wwwx","wwwx","wwwx","wwwx","wwwy","wwwy","wwwy","wwwy","wwwy","wwwz","wwwz","wwwz","wwwz","wwwz","wwx","wwx","wwx","wwx","wwx","wwxw","wwxw","wwxw","wwxw","wwxw","wwxx","wwxx","wwxx","wwxx","wwxx","wwxy","wwxy","wwxy","wwxy","wwxy","wwxz","wwxz","wwxz","wwxz","wwxz","wwy","wwy","wwy","wwy","wwy","wwyw","wwyw","wwyw","wwyw","wwyw","wwyx","wwyx","wwyx","wwyx","wwyx","wwyy","wwyy","wwyy","wwyy","wwyy","wwyz","wwyz","wwyz","wwyz","wwyz","wwz","wwz","wwz","wwz","wwz","wwzw","wwzw","wwzw","wwzw","wwzw","wwzx","wwzx","wwzx","wwzx","wwzx","wwzy","wwzy","wwzy","wwzy","wwzy","wwzz","wwzz","wwzz","wwzz","wwzz","wx","wx","wx","wx","wx","wxw","wxw","wxw","wxw","wxw","wxww","wxww","wxww","wxww","wxww","wxwx","wxwx","wxwx","wxwx","wxwx","wxwy","wxwy","wxwy","wxwy","wxwy","wxwz","wxwz","wxwz","wxwz","wxwz","wxx","wxx","wxx","wxx","wxx","wxxw","wxxw","wxxw","wxxw","wxxw","wxxx","wxxx","wxxx","wxxx","wxxx","wxxy","wxxy","wxxy","wxxy","wxxy","wxxz","wxxz","wxxz","wxxz","wxxz","wxy","wxy","wxy","wxy","wxy","wxyw","wxyw","wxyw","wxyw","wxyw","wxyx","wxyx","wxyx","wxyx","wxyx","wxyy","wxyy","wxyy","wxyy","wxyy","wxyz","wxyz","wxyz","wxyz","wxyz","wxz","wxz","wxz","wxz","wxz","wxzw","wxzw","wxzw","wxzw","wxzw","wxzx","wxzx","wxzx","wxzx","wxzx","wxzy","wxzy","wxzy","wxzy","wxzy","wxzz","wxzz","wxzz","wxzz","wxzz","wy","wy","wy","wy","wy","wyw","wyw","wyw","wyw","wyw","wyww","wyww","wyww","wyww","wyww","wywx","wywx","wywx","wywx","wywx","wywy","wywy","wywy","wywy","wywy","wywz","wywz","wywz","wywz","wywz","wyx","wyx","wyx","wyx","wyx","wyxw","wyxw","wyxw","wyxw","wyxw","wyxx","wyxx","wyxx","wyxx","wyxx","wyxy","wyxy","wyxy","wyxy","wyxy","wyxz","wyxz","wyxz","wyxz","wyxz","wyy","wyy","wyy","wyy","wyy","wyyw","wyyw","wyyw","wyyw","wyyw","wyyx","wyyx","wyyx","wyyx","wyyx","wyyy","wyyy","wyyy","wyyy","wyyy","wyyz","wyyz","wyyz","wyyz","wyyz","wyz","wyz","wyz","wyz","wyz","wyzw","wyzw","wyzw","wyzw","wyzw","wyzx","wyzx","wyzx","wyzx","wyzx","wyzy","wyzy","wyzy","wyzy","wyzy","wyzz","wyzz","wyzz","wyzz","wyzz","wz","wz","wz","wz","wz","wzw","wzw","wzw","wzw","wzw","wzww","wzww","wzww","wzww","wzww","wzwx","wzwx","wzwx","wzwx","wzwx","wzwy","wzwy","wzwy","wzwy","wzwy","wzwz","wzwz","wzwz","wzwz","wzwz","wzx","wzx","wzx","wzx","wzx","wzxw","wzxw","wzxw","wzxw","wzxw","wzxx","wzxx","wzxx","wzxx","wzxx","wzxy","wzxy","wzxy","wzxy","wzxy","wzxz","wzxz","wzxz","wzxz","wzxz","wzy","wzy","wzy","wzy","wzy","wzyw","wzyw","wzyw","wzyw","wzyw","wzyx","wzyx","wzyx","wzyx","wzyx","wzyy","wzyy","wzyy","wzyy","wzyy","wzyz","wzyz","wzyz","wzyz","wzyz","wzz","wzz","wzz","wzz","wzz","wzzw","wzzw","wzzw","wzzw","wzzw","wzzx","wzzx","wzzx","wzzx","wzzx","wzzy","wzzy","wzzy","wzzy","wzzy","wzzz","wzzz","wzzz","wzzz","wzzz","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","x_axis","x_axis","xw","xw","xw","xw","xw","xww","xww","xww","xww","xww","xwww","xwww","xwww","xwww","xwww","xwwx","xwwx","xwwx","xwwx","xwwx","xwwy","xwwy","xwwy","xwwy","xwwy","xwwz","xwwz","xwwz","xwwz","xwwz","xwx","xwx","xwx","xwx","xwx","xwxw","xwxw","xwxw","xwxw","xwxw","xwxx","xwxx","xwxx","xwxx","xwxx","xwxy","xwxy","xwxy","xwxy","xwxy","xwxz","xwxz","xwxz","xwxz","xwxz","xwy","xwy","xwy","xwy","xwy","xwyw","xwyw","xwyw","xwyw","xwyw","xwyx","xwyx","xwyx","xwyx","xwyx","xwyy","xwyy","xwyy","xwyy","xwyy","xwyz","xwyz","xwyz","xwyz","xwyz","xwz","xwz","xwz","xwz","xwz","xwzw","xwzw","xwzw","xwzw","xwzw","xwzx","xwzx","xwzx","xwzx","xwzx","xwzy","xwzy","xwzy","xwzy","xwzy","xwzz","xwzz","xwzz","xwzz","xwzz","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xxw","xxw","xxw","xxw","xxw","xxww","xxww","xxww","xxww","xxww","xxwx","xxwx","xxwx","xxwx","xxwx","xxwy","xxwy","xxwy","xxwy","xxwy","xxwz","xxwz","xxwz","xxwz","xxwz","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxxw","xxxw","xxxw","xxxw","xxxw","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxyw","xxyw","xxyw","xxyw","xxyw","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxzw","xxzw","xxzw","xxzw","xxzw","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xyw","xyw","xyw","xyw","xyw","xyww","xyww","xyww","xyww","xyww","xywx","xywx","xywx","xywx","xywx","xywy","xywy","xywy","xywy","xywy","xywz","xywz","xywz","xywz","xywz","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyxw","xyxw","xyxw","xyxw","xyxw","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyyw","xyyw","xyyw","xyyw","xyyw","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyzw","xyzw","xyzw","xyzw","xyzw","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xzw","xzw","xzw","xzw","xzw","xzww","xzww","xzww","xzww","xzww","xzwx","xzwx","xzwx","xzwx","xzwx","xzwy","xzwy","xzwy","xzwy","xzwy","xzwz","xzwz","xzwz","xzwz","xzwz","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzxw","xzxw","xzxw","xzxw","xzxw","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzyw","xzyw","xzyw","xzyw","xzyw","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzzw","xzzw","xzzw","xzzw","xzzw","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","y_axis","y_axis","yw","yw","yw","yw","yw","yww","yww","yww","yww","yww","ywww","ywww","ywww","ywww","ywww","ywwx","ywwx","ywwx","ywwx","ywwx","ywwy","ywwy","ywwy","ywwy","ywwy","ywwz","ywwz","ywwz","ywwz","ywwz","ywx","ywx","ywx","ywx","ywx","ywxw","ywxw","ywxw","ywxw","ywxw","ywxx","ywxx","ywxx","ywxx","ywxx","ywxy","ywxy","ywxy","ywxy","ywxy","ywxz","ywxz","ywxz","ywxz","ywxz","ywy","ywy","ywy","ywy","ywy","ywyw","ywyw","ywyw","ywyw","ywyw","ywyx","ywyx","ywyx","ywyx","ywyx","ywyy","ywyy","ywyy","ywyy","ywyy","ywyz","ywyz","ywyz","ywyz","ywyz","ywz","ywz","ywz","ywz","ywz","ywzw","ywzw","ywzw","ywzw","ywzw","ywzx","ywzx","ywzx","ywzx","ywzx","ywzy","ywzy","ywzy","ywzy","ywzy","ywzz","ywzz","ywzz","ywzz","ywzz","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yxw","yxw","yxw","yxw","yxw","yxww","yxww","yxww","yxww","yxww","yxwx","yxwx","yxwx","yxwx","yxwx","yxwy","yxwy","yxwy","yxwy","yxwy","yxwz","yxwz","yxwz","yxwz","yxwz","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxxw","yxxw","yxxw","yxxw","yxxw","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxyw","yxyw","yxyw","yxyw","yxyw","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxzw","yxzw","yxzw","yxzw","yxzw","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yyw","yyw","yyw","yyw","yyw","yyww","yyww","yyww","yyww","yyww","yywx","yywx","yywx","yywx","yywx","yywy","yywy","yywy","yywy","yywy","yywz","yywz","yywz","yywz","yywz","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyxw","yyxw","yyxw","yyxw","yyxw","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyyw","yyyw","yyyw","yyyw","yyyw","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyzw","yyzw","yyzw","yyzw","yyzw","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yzw","yzw","yzw","yzw","yzw","yzww","yzww","yzww","yzww","yzww","yzwx","yzwx","yzwx","yzwx","yzwx","yzwy","yzwy","yzwy","yzwy","yzwy","yzwz","yzwz","yzwz","yzwz","yzwz","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzxw","yzxw","yzxw","yzxw","yzxw","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzyw","yzyw","yzyw","yzyw","yzyw","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzzw","yzzw","yzzw","yzzw","yzzw","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","z","z","z","z","z","z","z","z","z","z","z_axis","z_axis","z_axis","z_axis","z_axis","zw","zw","zw","zw","zw","zww","zww","zww","zww","zww","zwww","zwww","zwww","zwww","zwww","zwwx","zwwx","zwwx","zwwx","zwwx","zwwy","zwwy","zwwy","zwwy","zwwy","zwwz","zwwz","zwwz","zwwz","zwwz","zwx","zwx","zwx","zwx","zwx","zwxw","zwxw","zwxw","zwxw","zwxw","zwxx","zwxx","zwxx","zwxx","zwxx","zwxy","zwxy","zwxy","zwxy","zwxy","zwxz","zwxz","zwxz","zwxz","zwxz","zwy","zwy","zwy","zwy","zwy","zwyw","zwyw","zwyw","zwyw","zwyw","zwyx","zwyx","zwyx","zwyx","zwyx","zwyy","zwyy","zwyy","zwyy","zwyy","zwyz","zwyz","zwyz","zwyz","zwyz","zwz","zwz","zwz","zwz","zwz","zwzw","zwzw","zwzw","zwzw","zwzw","zwzx","zwzx","zwzx","zwzx","zwzx","zwzy","zwzy","zwzy","zwzy","zwzy","zwzz","zwzz","zwzz","zwzz","zwzz","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zxw","zxw","zxw","zxw","zxw","zxww","zxww","zxww","zxww","zxww","zxwx","zxwx","zxwx","zxwx","zxwx","zxwy","zxwy","zxwy","zxwy","zxwy","zxwz","zxwz","zxwz","zxwz","zxwz","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxxw","zxxw","zxxw","zxxw","zxxw","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxyw","zxyw","zxyw","zxyw","zxyw","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxzw","zxzw","zxzw","zxzw","zxzw","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zyw","zyw","zyw","zyw","zyw","zyww","zyww","zyww","zyww","zyww","zywx","zywx","zywx","zywx","zywx","zywy","zywy","zywy","zywy","zywy","zywz","zywz","zywz","zywz","zywz","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyxw","zyxw","zyxw","zyxw","zyxw","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyyw","zyyw","zyyw","zyyw","zyyw","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyzw","zyzw","zyzw","zyzw","zyzw","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zzw","zzw","zzw","zzw","zzw","zzww","zzww","zzww","zzww","zzww","zzwx","zzwx","zzwx","zzwx","zzwx","zzwy","zzwy","zzwy","zzwy","zzwy","zzwz","zzwz","zzwz","zzwz","zzwz","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzxw","zzxw","zzxw","zzxw","zzxw","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzyw","zzyw","zzyw","zzyw","zzyw","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzzw","zzzw","zzzw","zzzw","zzzw","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","sound_source","volume","0","0","BVec2","BVec3","BVec3A","BVec4","BVec4A","w","x","x","x","y","y","y","z","z","Affine2","Affine3A","Mat2","Mat3","Mat3A","Mat4","Quat","Vec2","Vec3","Vec3A","Vec4","mat2","mat3","mat3a","mat4","matrix2","matrix3","quat","translation","translation","vec2","vec3","vec3a","vec4","w_axis","x","x","x_axis","x_axis","x_axis","y","y","y_axis","y_axis","y_axis","z","z_axis","z_axis","z_axis","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","dmat2","dmat3","dmat4","dquat","dvec2","dvec3","dvec4","matrix2","matrix3","translation","translation","w","w","w_axis","x","x","x","x","x_axis","x_axis","x_axis","y","y","y","y","y_axis","y_axis","y_axis","z","z","z","z_axis","z_axis","IVec2","IVec3","IVec4","ivec2","ivec3","ivec4","w","x","x","x","y","y","y","z","z","0","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","Handle","ResAssetProviders","UntypedAssetProvider","UntypedHandle","get","get","get_mut","get_mut","label","path","path","path","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","UVec2","UVec3","UVec4","uvec2","uvec3","uvec4","w","x","x","x","y","y","y","z","z","Atlas","AtlasSprite","Image","Sprite","atlas","flip_x","flip_x","flip_y","flip_y","image","index","Tile","TileLayer","atlas","flip_x","flip_y","grid_size","idx","tile_size","tiles","Transform","rotation","scale","translation"],"q":["bones_lib","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::animation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::asset","","","","","","","","","","","","","","","","","","","","bones_lib::asset::prelude","","","","","","","","","","","","","","","","","","","bones_lib::camera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::ecs","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::ecs::EcsError","","bones_lib::ecs::atomic","","","","","bones_lib::ecs::bitset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::ecs::components","","","","","","","","","","","bones_lib::ecs::entities","","","","","","","","bones_lib::ecs::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::ecs::prelude::EcsError","","bones_lib::ecs::resources","","","","","","","","","bones_lib::ecs::stage","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::ecs::system","","","","","","","","","","","","","","","","bones_lib::ecs::ulid","","","","","","bones_lib::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::input::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::input::time","","","","","","bones_lib::preludebones_lib::prelude::AudioEvent","","bones_lib::prelude::EcsError","","bones_lib::prelude::bool","","","","","","","","","","","","","","bones_lib::prelude::f32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::prelude::f64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::prelude::i32","","","","","","","","","","","","","","","bones_lib::prelude::prelude","","","","","","","","","","","","","","","","","","","bones_lib::prelude::swizzlesbones_lib::prelude::time","","","","","","bones_lib::prelude::u32","","","","","","","","","","","","","","","bones_lib::render","","","","","","","","","","bones_lib::render::audio","","","","","bones_lib::render::audio::AudioEvent","","bones_lib::render::camera","","","","","bones_lib::render::datatypes","","","","","bones_lib::render::line","","","","","bones_lib::render::preludebones_lib::render::prelude::AudioEvent","","bones_lib::render::prelude::EcsError","","bones_lib::render::prelude::bool","","","","","","","","","","","","","","bones_lib::render::prelude::f32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::render::prelude::f64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_lib::render::prelude::i32","","","","","","","","","","","","","","","bones_lib::render::prelude::prelude","","","","","","","","","","","","","","","","","","","bones_lib::render::prelude::swizzlesbones_lib::render::prelude::u32","","","","","","","","","","","","","","","bones_lib::render::sprite","","","","","","","","","","","bones_lib::render::tilemap","","","","","","","","","bones_lib::render::transform","","",""],"d":["","This is a resource that stores the game’s fixed frame …","Animation utilities and systems.","","","","","","Camera utilities.","","","","","","","Returns the argument unchanged.","","","Install the <code>bones_lib</code> systems for things such as animation …","Calls <code>U::from(self)</code>.","","","","Bones lib prelude","","","","","","","","","Component that may be added to entities with an <code>AtlasSprite</code>…","Component that may be added to an <code>AtlasSprite</code> to control …","System for automatically animating sprites with the …","The collection of animations in this animation bank.","","","","","","","","","","","","","","","The current animation.","","","","The frames per second to play the animation at.","The frames in the animation.","Returns the argument unchanged.","Returns the argument unchanged.","","","The current frame in the animation.","Install animation utilities into the given <code>SystemStages</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The last animation that was playing.","","","","","Whether or not to repeat the animation","The amount of time the current frame has been playing","","","","","","","","","","","System for updating <code>AnimatedSprite</code>s based on thier …","","","","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","A typed handle to an asset.","Type alias for getting the <code>AssetProviders</code> resource.","Trait implemented for asset providers that can return …","An untyped handle to an asset.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","The optional sub-asset label","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","The prelude.","","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","A typed handle to an asset.","Type alias for getting the <code>AssetProviders</code> resource.","Trait implemented for asset providers that can return …","An untyped handle to an asset.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","The optional sub-asset label","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","","Component for an entity with camera shake.","Queue that can be used to send camera trauma events.","Resource providing a noise source for <code>CameraShake</code> entities …","Adds trauma to the camera, capping it at 1.0","","","","","","","","","","","","","The camera will always restore to this position.","","","","","","","","","","The the length of time in seconds for the camera trauma to …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Install the camera utilities on the given <code>SystemStages</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","The maximum offset angle in radians that the camera shake …","The maximum offset position that the camera shake can …","Create a new <code>CameraShake</code> component with the provided …","The event queue.","","","","","","","Send a camera trauma event.","","","","Value from 0-1 that indicates the intensity of the shake. …","","","","","","","","","","","","","","","","Create a new <code>CameraShake</code> component with the provided …","The requested resource is already borrowed.","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Creates an instance of the type this trait is implemented …","A resource was not initialized in the <code>World</code> but the <code>System</code> …","Helper trait that is auto-implemented for all <code>Clone</code>-able …","This variant is for user-defined errors.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Helper trait that is auto-implemented for anything that …","Helper trait for unwraping each item in an array.","The <code>World</code> is simply a collection of <code>Resources</code>, and …","Atomic Refcell implmentation.","Bitset implementation.","ECS component storage.","Stores the world components.","Free-standing, shorter equivalent to <code>Default::default()</code>.","<code>Entity</code> implementation, storage, and interation.","Creates <code>Self</code> using data from the given <code>World</code>.","The prelude.","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","Drop the value at <code>ptr</code>.","World resource storage.","Implementation of stage abstraction for running …","Implements the system API for the ECS.","ULID-related utilities such as ULID map and type ULIDs.","Unwrap all the items in an array.","","","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","Shorthand for combining bitsets with bit_or.","Shorthand for setting bits on the bitset container.","Creates a bitset big enough to contain the index of each …","Implements the <code>BitSet</code> trait members for your type through …","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","Implements typed operations on top of a …","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","The type of iterator this query item creates","A type representing a component-joining entity query.","Modify the iteration bitset","Return an iterator over the provided bitset.","","","The requested resource is already borrowed.","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","A handle to a resource from a <code>Resources</code> collection.","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","A <code>StageLabel</code> for the 5 core stages.","Implements <code>Deref</code> for <em>single-item</em> structs. This is …","Implements <code>DerefMut</code> for <em>single-item</em> structs. This is …","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","The first stage","Creates an instance of the type this trait is implemented …","Converts a function into a <code>System</code>.","The type of iterator this query item creates","The fifth stage","A resource was not initialized in the <code>World</code> but the <code>System</code> …","The type of the parameter, ranging over the lifetime of …","The fourth stage","The second stage","A type representing a component-joining entity query.","Helper trait that is auto-implemented for all <code>Clone</code>-able …","<code>SystemParam</code> for getting read access to a resource.","<code>SystemParam</code> for getting mutable access to a resource.","A collection of resources.","A collection of systems that will be run in order.","Trait for things that may be used to identify a system …","The intermediate state for the parameter, that may be …","Struct used to run a system function using the world.","This variant is for user-defined errors.","Trait used to implement parameters for <code>System</code> functions.","The result of a <code>System</code>’s execution.","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Implements typed operations on top of a …","Helper trait that is auto-implemented for anything that …","The type’s <code>Ulid</code>.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key.","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","Helper trait for unwraping each item in an array.","The third stage","The <code>World</code> is simply a collection of <code>Resources</code>, and …","Add a system to this stage.","Modify the iteration bitset","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","Shorthand for combining bitsets with bit_or.","Shorthand for setting bits on the bitset container.","This is used create an instance of the system parame, …","Cell containing the raw pointer to the resource’s data","A function that may be called to clone the resource from …","Stores the world components.","Creates a bitset big enough to contain the index of each …","Free-standing, shorter equivalent to <code>Default::default()</code>.","An optional function that will be called to drop the …","Creates <code>Self</code> using data from the given <code>World</code>.","This is called to produce the intermediate state of the …","The unique identifier for the stage.","Returns a unique identifier for the stage.","The unique identifier for the stage.","Implements the <code>BitSet</code> trait members for your type through …","Initialize the contained systems for the given <code>world</code>.","This will be called to give the parameter a chance to …","This should be called once to initialize the system, …","Return an iterator over the provided bitset.","The memory layout of the resource","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","The human-readable name for the stage, used for error …","A best-effort name for the system, for diagnostic purposes.","The system queue that will be run at the end of the stage","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","Drop the value at <code>ptr</code>.","Execute the systems on the given <code>world</code>.","This is run every time the system is executed","The stages in the collection, in the order that they will …","Convert into a <code>System</code>.","The list of systems in the stage.","Unwrap all the items in an array.","","","A handle to a resource from a <code>Resources</code> collection.","A collection of resources.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","Cell containing the raw pointer to the resource’s data","A function that may be called to clone the resource from …","An optional function that will be called to drop the …","The memory layout of the resource","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","A <code>StageLabel</code> for the 5 core stages.","The first stage","The fifth stage","The fourth stage","The second stage","A collection of systems that will be run in order.","Trait for things that may be used to identify a system …","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","The third stage","Add a system to this stage.","The unique identifier for the stage.","Returns a unique identifier for the stage.","The unique identifier for the stage.","Initialize the contained systems for the given <code>world</code>.","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","The human-readable name for the stage, used for error …","The system queue that will be run at the end of the stage","Execute the systems on the given <code>world</code>.","The stages in the collection, in the order that they will …","The list of systems in the stage.","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Converts a function into a <code>System</code>.","The type of the parameter, ranging over the lifetime of …","<code>SystemParam</code> for getting read access to a resource.","<code>SystemParam</code> for getting mutable access to a resource.","The intermediate state for the parameter, that may be …","Struct used to run a system function using the world.","Trait used to implement parameters for <code>System</code> functions.","This is used create an instance of the system parame, …","This is called to produce the intermediate state of the …","This will be called to give the parameter a chance to …","This should be called once to initialize the system, …","A best-effort name for the system, for diagnostic purposes.","This is run every time the system is executed","Convert into a <code>System</code>.","","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","The type’s <code>Ulid</code>.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key.","Information about the window the game is running in.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","The prelude.","","","The logical size of the window’s client area.","Time functionality for the Bones framework.","","","","","","","Run once and stop.","Reset when finished.","A Stopwatch is a struct that track elapsed time when …","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","Information about the window the game is running in.","Advance the time exactly by the given duration.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns how much time has advanced since the last <code>update</code>, …","Returns how much time has advanced since the last <code>update</code>, …","Returns how much time has advanced since the last <code>update</code>, …","Returns the duration of the timer.","","","Returns the elapsed time since the last <code>reset</code> of the …","Returns the time elapsed on the timer. Guaranteed to be …","Returns how much time has advanced since <code>startup</code>, as …","Returns how much time has advanced since <code>startup</code>, as <code>f32</code> …","Returns how much time has advanced since <code>startup</code>, as <code>f64</code> …","Returns the elapsed time since the last <code>reset</code> of the …","Returns the time elapsed on the timer as an <code>f32</code>. See also …","Returns the elapsed time since the last <code>reset</code> of the …","","Returns <code>true</code> if the timer has reached its duration at …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new timer with a given duration in seconds.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns <code>true</code> if the clock is currently paused.","Returns <code>true</code> only on the tick the timer reached its …","Returns the mode of the timer.","Create a new unpaused <code>Stopwatch</code> with no elapsed time.","Creates a new timer with a given duration.","Constructs a new <code>Time</code> instance with a specific startup …","Pauses the stopwatch. Any call to <code>tick</code> while paused will …","Pauses the Timer. Disables the ticking of the timer.","Stops the clock, preventing it from advancing until …","Returns <code>true</code> if the stopwatch is paused.","Returns <code>true</code> if the timer is paused.","Returns the percentage of the timer elapsed time (goes …","Returns the percentage of the timer remaining time (goes …","","","","","","","","","Returns the remaining time using Duration","Returns the remaining time in seconds","Resets the stopwatch. The reset doesn’t affect the …","Resets the timer. The reset doesn’t affect the <code>paused</code> …","Sets the duration of the timer.","Sets the elapsed time of the stopwatch.","Sets the elapsed time of the timer without any other …","Sets the mode of the timer.","The logical size of the window’s client area.","Advance the stopwatch by <code>delta</code> seconds. If the stopwatch …","Advance the timer by <code>delta</code> seconds. Non repeating timer …","Returns the number of times a repeating timer finished …","","","","","","","","","","","","","","","","","","Unpauses the stopwatch. Resume the effect of ticking on …","Unpauses the Timer. Resumes the ticking of the timer.","Resumes the clock if paused.","Updates the internal time measurements.","Updates time with a specified <code>Instant</code>.","","","","","Run once and stop.","Reset when finished.","A Stopwatch is a struct that track elapsed time when …","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The requested resource is already borrowed.","","","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","An atlas image asset type, contains no data, but …","An animated sprite component.","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","A handle to a resource from a <code>Resources</code> collection.","An audio event that may be sent to the <code>AudioEvents</code> …","Resource containing the audio event queue.","The audio source asset type, contains no data, but …","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","Resource that contains a bevy world.","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","Makes an entity behave like a camera.","Resource for controlling the clear color.","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","A <code>StageLabel</code> for the 5 core stages.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Implements <code>Deref</code> for <em>single-item</em> structs. This is …","Implements <code>DerefMut</code> for <em>single-item</em> structs. This is …","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","Euler rotation sequences.","The first stage","","Creates an instance of the type this trait is implemented …","A typed handle to an asset.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Image asset type, contains no data, but <code>Handle&lt;Image&gt;</code> is …","Helper trait for converting bones types to Bevy types.","Converts a function into a <code>System</code>.","The type of iterator this query item creates","A small ascii byte array stored on the stack and used …","An error that may be caused when creating a <code>Key</code>.","The fifth stage","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","The key is not ASCII.","A resource was not initialized in the <code>World</code> but the <code>System</code> …","Run once and stop.","The type of the parameter, ranging over the lifetime of …","A component for rendering a 2D line path, made up of a …","Play a sound.","The fourth stage","The second stage","A quaternion representing an orientation.","A type representing a component-joining entity query.","Helper trait that is auto-implemented for all <code>Clone</code>-able …","Reset when finished.","<code>SystemParam</code> for getting read access to a resource.","Type alias for getting the <code>AssetProviders</code> resource.","<code>SystemParam</code> for getting mutable access to a resource.","A collection of resources.","A collection of systems that will be run in order.","A 2D sprite component","Trait for things that may be used to identify a system …","The intermediate state for the parameter, that may be …","A Stopwatch is a struct that track elapsed time when …","Struct used to run a system function using the world.","This variant is for user-defined errors.","Trait used to implement parameters for <code>System</code> functions.","The result of a <code>System</code>’s execution.","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","A tilemap tile component.","A tilemap layer component.","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","The key is too long.","The main transform component.","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Implements typed operations on top of a …","Helper trait that is auto-implemented for anything that …","The type’s <code>Ulid</code>.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key.","Trait implemented for asset providers that can return …","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","An untyped handle to an asset.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","Helper trait for unwraping each item in an array.","The third stage","A 2-dimensional vector.","","","","A 3-dimensional vector.","","","A 3-dimensional vector with SIMD support.","","A 4-dimensional vector with SIMD support.","","","","Information about the window the game is running in.","The <code>World</code> is simply a collection of <code>Resources</code>, and …","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","Whether or not the camera is enabled and rendering.","Add a system to this stage.","Modify the iteration bitset","","","The atlas handle.","The texture atlas to use for the layer","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","Shorthand for combining bitsets with bit_or.","Shorthand for setting bits on the bitset container.","<code>bool</code> vector mask types. ","This is used create an instance of the system parame, …","","","Cell containing the raw pointer to the resource’s data","","A function that may be called to clone the resource from …","","","The color of the path.","Stores the world components.","Creates a bitset big enough to contain the index of each …","Free-standing, shorter equivalent to <code>Default::default()</code>.","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","An optional function that will be called to drop the …","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite horizontally.","Whether or not to flip the tile horizontally.","Whether or not the flip the sprite vertically.","Whether or not the flip the sprite vertically.","Whether or not to flip tile vertically.","Returns the argument unchanged.","Creates <code>Self</code> using data from the given <code>World</code>.","","","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","This is called to produce the intermediate state of the …","The size of the layer in tiles.","The height of the camera in in-game pixels.","<code>i32</code> vector types. ","The unique identifier for the stage.","Returns a unique identifier for the stage.","The unique identifier for the stage.","The tile index in the tilemap texture.","The sprite image handle.","Implements the <code>BitSet</code> trait members for your type through …","This is the current index in the animation, with an <code>idx</code> of …","Initialize the contained systems for the given <code>world</code>.","This will be called to give the parameter a chance to …","This should be called once to initialize the system, …","Calls <code>U::from(self)</code>.","","","","Convert the type to a Bevy type.","Return an iterator over the provided bitset.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Create a new const <code>Key</code> parsed at compile time.","The optional sub-asset label","The memory layout of the resource","List of indexes into the <code>points</code> vector, for which that …","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","","","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","The human-readable name for the stage, used for error …","A best-effort name for the system, for diagnostic purposes.","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","The list of points in the path","The prelude.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","List of audio events that haven’t been handled by the …","The system queue that will be run at the end of the stage","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","","Drop the value at <code>ptr</code>.","","The rotation of the entity.","Execute the systems on the given <code>world</code>.","This is run every time the system is executed","The scale of the entity.","The logical size of the window’s client area.","The stages in the collection, in the order that they will …","Traits adding swizzle methods to all vector types. ","Convert into a <code>System</code>.","The list of systems in the stage.","The thickness of the line.","The size of each tile in the layer.","The vector of tile slots in this layer.","Time functionality for the Bones framework.","","The position of the entity in the world.","","","","","","","","<code>u32</code> vector types. ","","Unwrap all the items in an array.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vectorhe handle to the sound to play.","The volume to play the sound at.","","","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector with SIMD support.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","A typed handle to an asset.","Type alias for getting the <code>AssetProviders</code> resource.","Trait implemented for asset providers that can return …","An untyped handle to an asset.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","The optional sub-asset label","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle representsun once and stop.","Reset when finished.","A Stopwatch is a struct that track elapsed time when …","A clock that tracks how much it has advanced (and how much …","Tracks elapsed time. Enters the finished state once …","Specifies <code>Timer</code> behavior.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Audio components.","Camera components.","Useful data types such as <code>Key</code>.","Create a new const <code>Key</code> parsed at compile time.","Create a new const <code>Key</code> parsed at compile time.","Line rendering, useful for debugging.","The prelude","Sprite rendering components.","Tile map rendering components.","Transform component.","An audio event that may be sent to the <code>AudioEvents</code> …","Resource containing the audio event queue.","The audio source asset type, contains no data, but …","Play a sound.","List of audio events that haven’t been handled by the …","The handle to the sound to play.","The volume to play the sound at.","","Makes an entity behave like a camera.","Resource for controlling the clear color.","Whether or not the camera is enabled and rendering.","The height of the camera in in-game pixels.","","A small ascii byte array stored on the stack and used …","An error that may be caused when creating a <code>Key</code>.","The key is not ASCII.","The key is too long.","A component for rendering a 2D line path, made up of a …","The color of the path.","List of indexes into the <code>points</code> vector, for which that …","The list of points in the path","The thickness of the line.","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The requested resource is already borrowed.","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","An atlas image asset type, contains no data, but …","An animated sprite component.","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","A handle to a resource from a <code>Resources</code> collection.","An audio event that may be sent to the <code>AudioEvents</code> …","Resource containing the audio event queue.","The audio source asset type, contains no data, but …","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","Makes an entity behave like a camera.","Resource for controlling the clear color.","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","A <code>StageLabel</code> for the 5 core stages.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Implements <code>Deref</code> for <em>single-item</em> structs. This is …","Implements <code>DerefMut</code> for <em>single-item</em> structs. This is …","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","Euler rotation sequences.","All false.","All false.","All false.","All false.","All false.","The first stage","Creates an instance of the type this trait is implemented …","A typed handle to an asset.","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Image asset type, contains no data, but <code>Handle&lt;Image&gt;</code> is …","Converts a function into a <code>System</code>.","The type of iterator this query item creates","A small ascii byte array stored on the stack and used …","An error that may be caused when creating a <code>Key</code>.","The fifth stage","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","The key is not ASCII.","A resource was not initialized in the <code>World</code> but the <code>System</code> …","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","The type of the parameter, ranging over the lifetime of …","A component for rendering a 2D line path, made up of a …","Play a sound.","The fourth stage","The second stage","A quaternion representing an orientation.","A type representing a component-joining entity query.","The number of bits in a Ulid’s random portion","Helper trait that is auto-implemented for all <code>Clone</code>-able …","<code>SystemParam</code> for getting read access to a resource.","Type alias for getting the <code>AssetProviders</code> resource.","<code>SystemParam</code> for getting mutable access to a resource.","A collection of resources.","A collection of systems that will be run in order.","A 2D sprite component","Trait for things that may be used to identify a system …","The intermediate state for the parameter, that may be …","Struct used to run a system function using the world.","This variant is for user-defined errors.","Trait used to implement parameters for <code>System</code> functions.","The result of a <code>System</code>’s execution.","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","The number of bits in a Ulid’s time portion","All true.","All true.","All true.","All true.","All true.","A tilemap tile component.","A tilemap layer component.","The key is too long.","The main transform component.","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Implements typed operations on top of a …","Helper trait that is auto-implemented for anything that …","The type’s <code>Ulid</code>.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key.","Trait implemented for asset providers that can return …","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","An untyped handle to an asset.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","Helper trait for unwraping each item in an array.","The third stage","A 2-dimensional vector.","","","","A 3-dimensional vector.","","","A 3-dimensional vector with SIMD support.","","A 4-dimensional vector with SIMD support.","","","","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","The <code>World</code> is simply a collection of <code>Resources</code>, and …","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Whether or not the camera is enabled and rendering.","Add an asset provider for a specific asset type.","Add a system to be run at the end of the stage.","","","","","","","","","Adds two quaternions.","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Adds two 4x4 matrices.","Add a system to this stage.","","Add a <code>System</code> to the stage with the given label.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Modify the iteration bitsetasts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a raw pointer to the underlying data in this cell.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","The atlas handle.","The texture atlas to use for the layer","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","","","","","","","","","","","","","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","Shorthand for combining bitsets with bit_or.","","","","","","Read the bitset containing the list of entites with this …","Read the bitset containing the list of entites with this …","Get the bitset representing which entities have this …","Returns the bitset indicating which entity indices have a …","Returns a bitset where each index where the bit is set to …","Shorthand for setting bits on the bitset container.","","","","","","","","","","","","","","","","","","","","","","","<code>bool</code> vector mask types. ","This is used create an instance of the system parame, …","Immutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lock the resource for reading.","","","","","","","","","","Borrow the component store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lock the resource for read-writing.","","","","","","","Mutably borrow the component store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Cell containing the raw pointer to the resource’s data","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Clears the killed entity list.","","","","","Copies an <code>AtomicRef</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function that may be called to clone the resource from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","The color of the path.","Stores the world components.","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not the bitset contains the given entity.","Check whether or not a resource is in the store.","Creates a new <code>Entity</code> and returns it.","Creates a bitset big enough to contain the index of each …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Gets the datetime of when this Ulid was created accurate …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Free-standing, shorter equivalent to <code>Default::default()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","An optional function that will be called to drop the …","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a new <code>AtomicRef</code> for an optional component of the …","Make a new <code>AtomicRefMut</code> for an optional component of the …","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite horizontally.","Whether or not to flip the tile horizontally.","Whether or not the flip the sprite vertically.","Whether or not the flip the sprite vertically.","Whether or not to flip tile vertically.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an <code>UntypedComponentStore</code> that is valid for the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Safety","Creates a new Ulid with the given datetime","Creates a new Ulid with the given datetime and random …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Create a Ulid from separated parts.","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a transform from a rotation.","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Create a transform from a scale.","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","Creates a Ulid from a Crockford Base32 encoded string","Create a transform from a translation.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion from a 4D vector.","Creates <code>Self</code> using data from the given <code>World</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new rotation quaternion.","Creates a new rotation quaternion.","Returns the generation of this <code>Entity</code>.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","","Get an asset, given it’s handle","Get an asset, given it’s handle","Borrow a component in the store, if it exists for the …","Gets an immutable reference to the component of <code>Entity</code>.","Get the asset provider for the given type","Gets an immutable reference to the component of <code>Entity</code>.","Gets an immutable reference to the component of <code>Entity</code>.","Get a read-only pointer to the component for the given …","Get’s the tile at the given position in the layer, …","Get the components of a certain type","Get a cell containing the resource data pointer for the …","Get a resource handle from the store.","Get a Bevy weak <code>Handle</code> from from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get the untyped component storage by the component’s UUID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","Returns a mutable reference to the wrapped value.","","Get an asset, given it’s handle","Mutably borrow a component in the store, if it exists for …","Gets a mutable reference to the component of <code>Entity</code>.","Get the asset provider for the given type","Gets a mutable reference to the component of <code>Entity</code>.","Get a mutable pointer to the component for the given <code>Entity</code>","Gets a resource handle from the store if it exists.","This is called to produce the intermediate state of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of the layer in tiles.","","","","","","","","","","","","","","","","","","","The height of the camera in in-game pixels.","<code>i32</code> vector types. ","The unique identifier for the stage.","Returns a unique identifier for the stage.","","","The unique identifier for the stage.","The tile index in the tilemap texture.","The sprite image handle.","Implements the <code>BitSet</code> trait members for your type through …","Increment the random number, make sure that the ts millis …","Returns the index of this <code>Entity</code>.","","","","","","","","","","","","","","This is the current index in the animation, with an <code>idx</code> of …","","","","","","","","","","","","","","Initialize component storage for type <code>T</code>.","Initialize a resource of type <code>T</code> by inserting it’s …","Initialize the contained systems for the given <code>world</code>.","This will be called to give the parameter a chance to …","","","","Initializes the resources required to run this system …","","","","This should be called once to initialize the system, …","Initialize the systems in the stages agains the <code>World</code>.","Insert a component into the store.","Inserts a component for the given <code>Entity</code> index. Returns …","Inserts a component for the given <code>Entity</code> index.","Returns true if the entity already had a component of this …","Insert a new resource","Insert a resource.","Insert a resource.","Insert a new stage, after another existing stage","Insert a new stage, before another existing stage","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeonsumes the <code>AtomicRefCell</code>, returning the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to the internal, untyped <code>ComponentStore</code>.","Consume <code>Resources</code> and extract the underlying …","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Checks if the <code>Entity</code> is still alive.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Test if the Ulid is nil","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","","","","","","","","","","","","","","","","","","","","","Iterate over all components in the store.","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type.","Iterates immutably over all components of this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably iterate over all components in the store.","Iterates mutably over all components of this type. Very …","Iterates mutably over all components of this type.","Iterates mutably over all components of this type.","Mutably iterate over all the components in the store that …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterate over the entities and components in the given …","Return an iterator over the provided bitset.","Iterate over all the components in the store that match …","Iterates immutably over the components of this type where …","","Iterates immutably over the components of this type where …","","","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","Iterates over entities using the provided bitset.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Create a new const <code>Key</code> parsed at compile time.","Kill an entity.","Returns entities in the killed list.","The optional sub-asset label","Get the layout of the components stored.","The memory layout of the resource","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","List of indexes into the <code>points</code> vector, for which that …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Remove the component info for dead entities.","Make a new <code>AtomicRef</code> for a component of the borrowed data.","Make a new <code>AtomicRefMut</code> for a component of the borrowed …","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion and a 3D vector, returning the …","","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion and a 3D vector, returning the …","Multiplies a quaternion by a scalar value.","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","Transforms a 4D vector.","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","","Returns the underlying type name of the system.","","The human-readable name for the stage, used for error …","A best-effort name for the system, for diagnostic purposes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>AtomicRefCell</code> containing <code>value</code>.","Safety","Create a <code>Key</code> from a string.","Create a new asset path.","Creates a new Ulid with the current time (UTC)","Create a new asset handle, from it’s path and label.","Create a new handle from it’s path and label.","Create a new <code>AtlasSprite</code> from the given atlas handle.","Create a arbitrary <code>UntypedComponentStore</code>.","Create a new tile layer","Creates a new <code>UntypedResource</code> from an instance of a Rust …","Create a new, empty stage, for the given label.","Creates a new <code>Entity</code> from the provided index and …","Create an empty <code>UntypedResources</code>.","Create an empty <code>Resources</code>.","Create a new <code>World</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Create a new <code>UntypedResource</code> from raw <code>UntypedResourceInfo</code>.","","","","","","","The ‘nil Ulid’.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Take this path, treat it as a path relative to <code>base_path</code>, …","","","","","","","","","","","","Creates a left-handed orthographic projection matrix with …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Creates a right-handed perspective projection matrix with […","Play a sound.","The list of points in the path","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","The prelude.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Transforms the given 3D vector as a point, applying …","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","List of audio events that haven’t been handled by the …","The system queue that will be run at the end of the stage","Gets the random section of this ulid","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drop the value at <code>ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Remove a component from an entity, returning the previous …","Removes the component of <code>Entity</code>. Returns <code>Some(T)</code> if the …","Remove an asset provider.","Removes the component of <code>Entity</code>.","If there is a previous value, <code>true</code> will be returned.","Remove a resource","Get a resource handle from the store.","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","The rotation of the entity.","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Execute the systems on the given <code>world</code>.","Execute the systems on the given <code>world</code>.","","Runs the system’s function using the provided <code>World</code>","This is run every time the system is executed","Run a system once, assuming any necessary initialization …","Run a system once.","The scale of the entity.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Add an event to the audio event queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the tile at the given position, to a certain entity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","The stages in the collection, in the order that they will …","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traits adding swizzle methods to all vector types. ","Convert into a <code>System</code>.","","The list of systems in the stage.","The thickness of the line.","The size of each tile in the layer.","The vector of tile slots in this layer.","Gets the timestamp section of this ulid","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","Returns the rotation axis scaled by the rotation in …","Creates a Crockford Base32 encoded string that represents …","","","","","","Creates a Crockford Base32 encoded string that represents …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","The position of the entity in the world.","","","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Attempts to immutably borrow the wrapped value, but …","Attempts to mutably borrow the wrapped value, but instead …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the asset provider for the given asset type, if it …","Get the components of a certain type","Gets a resource handle from the store if it exists.","Get the untyped component storage by the component’s UUID","Get the asset provider for the given asset type, if it …","Initialize component storage for type <code>T</code>.","Try to insert a resource.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Remove an asset provider.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a typed <code>Handle&lt;T&gt;</code> from this <code>UntypedHandle</code>.","<code>u32</code> vector types. ","","","","","","","","","","","","","","","","Convert the handle to an <code>UntypedHandle</code>.","Borrow the underlying <code>UntypedResources</code> store.","Mutably borrow the underlying <code>UntypedResources</code> store.","Unwrap all the items in an array.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>SystemStages</code> collection, initialized with a stage …","Creates a new Ulid using data from the given random number …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternion.","","","Returns the vector part of the quaternionhe handle to the sound to play.","The volume to play the sound at.","","","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector with SIMD support.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","A typed handle to an asset.","Type alias for getting the <code>AssetProviders</code> resource.","Trait implemented for asset providers that can return …","An untyped handle to an asset.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","The optional sub-asset label","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle representsdimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","An atlas image asset type, contains no data, but …","An animated sprite component.","Image asset type, contains no data, but <code>Handle&lt;Image&gt;</code> is …","A 2D sprite component","The atlas handle.","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite vertically.","Whether or not the flip the sprite vertically.","The sprite image handle.","This is the current index in the animation, with an <code>idx</code> of …","A tilemap tile component.","A tilemap layer component.","The texture atlas to use for the layer","Whether or not to flip the tile horizontally.","Whether or not to flip tile vertically.","The size of the layer in tiles.","The tile index in the tilemap texture.","The size of each tile in the layer.","The vector of tile slots in this layer.","The main transform component.","The rotation of the entity.","The scale of the entity.","The position of the entity in the world."],"i":[2,0,0,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,0,0,0,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,20,19,19,20,19,19,19,20,19,19,19,0,19,20,19,20,19,20,19,20,20,19,20,19,20,19,19,19,20,19,20,19,20,19,20,19,20,0,19,20,104,0,0,0,0,0,0,0,0,0,0,162,135,162,135,105,105,24,23,0,104,0,0,0,0,0,0,0,0,0,0,162,135,162,135,105,105,24,23,28,0,0,0,26,28,26,29,28,26,29,28,26,29,28,26,29,26,28,26,29,28,26,29,28,26,29,26,28,26,29,26,28,26,29,28,28,26,26,29,29,0,28,26,29,28,26,29,28,26,29,28,26,29,26,26,26,29,28,26,29,28,26,29,29,28,26,29,26,28,26,29,28,26,29,28,26,29,28,26,29,28,26,29,26,130,130,0,0,0,130,0,130,130,0,0,0,0,0,0,7,0,0,167,0,168,168,0,0,0,0,169,170,171,0,0,0,0,0,34,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,0,173,173,14,34,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,118,0,0,173,118,130,174,118,118,0,0,0,0,0,0,0,174,0,130,0,0,0,0,0,0,130,0,0,175,0,0,0,0,0,0,0,0,0,118,0,176,173,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,174,155,155,7,0,0,155,167,174,176,177,80,0,176,174,35,173,155,176,177,80,35,79,168,168,176,35,8,178,80,169,170,171,0,0,0,0,0,155,155,155,155,0,0,0,118,118,118,118,0,0,0,0,118,176,176,177,80,176,176,177,80,79,176,8,80,0,0,0,174,0,0,174,0,0,174,174,174,35,35,35,178,14,0,0,175,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,38,38,38,0,38,38,38,38,38,38,45,45,0,0,0,0,0,40,43,44,45,45,40,43,44,45,40,45,43,44,45,40,43,44,45,40,43,44,45,40,43,44,45,40,43,44,45,40,43,44,45,40,40,40,40,44,45,45,43,44,40,40,40,43,44,43,45,44,43,44,45,40,43,44,45,40,44,43,43,44,44,45,45,40,40,45,45,43,44,45,40,43,44,45,40,43,44,45,40,43,44,45,40,40,44,44,43,44,40,43,44,40,43,44,44,44,43,44,45,40,43,44,45,40,44,44,43,44,44,43,44,44,38,43,44,44,43,44,45,40,43,44,45,40,43,44,45,40,43,44,45,40,40,43,44,40,40,40,43,44,45,40,45,45,0,0,0,0,51,101,102,104,14,34,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,0,0,173,0,0,118,0,0,0,0,103,130,45,174,0,99,118,118,0,0,0,45,0,0,0,0,0,0,0,174,0,0,130,0,0,0,0,0,0,0,0,0,103,0,0,0,130,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,179,180,0,0,181,180,0,0,0,181,179,0,0,0,86,86,86,86,86,86,100,176,173,51,51,17,110,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,174,51,51,155,51,155,51,51,106,7,0,0,51,51,51,0,0,0,0,155,0,0,0,0,0,109,17,111,109,17,111,51,167,51,51,162,135,162,135,174,110,100,0,176,177,80,111,109,0,17,176,174,35,51,51,51,51,182,173,0,0,0,0,105,155,106,0,0,0,0,74,76,75,77,176,177,80,35,105,24,23,106,0,0,98,79,168,51,168,51,112,176,35,112,38,8,0,178,80,106,110,110,0,51,112,74,75,76,77,51,51,51,0,51,169,0,0,0,0,0,0,0,51,83,58,56,62,73,69,57,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,81,82,83,30,64,58,52,54,56,60,61,62,71,72,73,65,67,69,53,55,57,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,181,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,180,179,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,81,82,83,30,64,58,52,54,56,60,61,62,71,72,73,65,67,69,53,55,57,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,82,83,64,58,54,56,61,62,72,73,65,67,69,55,57,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,183,183,170,171,0,0,0,0,0,83,81,82,83,81,82,83,82,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,75,0,74,75,0,0,0,0,69,30,64,65,67,69,30,64,65,67,69,64,65,67,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,77,76,77,58,56,57,58,52,54,56,53,55,57,58,52,54,56,53,55,57,58,54,56,55,57,0,0,0,0,0,0,62,60,61,62,60,61,62,61,62,104,0,0,0,0,0,0,0,0,0,0,162,135,162,135,105,105,24,23,179,180,0,181,180,0,181,179,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,181,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,180,179,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,45,45,0,0,0,0,0,0,0,0,0,0,73,71,72,73,71,72,73,72,73,0,0,0,0,0,0,0,0,0,0,0,0,0,99,98,183,183,101,0,0,100,100,102,0,0,103,103,0,106,106,106,106,101,102,104,14,34,30,64,66,68,52,54,56,60,61,62,71,72,73,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,81,82,83,84,85,118,0,0,74,75,65,63,67,69,70,76,77,53,55,57,58,0,0,0,0,0,173,0,0,118,0,0,0,0,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,30,64,66,68,52,54,56,60,61,62,68,56,62,30,64,66,68,52,54,56,60,61,62,30,64,66,68,52,54,56,60,61,62,64,66,68,54,56,61,62,103,130,30,64,66,68,52,54,56,60,61,62,71,72,73,174,0,99,118,118,0,0,14,0,0,0,0,0,0,0,0,174,0,130,0,0,0,0,14,81,82,83,84,85,0,0,103,0,0,0,130,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,179,180,0,0,181,180,0,0,0,181,179,0,68,56,62,73,0,30,64,66,68,52,54,56,60,61,62,71,72,73,86,86,30,64,66,68,52,54,56,60,61,62,71,72,73,86,86,64,66,68,54,56,61,62,72,73,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,86,86,30,64,66,68,52,54,56,60,61,62,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,100,78,79,65,30,30,64,64,63,67,69,70,66,66,68,68,53,55,57,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,65,30,30,64,64,63,67,69,66,66,68,68,53,55,57,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,63,53,65,67,55,69,57,176,80,8,81,82,83,84,85,30,64,70,66,58,52,54,81,82,83,84,85,64,66,54,64,66,54,64,66,54,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,173,88,89,89,90,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,102,91,78,103,104,105,105,14,14,106,88,24,24,107,89,108,23,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,115,15,116,117,118,79,123,130,7,86,86,86,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,74,74,75,75,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,76,76,77,77,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,60,61,61,61,62,62,62,71,71,71,72,72,72,73,73,73,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,86,81,81,82,82,83,83,84,84,85,85,74,74,75,75,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,76,76,77,77,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,63,65,67,69,30,60,71,64,66,61,72,68,62,73,102,105,14,24,23,115,86,81,82,83,84,85,60,61,62,71,72,73,58,70,30,52,71,64,66,54,72,68,56,73,53,55,57,65,30,64,63,69,66,68,53,55,57,52,54,56,60,61,62,71,72,73,90,65,30,64,63,69,70,66,68,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,52,60,64,66,54,61,68,56,62,52,60,71,54,61,72,54,61,72,56,62,73,17,110,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,81,82,83,84,85,60,60,61,61,62,62,71,71,72,72,73,73,81,82,83,84,85,81,82,83,84,85,81,82,83,84,85,60,60,61,61,62,62,71,71,72,72,73,73,0,81,82,83,84,85,91,88,89,92,15,0,81,82,83,84,85,60,60,61,61,62,62,71,71,72,72,73,73,81,82,83,84,85,0,174,90,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,88,24,107,89,89,108,23,109,17,92,110,111,112,149,152,155,113,94,94,8,80,35,16,16,122,122,34,95,95,114,115,15,116,117,118,79,123,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,90,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,94,8,80,35,16,122,34,95,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,155,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,30,64,66,68,52,54,56,30,64,66,68,52,54,56,15,90,97,98,99,93,100,101,102,103,104,105,14,106,24,107,108,23,109,17,92,110,111,112,113,34,95,114,115,15,116,117,118,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,155,90,97,98,99,100,101,102,103,104,105,14,106,24,107,108,23,109,17,92,110,111,112,113,34,95,114,115,15,116,117,118,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,90,97,98,99,100,101,102,103,104,105,14,106,24,107,108,23,109,17,92,110,111,112,113,34,95,114,115,15,116,117,118,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,90,14,115,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,65,63,67,69,53,55,57,65,63,67,69,53,55,57,106,7,70,58,91,88,89,34,117,15,0,64,66,54,61,72,14,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,0,90,98,100,101,102,91,78,104,105,14,106,24,107,108,23,109,17,111,112,34,95,114,15,116,117,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,93,101,96,104,16,122,34,123,74,75,63,70,66,68,76,77,101,96,104,122,34,123,74,75,63,70,66,68,76,77,24,23,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,65,63,67,69,53,55,57,30,64,66,68,52,54,56,30,64,66,68,52,54,56,30,30,64,64,70,66,66,68,68,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,30,30,64,64,66,66,68,68,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,0,0,0,30,64,70,66,68,58,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,0,92,113,155,0,0,0,90,102,105,14,24,23,115,86,81,82,83,84,85,60,61,62,71,72,73,102,105,14,24,23,115,86,81,82,83,84,85,60,61,62,71,72,73,90,102,105,14,24,23,115,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,30,64,66,52,54,60,61,71,72,0,0,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,93,96,109,17,111,109,17,111,30,64,66,68,52,54,56,90,128,128,129,129,33,33,33,33,97,98,99,93,100,96,102,102,103,103,105,14,14,106,24,107,108,23,109,17,110,111,112,35,34,115,118,79,130,130,86,81,81,82,82,83,83,84,84,85,85,74,74,75,75,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,76,76,77,77,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,92,30,64,66,68,52,54,56,90,90,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,14,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,65,65,30,30,30,64,64,64,64,64,63,67,67,67,69,69,70,66,66,66,66,66,66,66,68,68,68,68,68,68,68,68,68,68,68,76,77,53,55,55,57,57,58,52,52,52,54,54,54,54,56,56,56,56,56,56,56,56,60,60,60,61,61,61,61,62,62,62,62,62,62,62,71,71,71,72,72,72,72,73,73,73,73,73,73,73,70,58,74,65,30,63,67,76,53,55,52,74,76,30,64,70,66,68,58,52,54,56,60,61,62,71,72,73,75,65,67,69,70,77,55,57,58,74,75,65,63,67,69,76,77,53,55,57,74,75,65,63,67,69,76,77,53,55,57,74,75,65,63,67,69,76,77,53,55,57,74,75,65,63,67,69,76,77,53,55,57,91,91,95,14,14,65,63,67,69,53,55,57,65,67,69,70,55,57,58,74,65,67,76,55,74,76,74,75,63,69,70,76,77,53,57,58,75,77,74,63,69,70,75,65,67,70,77,55,58,14,75,65,67,69,77,55,57,81,82,83,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,112,70,58,70,58,70,58,75,69,77,57,75,65,67,69,70,77,55,57,58,75,65,67,69,70,77,55,57,58,75,65,67,69,70,77,55,57,58,112,74,75,65,67,69,76,77,55,57,63,53,74,65,67,76,55,75,69,77,57,70,58,30,64,70,66,68,58,52,54,56,60,61,62,71,72,73,14,14,112,74,75,65,67,69,76,77,55,57,70,58,167,90,90,98,98,100,100,101,101,102,102,91,91,78,78,104,104,105,105,14,14,106,106,24,24,107,107,108,108,23,23,109,109,17,17,111,111,112,112,34,34,95,95,114,114,15,15,116,116,117,117,79,79,7,7,86,86,81,81,82,82,83,83,84,84,85,85,74,74,75,75,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,76,76,77,77,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,70,58,115,162,135,135,136,137,138,91,78,88,89,92,110,114,116,117,24,23,24,114,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,102,105,14,24,23,115,86,81,82,83,84,85,60,61,62,71,72,73,138,89,92,162,135,90,135,137,138,91,78,89,92,7,174,88,89,16,122,123,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,110,102,105,14,24,23,115,86,81,82,83,84,85,60,61,62,71,72,73,100,0,176,177,80,118,80,111,109,0,14,115,30,64,66,68,52,54,56,60,61,62,71,72,73,17,30,64,66,68,52,54,56,60,61,62,71,72,73,114,7,176,174,88,89,80,35,16,122,123,35,8,138,91,89,92,116,117,7,8,8,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,86,81,81,82,82,83,83,84,84,85,85,74,74,75,75,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,76,76,77,77,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,90,128,129,33,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,152,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,105,112,90,150,147,151,148,149,152,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,91,117,74,75,65,63,67,69,70,76,77,53,55,57,58,15,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,30,64,66,68,52,54,56,70,58,30,64,66,68,52,54,56,60,61,62,14,30,64,70,66,68,58,52,54,56,65,30,64,63,69,70,68,53,55,57,58,52,54,56,60,61,62,71,72,73,138,91,88,89,92,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,138,91,89,92,138,91,89,92,15,173,138,91,88,88,89,89,89,92,15,0,0,0,0,15,15,105,92,155,30,64,70,66,68,58,52,54,56,30,64,70,66,68,58,52,54,56,30,64,70,66,68,58,52,54,56,30,64,70,66,68,58,52,54,56,106,75,69,77,57,75,69,77,57,75,69,77,57,75,69,77,57,7,93,96,0,0,0,0,74,76,75,77,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,60,61,62,71,72,73,74,74,74,75,75,65,65,65,65,65,30,30,64,64,63,63,63,67,67,67,67,67,69,69,69,69,70,70,70,70,66,66,68,68,76,76,77,77,53,53,53,55,55,55,55,57,57,57,57,58,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,30,64,66,68,52,54,56,65,65,30,30,64,64,63,63,67,67,69,69,70,66,66,68,68,53,53,55,55,57,57,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,63,53,65,67,55,69,57,70,58,65,63,67,69,53,55,57,63,53,65,67,70,55,58,65,67,70,69,57,176,177,80,35,118,80,35,81,82,83,74,75,65,30,64,63,67,69,66,68,76,77,53,55,57,52,54,56,60,61,62,71,72,73,65,30,64,63,67,69,70,66,68,53,55,57,58,52,54,56,60,61,62,90,138,102,105,14,24,23,17,92,110,113,80,115,116,117,7,81,82,83,84,85,30,64,66,68,52,54,56,60,61,62,71,72,73,113,150,147,151,148,149,152,14,30,64,70,66,68,58,52,54,56,30,64,66,68,52,54,56,105,81,82,83,84,85,60,61,62,71,72,73,69,57,69,57,69,57,90,14,115,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,105,24,23,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,52,60,30,52,60,69,57,69,57,69,57,69,57,69,57,69,57,69,57,98,106,30,64,66,68,52,54,56,0,74,75,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,76,77,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,30,64,66,68,52,54,56,30,64,66,68,52,54,56,69,57,103,130,0,98,79,14,168,90,97,98,99,100,101,102,103,104,105,14,106,24,107,108,23,109,17,92,110,111,112,113,34,95,114,115,15,116,117,118,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,168,90,97,98,99,100,101,102,103,104,105,14,106,24,107,108,23,109,17,92,110,111,112,113,34,95,114,115,15,116,117,118,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,81,82,83,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,30,64,66,68,52,54,56,30,30,64,64,66,66,68,68,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,30,30,64,64,66,66,68,68,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,138,91,78,89,92,116,7,30,52,60,112,30,64,66,68,52,54,56,65,63,67,69,53,55,57,176,8,80,35,35,7,7,112,30,64,66,68,52,54,56,60,61,62,71,72,73,98,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,110,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,30,64,66,68,52,54,56,60,61,62,70,58,81,82,83,84,85,30,64,66,68,52,54,56,60,61,62,71,72,73,8,65,30,30,64,64,63,67,69,70,66,66,68,68,53,55,57,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,65,30,30,64,64,63,67,69,66,66,68,68,53,55,57,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,63,53,65,67,55,69,57,65,65,30,30,64,64,63,63,67,67,69,69,70,70,66,66,68,68,53,53,55,55,57,57,58,58,52,52,54,54,56,56,60,60,61,61,62,62,71,71,72,72,73,73,0,178,35,80,106,110,110,14,30,64,70,66,68,58,52,54,56,60,61,62,71,72,73,70,58,74,75,65,63,67,69,76,77,53,55,57,74,75,65,63,67,69,76,77,53,55,57,70,58,90,97,98,99,100,101,102,103,104,105,14,106,24,107,108,23,109,17,92,110,111,112,113,34,95,114,115,15,116,117,118,79,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,75,69,77,57,70,58,14,128,129,33,102,103,14,14,130,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,74,65,67,76,55,75,69,77,57,75,69,74,65,67,76,55,75,69,77,57,75,69,112,74,75,76,77,65,63,67,69,53,55,57,64,66,68,54,56,61,62,72,73,90,90,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,78,114,117,114,78,114,117,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,30,64,66,68,52,54,56,78,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,23,0,97,98,100,101,104,106,107,108,109,17,110,111,112,15,79,24,117,117,169,0,0,0,0,0,0,0,90,150,128,129,147,33,151,148,136,137,97,98,99,93,138,100,101,96,102,91,78,103,104,105,14,106,88,24,107,89,108,23,109,17,92,110,111,112,149,152,155,113,94,8,80,35,16,122,34,95,114,115,15,116,117,118,79,123,130,7,86,81,82,83,84,85,74,75,65,30,64,63,67,69,70,66,68,76,77,53,55,57,58,52,54,56,60,61,62,71,72,73,83,58,56,62,73,69,57,8,14,74,75,65,63,67,69,76,77,53,55,57,30,64,70,66,68,58,52,54,56,60,61,62,71,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,81,82,83,30,64,58,52,54,56,60,61,62,71,72,73,65,67,69,53,55,57,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,181,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,180,179,64,70,66,68,58,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,81,82,83,30,64,58,52,54,56,60,61,62,71,72,73,65,67,69,53,55,57,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,180,68,56,62,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,181,179,180,30,64,66,68,52,54,56,60,61,62,71,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,82,83,64,58,54,56,61,62,72,73,65,67,69,55,57,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,180,68,56,62,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,179,180,64,66,68,54,56,61,62,72,73,183,183,170,171,0,0,0,0,0,83,81,82,83,81,82,83,82,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,75,0,74,75,0,0,0,0,69,30,64,65,67,69,30,64,65,67,69,64,65,67,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,77,76,77,58,56,57,58,52,54,56,53,55,57,58,52,54,56,53,55,57,58,54,56,55,57,0,0,0,0,0,0,62,60,61,62,60,61,62,61,62,104,0,0,0,0,0,0,0,0,0,0,162,135,162,135,105,105,24,23,179,180,0,181,180,0,181,179,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,181,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,180,179,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,181,179,180,180,180,180,180,180,181,179,180,180,181,179,180,181,179,180,179,180,181,179,180,180,181,179,180,181,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,180,180,180,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,179,180,180,179,180,179,180,179,180,0,0,0,0,0,0,73,71,72,73,71,72,73,72,73,0,0,0,0,17,109,17,109,17,109,17,0,0,110,111,111,110,111,110,110,0,112,112,112],"f":[0,0,0,[[],1],[[],1],0,[[]],[[]],0,[2,2],[[]],[[],[[5,[3,4]]]],[[],2],[2],[2],[[]],[6],[7],[8],[[]],[[[5,[4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],0,[[11,11]],[11],[[]],[[],12],[[],12],[[],13],[[],14],[[]],0,0,[[[16,[15]],[16,[2]],[18,[17]],[18,[19]]]],0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],0,[[],19],[[19,21],22],[[20,21],22],0,0,[[]],[[]],[7],[6],0,[8],[[]],[[]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],0,[[11,11]],[[11,11]],[11],[11],0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],14],[[],14],[[[16,[15]],[18,[20]],[18,[19]]]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[23,11],[24,25],[23,11],[24,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,11],[24,25],[23,11],[24,25],0,0,0,0,0,0,0,0,[[26,27]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],0,[28,28],[26,26],[29,29],[[]],[[]],[[]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],0,[[],28],[[],26],[[],29],[[26,21],22],[[]],[[]],[[]],[7],[6],[6],[7],[7],[6],[8],[[]],[[]],[[]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],0,0,[[27,30,27],26],0,[[11,11]],[[11,11]],[[11,11]],[11],[11],[11],[[29,27]],[[]],[[]],[[]],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[27,27,30,27],26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,[7],0,[[11,11]],[11],0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,[[],31],[[]],[[]],[[],31],[[32,31]],[[],32],[[],31],[[],31],[32],[[],33],[31],[[],32],[[]],[[],31],[[]],[[]],[32],[32],[[],31],[[],31],[32,31],[[]],0,0,[[],34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[34],[[[10,[34]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35],[34],[[],31],[[]],[[]],[[],31],[[32,31]],[[],32],[[],31],[[],31],[32],[[],33],[31],[[],32],[[]],[[],31],[[]],[[]],[32],[32],[[],31],[[],31],[32,31],[[]],0,0,[[]],0,0,0,[[],34],[[]],0,[7],[7],[[],14],[[],14],0,0,[7],[7],0,[[[10,[34]]]],0,[[],36],[[],36],0,0,0,[[11,11]],[11],[7,[[12,[37]]]],0,0,[[],35],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35],[[],14],[[],14],0,[7],[[],36],[[],36],0,0,[7,[[12,[37]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[7],[7],0,0,0,[[],35],0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[]],[38,38],[[]],[[],[[5,[3,4]]]],[[],38],[[38,21],[[12,[39]]]],[[]],[6],[7],[[]],[[[5,[4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],0,[[11,11]],[11],0,0,[[]],[[],12],[[],12],[[],13],[[],14],[[]],0,0,0,0,0,0,0,[[40,41]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[45,45],[40,40],[[]],[[]],[[]],[[]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],43],[[],44],[[],45],[[],40],[40,41],[40,27],[40,46],[44,41],[42,31],[47],[43,41],[44,41],[40,41],[40,27],[40,46],[43,27],[44,27],[43,46],[[45,45],31],[44,31],[[43,21],[[12,[39]]]],[[44,21],[[12,[39]]]],[[45,21],[[12,[39]]]],[[40,21],[[12,[39]]]],[[]],[[]],[[]],[[]],[[27,45],44],[6],[7],[7],[6],[7],[6],[6],[7],[[],48],[45],[[]],[[]],[[]],[[]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[40,31],[44,31],[44,45],[[],43],[[41,45],44],[49,40],[43],[44],[40],[43,31],[44,31],[44,27],[44,27],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[11],[11],[11],[11],[44,41],[44,27],[43],[44],[[44,41]],[[43,41]],[[44,41]],[[44,45]],0,[[43,41],43],[[44,41],44],[44,50],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],14],[43],[44],[40],[40],[[40,49]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35],[34],[[],1],[[],1],0,0,[[],31],[[]],[[]],[[],31],[[32,31]],[[],32],[[],31],[[],31],[32],[[],33],[31],[[],32],[[]],[[],31],[[]],[[]],[32],[32],[[],31],[[],31],[32,31],[[]],0,0,0,[[]],[[]],[[]],0,[51,51],0,[[]],[[],[[5,[3,4]]]],0,0,[[],34],[[]],[[],51],[51],[51],[[52,52],53],[[54,54,54],55],[[56,56,56,56],57],[[46,46,46,46],58],0,[[46,46],52],[[46,46,46],54],[[46,46,46,46],56],0,0,0,0,0,0,0,0,[[]],[7],[6],[7],[23,11],[24,25],[23,11],[24,25],[7],0,0,0,[[],14],[[],14],0,0,0,0,0,[7],[7],0,[[]],[[[5,[4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],[[]],[[[10,[34]]]],[[59,59],60],[[59,59,59],61],[[59,59,59,59],62],0,0,0,0,[[30,30],63],[[64,64,64],65],[[66,66,66],67],[[68,68,68,68],69],0,0,0,0,[[],36],[[],36],0,0,0,0,0,0,0,[[27,27,27,27],70],0,0,[[11,11]],[[11,11]],[11],[11],0,[7,[[12,[37]]]],0,0,0,0,0,[[],35],0,0,0,0,0,[[]],0,0,0,0,0,[[],12],[[],12],[[],13],0,[[],14],[[]],[[50,50],71],[[50,50,50],72],[[50,50,50,50],73],[[27,27],30],[[27,27,27],64],[[27,27,27],66],[[27,27,27,27],68],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[30,30],63],[[64,64,64],65],[[66,66,66],67],[[68,68,68,68],69],0,0,[[27,27,27,27],70],0,0,[[27,27],30],[[27,27,27],64],[[27,27,27],66],[[27,27,27,27],68],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[52,52],53],[[54,54,54],55],[[56,56,56,56],57],[[46,46,46,46],58],[[46,46],52],[[46,46,46],54],[[46,46,46,46],56],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[59,59],60],[[59,59,59],61],[[59,59,59,59],62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,11],[24,25],[23,11],[24,25],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[50,50],71],[[50,50,50],72],[[50,50,50,50],73],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[60,60],[61,61],[62,62],[[74,74,27],31],[[75,75,27],31],[[65,65,27],31],[[30,30,27],31],[[64,64,27],31],[[63,63,27],31],[[67,67,27],31],[[69,69,27],31],[[70,70,27],31],[[66,66,27],31],[[68,68,27],31],[[76,76,46],31],[[77,77,46],31],[[53,53,46],31],[[55,55,46],31],[[57,57,46],31],[[58,58,46],31],[[52,52,46],31],[[54,54,46],31],[[56,56,46],31],0,[78],[79],[[65,65]],[[30,27],30],[[30,30],30],[[64,27],64],[[64,64],64],[[63,63]],[[67,67]],[[69,69]],[[70,70],70],[[66,27],66],[[66,66],66],[[68,68],68],[[68,27],68],[[53,53]],[[55,55]],[[57,57]],[[58,58],58],[[52,52],52],[[52,46],52],[[54,54],54],[[54,46],54],[[56,56],56],[[56,46],56],[[60,59],60],[[60,60],60],[[61,59],61],[[61,61],61],[[62,62],62],[[62,59],62],[[71,50],71],[[71,71],71],[[72,50],72],[[72,72],72],[[73,50],73],[[73,73],73],[[65,65]],[[30,30]],[[30,27]],[[64,64]],[[64,27]],[[63,63]],[[67,67]],[[69,69]],[[66,66]],[[66,27]],[[68,27]],[[68,68]],[[53,53]],[[55,55]],[[57,57]],[[52,52]],[[52,46]],[[54,46]],[[54,54]],[[56,46]],[[56,56]],[[60,59]],[[60,60]],[[61,61]],[[61,59]],[[62,62]],[[62,59]],[[71,50]],[[71,71]],[[72,72]],[[72,50]],[[73,73]],[[73,50]],[[63,63],63],[[53,53],53],[[65,65],65],[[67,67],67],[[55,55],55],[[69,69],69],[[57,57],57],[35],[[80,35]],[8,8],[81,31],[82,31],[83,31],[84,31],[85,31],[[30,30],27],[[64,64],27],[[70,70],27],[[66,66],27],[[58,58],46],[[52,52],46],[[54,54],46],[81,31],[82,31],[83,31],[84,31],[85,31],[64,64],[66,66],[54,54],[64],[66],[54],[64,64],[66,66],[54,54],[[86,87]],[[81,87]],[[82,87]],[[83,87]],[[84,87]],[[85,87]],[[74,87]],[[75,87]],[[65,87]],[[30,87]],[[64,87]],[[63,87]],[[67,87]],[[69,87]],[[70,87]],[[66,87]],[[68,87]],[[76,87]],[[77,87]],[[53,87]],[[55,87]],[[57,87]],[[58,87]],[[52,87]],[[54,87]],[[56,87]],[[60,87]],[[61,87]],[[62,87]],[[71,87]],[[72,87]],[[73,87]],[34],[[88,34]],[[89,34]],[[89,34]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[86,1],[[],1],[[],1],[[],1],[81,1],[[],1],[82,1],[[],1],[[],1],[83,1],[[],1],[84,1],[[],1],[[],1],[[],1],[85,1],[[],1],[74,1],[[],1],[[],1],[75,1],[65,1],[[],1],[30,1],[[],1],[64,1],[[],1],[[],1],[63,1],[[],1],[67,1],[69,1],[[],1],[70,1],[[],1],[66,1],[[],1],[68,1],[[],1],[[],1],[76,1],[77,1],[[],1],[[],1],[53,1],[[],1],[55,1],[57,1],[[],1],[[],1],[58,1],[[],1],[52,1],[[],1],[54,1],[56,1],[[],1],[[],1],[60,1],[[],1],[[],1],[[],1],[61,1],[62,1],[[],1],[[],1],[71,1],[[],1],[[],1],[[],1],[[],1],[72,1],[73,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[86,1],[81,1],[[],1],[[],1],[82,1],[[],1],[83,1],[84,1],[[],1],[85,1],[[],1],[[],1],[74,1],[75,1],[[],1],[[],1],[65,1],[30,1],[[],1],[64,1],[[],1],[[],1],[63,1],[[],1],[67,1],[69,1],[[],1],[70,1],[[],1],[66,1],[[],1],[[],1],[68,1],[[],1],[76,1],[77,1],[[],1],[[],1],[53,1],[[],1],[55,1],[57,1],[[],1],[[],1],[58,1],[52,1],[[],1],[[],1],[54,1],[[],1],[56,1],[[],1],[60,1],[[],1],[61,1],[[],1],[62,1],[71,1],[[],1],[[],1],[72,1],[73,1],[[],1],[63,53],[65,55],[67,55],[69,57],[30,52],[60,52],[71,52],[64,54],[66,54],[61,54],[72,54],[68,56],[62,56],[73,56],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[58,70],[70,58],[30,60],[52,60],[71,60],[64,61],[66,61],[54,61],[72,61],[68,62],[56,62],[73,62],[53,63],[55,65],[57,69],[65],[30],[64],[63],[69],[66],[68],[53],[55],[57],[52],[54],[56],[60],[61],[62],[71],[72],[73],[90],[65],[30],[64],[63],[69],[70],[66],[68],[53],[55],[57],[58],[52],[54],[56],[60],[61],[62],[71],[72],[73],[86,87],[81,87],[82,87],[83,87],[84,87],[85,87],[74,87],[75,87],[65,87],[30,87],[64,87],[63,87],[67,87],[69,87],[70,87],[66,87],[68,87],[76,87],[77,87],[53,87],[55,87],[57,87],[58,87],[52,87],[54,87],[56,87],[60,87],[61,87],[62,87],[71,87],[72,87],[73,87],[86,87],[81,87],[82,87],[83,87],[84,87],[85,87],[74,87],[75,87],[65,87],[30,87],[64,87],[63,87],[67,87],[69,87],[70,87],[66,87],[68,87],[76,87],[77,87],[53,87],[55,87],[57,87],[58,87],[52,87],[54,87],[56,87],[60,87],[61,87],[62,87],[71,87],[72,87],[73,87],[30,71],[52,71],[60,71],[64,72],[66,72],[54,72],[61,72],[68,73],[56,73],[62,73],[52,30],[60,30],[71,30],[54,64],[61,64],[72,64],[54,66],[61,66],[72,66],[56,68],[62,68],[73,68],0,0,[[],31],[[]],[[]],[[],31],[[32,31]],[[],32],[[],31],[[],31],[32],[[],33],[31],[[],32],[[]],[[],31],[[]],[[]],[32],[32],[[],31],[[],31],[32,31],[[]],[[81,81],81],[[82,82],82],[[83,83],83],[[84,84],84],[[85,85],85],[[60,60]],[[60,59]],[[61,61]],[[61,59]],[[62,59]],[[62,62]],[[71,50]],[[71,71]],[[72,72]],[[72,50]],[[73,73]],[[73,50]],[[81,81]],[[82,82]],[[83,83]],[[84,84]],[[85,85]],[81,50],[82,50],[83,50],[84,50],[85,50],[[81,81],81],[[82,82],82],[[83,83],83],[[84,84],84],[[85,85],85],[[60,59]],[[60,60]],[[61,59]],[[61,61]],[[62,59]],[[62,62]],[[71,50]],[[71,71]],[[72,72]],[[72,50]],[[73,50]],[[73,73]],0,[[81,81]],[[82,82]],[[83,83]],[[84,84]],[[85,85]],[91,34],[88,34],[89,34],[92,34],[15,34],0,[[81,81],81],[[82,82],82],[[83,83],83],[[84,84],84],[[85,85],85],[[60,60]],[[60,59]],[[61,61]],[[61,59]],[[62,59]],[[62,62]],[[71,71]],[[71,50]],[[72,72]],[[72,50]],[[73,50]],[[73,73]],[[81,81]],[[82,82]],[[83,83]],[[84,84]],[[85,85]],0,[[]],[90,93],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,93],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[95,88],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[90,96],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,96],[[]],[[]],[[]],[[]],[[]],[[]],[95,89],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],0,[[30,30,30],30],[[64,64,64],64],[[66,66,66],66],[[68,68,68],68],[[52,52,52],52],[[54,54,54],54],[[56,56,56],56],[[60,60,60],60],[[61,61,61],61],[[62,62,62],62],[[71,71,71],71],[[72,72,72],72],[[73,73,73],73],[[30,27,27],30],[[64,27,27],64],[[66,27,27],66],[[68,27,27],68],[[52,46,46],52],[[54,46,46],54],[[56,46,46],56],[[30,27],30],[[64,27],64],[[66,27],66],[[68,27],68],[[52,46],52],[[54,46],54],[[56,46],56],[[30,27],30],[[64,27],64],[[66,27],66],[[68,27],68],[[52,46],52],[[54,46],54],[[56,46],56],[15],[90,90],[97,97],[98,98],[99,99],[93,93],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[14,14],[106,106],[24,24],[107,107],[108,108],[23,23],[109,109],[17,17],[92,92],[110,110],[111,111],[112,112],[113,113],[34,34],[95,95],[114,114],[115,115],[15,15],[116,116],[117,117],[118,118],[79,79],[7,7],[86,86],[81,81],[82,82],[83,83],[84,84],[85,85],[74,74],[75,75],[65,65],[30,30],[64,64],[63,63],[67,67],[69,69],[70,70],[66,66],[68,68],[76,76],[77,77],[53,53],[55,55],[57,57],[58,58],[52,52],[54,54],[56,56],[60,60],[61,61],[62,62],[71,71],[72,72],[73,73],[81,119],[82,119],[83,119],[74,119],[75,119],[65,119],[30,119],[64,119],[63,119],[67,119],[69,119],[66,119],[68,119],[76,119],[77,119],[53,119],[55,119],[57,119],[52,119],[54,119],[56,119],[60,119],[61,119],[62,119],[71,119],[72,119],[73,119],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[[],[[5,[3,4]]]],[86,[[5,[87,4]]]],[81,[[5,[87,4]]]],[82,[[5,[87,4]]]],[83,[[5,[87,4]]]],[84,[[5,[87,4]]]],[85,[[5,[87,4]]]],[74,[[5,[87,4]]]],[75,[[5,[87,4]]]],[65,[[5,[87,4]]]],[30,[[5,[87,4]]]],[64,[[5,[87,4]]]],[63,[[5,[87,4]]]],[67,[[5,[87,4]]]],[69,[[5,[87,4]]]],[70,[[5,[87,4]]]],[66,[[5,[87,4]]]],[68,[[5,[87,4]]]],[76,[[5,[87,4]]]],[77,[[5,[87,4]]]],[53,[[5,[87,4]]]],[55,[[5,[87,4]]]],[57,[[5,[87,4]]]],[58,[[5,[87,4]]]],[52,[[5,[87,4]]]],[54,[[5,[87,4]]]],[56,[[5,[87,4]]]],[60,[[5,[87,4]]]],[61,[[5,[87,4]]]],[62,[[5,[87,4]]]],[71,[[5,[87,4]]]],[72,[[5,[87,4]]]],[73,[[5,[87,4]]]],[[90,90],120],[[14,14],120],[[115,115],120],[[30,30],81],[[64,64],82],[[66,66],84],[[68,68],85],[[52,52],81],[[54,54],82],[[56,56],83],[[60,60],81],[[61,61],82],[[62,62],83],[[71,71],81],[[72,72],82],[[73,73],83],[[30,30],81],[[64,64],82],[[66,66],84],[[68,68],85],[[52,52],81],[[54,54],82],[[56,56],83],[[60,60],81],[[61,61],82],[[62,62],83],[[71,71],81],[[72,72],82],[[73,73],83],[[30,30],81],[[64,64],82],[[66,66],84],[[68,68],85],[[52,52],81],[[54,54],82],[[56,56],83],[[60,60],81],[[61,61],82],[[62,62],83],[[71,71],81],[[72,72],82],[[73,73],83],[[30,30],81],[[64,64],82],[[66,66],84],[[68,68],85],[[52,52],81],[[54,54],82],[[56,56],83],[[60,60],81],[[61,61],82],[[62,62],83],[[71,71],81],[[72,72],82],[[73,73],83],[[30,30],81],[[64,64],82],[[66,66],84],[[68,68],85],[[52,52],81],[[54,54],82],[[56,56],83],[[60,60],81],[[61,61],82],[[62,62],83],[[71,71],81],[[72,72],82],[[73,73],83],[[30,30],81],[[64,64],82],[[66,66],84],[[68,68],85],[[52,52],81],[[54,54],82],[[56,56],83],[[60,60],81],[[61,61],82],[[62,62],83],[[71,71],81],[[72,72],82],[[73,73],83],[[65,32],64],[[63,32],30],[[67,32],66],[[69,32],68],[[53,32],52],[[55,32],54],[[57,32],56],[[65,32],64],[[63,32],30],[[67,32],66],[[69,32],68],[[53,32],52],[[55,32],54],[[57,32],56],0,0,[70,70],[58,58],[[91,115],31],[[88,115],31],[[89,115],31],[[34,115],31],[117,31],[15,115],[[],34],[[64,64],64],[[66,66],66],[[54,54],54],[[61,61],61],[[72,72],72],[14,121],[[86,21],[[12,[39]]]],[[81,21],[[12,[39]]]],[[82,21],[[12,[39]]]],[[83,21],[[12,[39]]]],[[84,21],[[12,[39]]]],[[85,21],[[12,[39]]]],[[74,21],[[12,[39]]]],[[75,21],[[12,[39]]]],[[65,21],[[12,[39]]]],[[30,21],[[12,[39]]]],[[64,21],[[12,[39]]]],[[63,21],[[12,[39]]]],[[67,21],[[12,[39]]]],[[69,21],[[12,[39]]]],[[70,21],[[12,[39]]]],[[66,21],[[12,[39]]]],[[68,21],[[12,[39]]]],[[76,21],[[12,[39]]]],[[77,21],[[12,[39]]]],[[53,21],[[12,[39]]]],[[55,21],[[12,[39]]]],[[57,21],[[12,[39]]]],[[58,21],[[12,[39]]]],[[52,21],[[12,[39]]]],[[54,21],[[12,[39]]]],[[56,21],[[12,[39]]]],[[60,21],[[12,[39]]]],[[61,21],[[12,[39]]]],[[62,21],[[12,[39]]]],[[71,21],[[12,[39]]]],[[72,21],[[12,[39]]]],[[73,21],[[12,[39]]]],[[]],[[],90],[[],98],[[],100],[[],101],[[],102],[[],91],[[],78],[[],104],[[],105],[[],14],[[],106],[[],24],[[],107],[[],108],[[],23],[[],109],[[],17],[[],111],[[],112],[[],34],[[],95],[[],114],[[],15],[[],116],[[],117],[[],79],[[],7],[[],86],[[],81],[[],82],[[],83],[[],84],[[],85],[[],74],[[],75],[[],65],[[],30],[[],64],[[],63],[[],67],[[],69],[[],70],[[],66],[[],68],[[],76],[[],77],[[],53],[[],55],[[],57],[[],58],[[],52],[[],54],[[],56],[[],60],[[],61],[[],62],[[],71],[[],72],[[],73],[93],[101],[96],[104],[16],[122],[34],[123],[74],[75],[63],[70],[66],[68],[76],[77],[101],[96],[104],[122],[34],[123],[74],[75],[63],[70],[66],[68],[76],[77],[[],[[12,[24]]]],[[],[[12,[23]]]],[[],[[12,[86]]]],[[],[[12,[81]]]],[[],[[12,[82]]]],[[],[[12,[83]]]],[[],[[12,[84]]]],[[],[[12,[85]]]],[[],[[12,[74]]]],[[],[[12,[75]]]],[[],[[12,[65]]]],[[],[[12,[30]]]],[[],[[12,[64]]]],[[],[[12,[63]]]],[[],[[12,[67]]]],[[],[[12,[69]]]],[[],[[12,[70]]]],[[],[[12,[66]]]],[[],[[12,[68]]]],[[],[[12,[76]]]],[[],[[12,[77]]]],[[],[[12,[53]]]],[[],[[12,[55]]]],[[],[[12,[57]]]],[[],[[12,[58]]]],[[],[[12,[52]]]],[[],[[12,[54]]]],[[],[[12,[56]]]],[[],[[12,[60]]]],[[],[[12,[61]]]],[[],[[12,[62]]]],[[],[[12,[71]]]],[[],[[12,[72]]]],[[],[[12,[73]]]],[65,27],[63,27],[67,27],[69,27],[53,46],[55,46],[57,46],[[30,30],27],[[64,64],27],[[66,66],27],[[68,68],27],[[52,52],46],[[54,54],46],[[56,56],46],[[30,30],27],[[64,64],27],[[66,66],27],[[68,68],27],[[52,52],46],[[54,54],46],[[56,56],46],[[30,27],30],[[30,30],30],[[64,64],64],[[64,27],64],[[70,27],70],[[66,66],66],[[66,27],66],[[68,68],68],[[68,27],68],[[58,46],58],[[52,46],52],[[52,52],52],[[54,46],54],[[54,54],54],[[56,46],56],[[56,56],56],[[60,59],60],[[60,60],60],[[61,59],61],[[61,61],61],[[62,59],62],[[62,62],62],[[71,71],71],[[71,50],71],[[72,50],72],[[72,72],72],[[73,50],73],[[73,73],73],[[30,27]],[[30,30]],[[64,27]],[[64,64]],[[66,27]],[[66,66]],[[68,68]],[[68,27]],[[52,52]],[[52,46]],[[54,46]],[[54,54]],[[56,46]],[[56,56]],[[60,59]],[[60,60]],[[61,59]],[[61,61]],[[62,59]],[[62,62]],[[71,71]],[[71,50]],[[72,72]],[[72,50]],[[73,73]],[[73,50]],[[52,52],53],[[54,54,54],55],[[56,56,56,56],57],[[30,30],27],[[64,64],27],[[70,70],27],[[66,66],27],[[68,68],27],[[58,58],46],[[52,52],46],[[54,54],46],[[56,56],46],[[60,60],59],[[61,61],59],[[62,62],59],[[71,71],50],[[72,72],50],[[73,73],50],[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[60,60],60],[[61,61],61],[[62,62],62],[[71,71],71],[[72,72],72],[[73,73],73],[[46,46,46,46],58],[92],[113],0,[[46,46],52],[[46,46,46],54],[[46,46,46,46],56],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[42,31],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[47],[[90,90],31],[[102,102],31],[[105,105],31],[[14,14],31],[[24,24],31],[[23,23],31],[[115,115],31],[[86,86],31],[[81,81],31],[[82,82],31],[[83,83],31],[[84,84],31],[[85,85],31],[[74,74],31],[[75,75],31],[[65,65],31],[[30,30],31],[[64,64],31],[[63,63],31],[[67,67],31],[[69,69],31],[[70,70],31],[[66,66],31],[[68,68],31],[[76,76],31],[[77,77],31],[[53,53],31],[[55,55],31],[[57,57],31],[[58,58],31],[[52,52],31],[[54,54],31],[[56,56],31],[[60,60],31],[[61,61],31],[[62,62],31],[[71,71],31],[[72,72],31],[[73,73],31],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[124,[[12,[125,126]]]],[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[[30,27],64],[[64,27],68],[[66,27],68],[[52,46],54],[[54,46],56],[[60,59],61],[[61,59],62],[[71,50],72],[[72,50],73],0,0,[[81,127],[[25,[87]]]],[[82,127],[[25,[87]]]],[[83,127],[[25,[87]]]],[[74,127],[[25,[87]]]],[[75,127],[[25,[87]]]],[[65,127],[[25,[87]]]],[[30,127],[[25,[87]]]],[[64,127],[[25,[87]]]],[[63,127],[[25,[87]]]],[[67,127],[[25,[87]]]],[[69,127],[[25,[87]]]],[[66,127],[[25,[87]]]],[[68,127],[[25,[87]]]],[[76,127],[[25,[87]]]],[[77,127],[[25,[87]]]],[[53,127],[[25,[87]]]],[[55,127],[[25,[87]]]],[[57,127],[[25,[87]]]],[[52,127],[[25,[87]]]],[[54,127],[[25,[87]]]],[[56,127],[[25,[87]]]],[[60,127],[[25,[87]]]],[[61,127],[[25,[87]]]],[[62,127],[[25,[87]]]],[[71,127],[[25,[87]]]],[[72,127],[[25,[87]]]],[[73,127],[[25,[87]]]],[[81,32],[[25,[87]]]],[[82,32],[[25,[87]]]],[[83,32],[[25,[87]]]],[[74,32],[[25,[87]]]],[[75,32],[[25,[87]]]],[[65,32],[[25,[87]]]],[[30,32],[[25,[87]]]],[[64,32],[[25,[87]]]],[[63,32],[[25,[87]]]],[[67,32],[[25,[87]]]],[[69,32],[[25,[87]]]],[[66,32],[[25,[87]]]],[[68,32],[[25,[87]]]],[[76,32],[[25,[87]]]],[[77,32],[[25,[87]]]],[[53,32],[[25,[87]]]],[[55,32],[[25,[87]]]],[[57,32],[[25,[87]]]],[[52,32],[[25,[87]]]],[[54,32],[[25,[87]]]],[[56,32],[[25,[87]]]],[[60,32],[[25,[87]]]],[[61,32],[[25,[87]]]],[[62,32],[[25,[87]]]],[[71,32],[[25,[87]]]],[[72,32],[[25,[87]]]],[[73,32],[[25,[87]]]],[[81,32],[[25,[87]]]],[[82,32],[[25,[87]]]],[[83,32],[[25,[87]]]],[[74,32],[[25,[87]]]],[[75,32],[[25,[87]]]],[[65,32],[[25,[87]]]],[[30,32],[[25,[87]]]],[[64,32],[[25,[87]]]],[[63,32],[[25,[87]]]],[[67,32],[[25,[87]]]],[[69,32],[[25,[87]]]],[[66,32],[[25,[87]]]],[[68,32],[[25,[87]]]],[[76,32],[[25,[87]]]],[[77,32],[[25,[87]]]],[[53,32],[[25,[87]]]],[[55,32],[[25,[87]]]],[[57,32],[[25,[87]]]],[[52,32],[[25,[87]]]],[[54,32],[[25,[87]]]],[[56,32],[[25,[87]]]],[[60,32],[[25,[87]]]],[[61,32],[[25,[87]]]],[[62,32],[[25,[87]]]],[[71,32],[[25,[87]]]],[[72,32],[[25,[87]]]],[[73,32],[[25,[87]]]],[81,32],[82,32],[83,32],[74,32],[75,32],[65,32],[30,32],[64,32],[63,32],[67,32],[69,32],[66,32],[68,32],[76,32],[77,32],[53,32],[55,32],[57,32],[52,32],[54,32],[56,32],[60,32],[61,32],[62,32],[71,32],[72,32],[73,32],[[81,127],[[25,[87]]]],[[82,127],[[25,[87]]]],[[83,127],[[25,[87]]]],[[74,127],[[25,[87]]]],[[75,127],[[25,[87]]]],[[65,127],[[25,[87]]]],[[30,127],[[25,[87]]]],[[64,127],[[25,[87]]]],[[63,127],[[25,[87]]]],[[67,127],[[25,[87]]]],[[69,127],[[25,[87]]]],[[66,127],[[25,[87]]]],[[68,127],[[25,[87]]]],[[76,127],[[25,[87]]]],[[77,127],[[25,[87]]]],[[53,127],[[25,[87]]]],[[55,127],[[25,[87]]]],[[57,127],[[25,[87]]]],[[52,127],[[25,[87]]]],[[54,127],[[25,[87]]]],[[56,127],[[25,[87]]]],[[60,127],[[25,[87]]]],[[61,127],[[25,[87]]]],[[62,127],[[25,[87]]]],[[71,127],[[25,[87]]]],[[72,127],[[25,[87]]]],[[73,127],[[25,[87]]]],[93,[[25,[93]]]],[96,[[25,[96]]]],0,0,0,0,0,0,[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[[90,21],[[12,[39]]]],[[128,21],[[12,[39]]]],[[128,21],[[12,[39]]]],[[129,21],[[12,[39]]]],[[129,21],[[12,[39]]]],[[33,21],[[12,[39]]]],[[33,21],[[12,[39]]]],[[33,21],[[12,[39]]]],[[33,21],[[12,[39]]]],[[97,21],[[12,[39]]]],[[98,21],[[12,[39]]]],[[99,21],[[12,[39]]]],[[93,21],[[12,[39]]]],[[100,21],[[12,[39]]]],[[96,21],[[12,[39]]]],[[102,21],[[12,[39]]]],[[102,21],[[12,[39]]]],[[103,21],[[12,[39]]]],[[103,21],[[12,[39]]]],[[105,21],[[12,[39]]]],[[14,21],[[12,[39]]]],[[14,21],[[12,[39]]]],[[106,21],[[12,[39]]]],[[24,21],[[12,[39]]]],[[107,21],[[12,[39]]]],[[108,21],[[12,[39]]]],[[23,21],[[12,[39]]]],[[109,21],[[12,[39]]]],[[17,21],[[12,[39]]]],[[110,21],[[12,[39]]]],[[111,21],[[12,[39]]]],[[112,21],[[12,[39]]]],[[35,21],[[12,[39]]]],[[34,21],[[12,[39]]]],[[115,21],[[12,[39]]]],[[118,21],[[12,[39]]]],[[79,21],[[12,[39]]]],[[130,21],[[12,[39]]]],[[130,21],[[12,[39]]]],[[86,21],[[12,[39]]]],[[81,21],[[12,[39]]]],[[81,21],[[12,[39]]]],[[82,21],[[12,[39]]]],[[82,21],[[12,[39]]]],[[83,21],[[12,[39]]]],[[83,21],[[12,[39]]]],[[84,21],[[12,[39]]]],[[84,21],[[12,[39]]]],[[85,21],[[12,[39]]]],[[85,21],[[12,[39]]]],[[74,21],[[12,[39]]]],[[74,21],[[12,[39]]]],[[75,21],[[12,[39]]]],[[75,21],[[12,[39]]]],[[65,21],[[12,[39]]]],[[65,21],[[12,[39]]]],[[30,21],[[12,[39]]]],[[30,21],[[12,[39]]]],[[64,21],[[12,[39]]]],[[64,21],[[12,[39]]]],[[63,21],[[12,[39]]]],[[63,21],[[12,[39]]]],[[67,21],[[12,[39]]]],[[67,21],[[12,[39]]]],[[69,21],[[12,[39]]]],[[69,21],[[12,[39]]]],[[70,21],[[12,[39]]]],[[70,21],[[12,[39]]]],[[66,21],[[12,[39]]]],[[66,21],[[12,[39]]]],[[68,21],[[12,[39]]]],[[68,21],[[12,[39]]]],[[76,21],[[12,[39]]]],[[76,21],[[12,[39]]]],[[77,21],[[12,[39]]]],[[77,21],[[12,[39]]]],[[53,21],[[12,[39]]]],[[53,21],[[12,[39]]]],[[55,21],[[12,[39]]]],[[55,21],[[12,[39]]]],[[57,21],[[12,[39]]]],[[57,21],[[12,[39]]]],[[58,21],[[12,[39]]]],[[58,21],[[12,[39]]]],[[52,21],[[12,[39]]]],[[52,21],[[12,[39]]]],[[54,21],[[12,[39]]]],[[54,21],[[12,[39]]]],[[56,21],[[12,[39]]]],[[56,21],[[12,[39]]]],[[60,21],[[12,[39]]]],[[60,21],[[12,[39]]]],[[61,21],[[12,[39]]]],[[61,21],[[12,[39]]]],[[62,21],[[12,[39]]]],[[62,21],[[12,[39]]]],[[71,21],[[12,[39]]]],[[71,21],[[12,[39]]]],[[72,21],[[12,[39]]]],[[72,21],[[12,[39]]]],[[73,21],[[12,[39]]]],[[73,21],[[12,[39]]]],[[],92],[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[131],[[]],[[],90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[74,65],[67,65],[[]],[[]],[[],30],[[],30],[[],64],[[],64],[[]],[[],64],[66,64],[[]],[65,67],[74,67],[[]],[75,69],[[]],[[]],[133,66],[68,66],[[],66],[[]],[64,66],[[],66],[[],66],[[],68],[133,68],[[],68],[[],68],[[]],[[],68],[[],68],[[],68],[[],68],[70,68],[[],68],[[]],[[]],[[]],[76,55],[[]],[[]],[77,57],[[]],[[],52],[[],52],[[]],[[],54],[[]],[[],54],[[],54],[[],56],[[],56],[[]],[58,56],[[],56],[[],56],[[],56],[[],56],[[],60],[[],60],[[]],[[],61],[[],61],[[]],[[],61],[[]],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[]],[[],71],[[],71],[[]],[[],72],[[],72],[[],72],[[],73],[[]],[[],73],[[],73],[[],73],[[],73],[[],73],[75,70],[77,58],[27,74],[27,65],[27,30],[27,63],[27,67],[46,76],[46,53],[46,55],[46,52],[[27,30],74],[[46,52],76],[[],30],[[],64],[[],70],[[],66],[[],68],[[],58],[[],52],[[],54],[[],56],[[],60],[[],61],[[],62],[[],71],[[],72],[[],73],[[64,27],75],[[64,27],65],[[64,27],67],[[64,27],69],[[64,27],70],[[54,46],77],[[54,46],55],[[54,46],57],[[54,46],58],[[30,30,30],74],[[66,66,66,66],75],[[64,64,64],65],[[30,30],63],[[66,66,66],67],[[68,68,68,68],69],[[52,52,52],76],[[54,54,54,54],77],[[52,52],53],[[54,54,54],55],[[56,56,56,56],57],[[],74],[[],75],[[],65],[[],63],[[],67],[[],69],[[],76],[[],77],[[],53],[[],55],[[],57],[[],74],[[],75],[[],65],[[],63],[[],67],[[],69],[[],76],[[],77],[[],53],[[],55],[[],57],[[],74],[[],75],[[],65],[[],63],[[],67],[[],69],[[],76],[[],77],[[],53],[[],55],[[],57],[92,91],[92,91],[[[9,[[90,[92]]]]],95],[121,14],[121,14],[64,65],[30,63],[64,67],[68,69],[52,53],[54,55],[56,57],[[86,27,27,27],65],[[86,27,27,27],67],[[86,27,27,27],69],[[86,27,27,27],70],[[86,46,46,46],55],[[86,46,46,46],57],[[86,46,46,46],58],[63,74],[63,65],[63,67],[53,76],[53,55],[[63,30],74],[[53,52],76],[65,74],[65,75],[65,63],[65,69],[65,70],[55,76],[55,77],[55,53],[55,57],[55,58],[[65,64],75],[[55,54],77],[67,74],[67,63],[67,69],[67,70],[69,75],[69,65],[69,67],[69,70],[57,77],[57,55],[57,58],[[48,132],14],[70,75],[70,65],[70,67],[70,69],[58,77],[58,55],[58,57],[87,[[25,[81]]]],[87,[[25,[82]]]],[87,[[25,[83]]]],[87,[[25,[74]]]],[87,[[25,[75]]]],[87,[[25,[65]]]],[87,[[25,[30]]]],[87,[[25,[64]]]],[87,[[25,[63]]]],[87,[[25,[67]]]],[87,[[25,[69]]]],[87,[[25,[70]]]],[87,[[25,[66]]]],[87,[[25,[68]]]],[87,[[25,[76]]]],[87,[[25,[77]]]],[87,[[25,[53]]]],[87,[[25,[55]]]],[87,[[25,[57]]]],[87,[[25,[58]]]],[87,[[25,[52]]]],[87,[[25,[54]]]],[87,[[25,[56]]]],[87,[[25,[60]]]],[87,[[25,[61]]]],[87,[[25,[62]]]],[87,[[25,[71]]]],[87,[[25,[72]]]],[87,[[25,[73]]]],[70,112],[[64,64],70],[[54,54],58],[[30,30],70],[[52,52],58],[[64,64],70],[[54,54],58],[[70,64],75],[[70,64],69],[[58,54],77],[[58,54],57],[27,75],[27,65],[27,67],[27,69],[27,70],[46,77],[46,55],[46,57],[46,58],[27,75],[27,65],[27,67],[27,69],[27,70],[46,77],[46,55],[46,57],[46,58],[27,75],[27,65],[27,67],[27,69],[27,70],[46,77],[46,55],[46,57],[46,58],[64,112],[30,74],[64,75],[30,65],[30,67],[64,69],[52,76],[54,77],[52,55],[54,57],[[30,27],63],[[52,46],53],[[30,27,30],74],[[30,27,30],65],[[30,27,30],67],[[52,46,52],76],[[52,46,52],55],[[64,70,64],75],[[64,70,64],69],[[54,58,54],77],[[54,58,54],57],[64,70],[54,58],[[],30],[[],64],[[],70],[[],66],[[],68],[[],58],[[],52],[[],54],[[],56],[[],60],[[],61],[[],62],[[],71],[[],72],[[],73],[127,[[12,[14]]]],[127,[[12,[14,134]]]],[64,112],[30,74],[64,75],[30,65],[30,67],[64,69],[52,76],[54,77],[52,55],[54,57],[68,70],[56,58],[7],[7],[6],[6],[7],[6],[7],[7],[6],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[7],[6],[6],[7],[7],[6],[6],[7],[6],[7],[7],[6],[6],[7],[6],[7],[6],[7],[7],[6],[7],[6],[6],[7],[6],[7],[6],[7],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[6],[7],[7],[6],[6],[7],[6],[7],[6],[7],[7],[6],[6],[7],[6],[7],[6],[7],[7],[6],[7],[6],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[6],[7],[7],[6],[6],[7],[6],[7],[6],[7],[7],[6],[7],[6],[6],[7],[6],[7],[7],[6],[[27,27,27,27],70],[[46,46,46,46],58],[115,50],[23,11],[24,25],[[135,23],11],[[136,24],25],[[137,24],25],[[138,92,115],25],[[91,115],25],[78,136],[[88,115],25],[[89,115],25],[[92,115],[[25,[11]]]],[[110,71],[[25,[115]]]],[114,95],[[116,14],[[25,[[9,[[90,[11]]]]]]]],[117,94],[24,139],[23,140],[24,140],[[114,14],[[9,[[90,[92]]]]]],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[127,25],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[138,92]],[89],[92],[23,11],[24,25],[90],[[135,23],11],[[137,24],25],[[138,92,115],25],[[91,115],25],[78,137],[[89,115],25],[[92,115],[[25,[11]]]],[7,[[25,[94]]]],[7],[7],[7],[7],[7],[7],[86,141],[81,141],[82,141],[83,141],[84,141],[85,141],[74,141],[75,141],[65,141],[30,141],[64,141],[63,141],[67,141],[69,141],[70,141],[66,141],[68,141],[76,141],[77,141],[53,141],[55,141],[57,141],[58,141],[52,141],[54,141],[56,141],[60,141],[61,141],[62,141],[71,141],[72,141],[73,141],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],[[],142],0,[102],[105],[14],[24],[23],[115],[86],[81],[82],[83],[84],[85],[60],[61],[62],[71],[72],[73],0,0,[[],14],[[],14],[80,14],[118,14],0,0,0,0,[14,[[25,[14]]]],[115,50],[[30,32]],[[64,32]],[[66,32]],[[68,32]],[[52,32]],[[54,32]],[[56,32]],[[60,32]],[[61,32]],[[62,32]],[[71,32]],[[72,32]],[[73,32]],0,[[30,32]],[[64,32]],[[66,32]],[[68,32]],[[52,32]],[[54,32]],[[56,32]],[[60,32]],[[61,32]],[[62,32]],[[71,32]],[[72,32]],[[73,32]],[114],[7],[7],[7],[7],[7],[[80,7]],[[35,7]],[7],[7],[7],0,[[8,7]],[[138,92,115],25],[[91,115],25],[[89,115],25],[[92,115,11],31],[[116,14,113],[[25,[113]]]],[117],[7],[8,8],[8,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[86,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[81,4]]],[[5,[1,4]]]],[[[5,[82,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[83,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[84,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[85,4]]],[[5,[1,4]]]],[[[5,[74,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[75,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[65,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[30,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[64,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[63,4]]],[[5,[1,4]]]],[[[5,[67,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[69,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[70,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[66,4]]],[[5,[1,4]]]],[[[5,[68,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[76,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[77,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[53,4]]],[[5,[1,4]]]],[[[5,[55,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[57,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[58,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[52,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[54,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[56,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[60,4]]],[[5,[1,4]]]],[[[5,[61,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[62,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[71,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[72,4]]],[[5,[1,4]]]],[[[5,[4]]],[[5,[1,4]]]],[[[5,[73,4]]],[[5,[1,4]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[10,[[10,[1]]]],[105,143],[112,144],[90],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[86,4]]],[[5,[87,4]]]],[[[5,[81,4]]],[[5,[87,4]]]],[[[5,[82,4]]],[[5,[87,4]]]],[[[5,[83,4]]],[[5,[87,4]]]],[[[5,[84,4]]],[[5,[87,4]]]],[[[5,[85,4]]],[[5,[87,4]]]],[[[5,[74,4]]],[[5,[87,4]]]],[[[5,[75,4]]],[[5,[87,4]]]],[[[5,[65,4]]],[[5,[87,4]]]],[[[5,[30,4]]],[[5,[87,4]]]],[[[5,[64,4]]],[[5,[87,4]]]],[[[5,[63,4]]],[[5,[87,4]]]],[[[5,[67,4]]],[[5,[87,4]]]],[[[5,[69,4]]],[[5,[87,4]]]],[[[5,[70,4]]],[[5,[87,4]]]],[[[5,[66,4]]],[[5,[87,4]]]],[[[5,[68,4]]],[[5,[87,4]]]],[[[5,[76,4]]],[[5,[87,4]]]],[[[5,[77,4]]],[[5,[87,4]]]],[[[5,[53,4]]],[[5,[87,4]]]],[[[5,[55,4]]],[[5,[87,4]]]],[[[5,[57,4]]],[[5,[87,4]]]],[[[5,[58,4]]],[[5,[87,4]]]],[[[5,[52,4]]],[[5,[87,4]]]],[[[5,[54,4]]],[[5,[87,4]]]],[[[5,[56,4]]],[[5,[87,4]]]],[[[5,[60,4]]],[[5,[87,4]]]],[[[5,[61,4]]],[[5,[87,4]]]],[[[5,[62,4]]],[[5,[87,4]]]],[[[5,[71,4]]],[[5,[87,4]]]],[[[5,[72,4]]],[[5,[87,4]]]],[[[5,[73,4]]],[[5,[87,4]]]],[91,92],[117,116],[74,74],[75,75],[65,65],[63,63],[67,67],[69,69],[70,70],[76,76],[77,77],[53,53],[55,55],[57,57],[58,58],[[15,115],31],[74,31],[75,31],[65,31],[30,31],[64,31],[63,31],[67,31],[69,31],[70,31],[66,31],[68,31],[76,31],[77,31],[53,31],[55,31],[57,31],[58,31],[52,31],[54,31],[56,31],[74,31],[75,31],[65,31],[30,31],[64,31],[63,31],[67,31],[69,31],[70,31],[66,31],[68,31],[76,31],[77,31],[53,31],[55,31],[57,31],[58,31],[52,31],[54,31],[56,31],[30,81],[64,82],[66,84],[68,85],[52,81],[54,82],[56,83],[70,31],[58,31],[30,50],[64,50],[66,50],[68,50],[52,50],[54,50],[56,50],[60,50],[61,50],[62,50],[14,31],[30,31],[64,31],[70,31],[66,31],[68,31],[58,31],[52,31],[54,31],[56,31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[138,92],145],[91,145],[88,145],[89,145],[92,145],[81,146],[82,146],[83,146],[74,146],[75,146],[65,146],[30,146],[64,146],[63,146],[67,146],[69,146],[66,146],[68,146],[76,146],[77,146],[53,146],[55,146],[57,146],[52,146],[54,146],[56,146],[60,146],[61,146],[62,146],[71,146],[72,146],[73,146],[[138,92],145],[91,145],[89,145],[92,145],[[138,92,[10,[34]]],147],[[91,[10,[34]]],147],[[89,[10,[34]]],147],[[92,[10,[34]]],148],[15,149],[[[10,[34]]]],[[138,92,[10,[34]]],150],[[91,[10,[34]]],150],[[88,[10,[34]]]],[[88,[10,[34]]],150],[[89,[10,[34]]]],[[89,[10,[34]]]],[[89,[10,[34]]],150],[[92,[10,[34]]],151],[[15,34],152],[[59,59],60],[[59,59,59],61],[[59,59,59,59],62],0,[[15,115]],[15,153],0,[92,154],0,[30,27],[64,27],[70,27],[66,27],[68,27],[58,46],[52,46],[54,46],[56,46],[30,27],[64,27],[70,27],[66,27],[68,27],[58,46],[52,46],[54,46],[56,46],[30,27],[64,27],[70,27],[66,27],[68,27],[58,46],[52,46],[54,46],[56,46],[[30,30,27],30],[[64,64,27],64],[[70,70,27],70],[[66,66,27],66],[[68,68,27],68],[[58,58,46],58],[[52,52,46],52],[[54,54,46],54],[[56,56,46],56],0,[[64,64,64],75],[[64,64,64],69],[[54,54,54],77],[[54,54,54],57],[[64,64,64],75],[[64,64,64],69],[[54,54,54],77],[[54,54,54],57],[[64,64,64],75],[[64,64,64],69],[[54,54,54],77],[[54,54,54],57],[[64,64,64],75],[[64,64,64],69],[[54,54,54],77],[[54,54,54],57],[7],[93,93],[96,96],[[30,30],63],[[64,64,64],65],[[66,66,66],67],[[68,68,68,68],69],0,0,0,0,[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[60,60],60],[[61,61],61],[[62,62],62],[[71,71],71],[[72,72],72],[[73,73],73],[30,27],[64,27],[66,27],[68,27],[52,46],[54,46],[56,46],[60,59],[61,59],[62,59],[71,50],[72,50],[73,50],[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[60,60],60],[[61,61],61],[[62,62],62],[[71,71],71],[[72,72],72],[[73,73],73],[30,27],[64,27],[66,27],[68,27],[52,46],[54,46],[56,46],[60,59],[61,59],[62,59],[71,50],[72,50],[73,50],[[74,74]],[[74,65]],[[74,67]],[[75,69]],[[75,75]],[[65,64]],[[65,27]],[[65,65]],[[65,66],66],[[65,74]],[[30,30],30],[[30,27],30],[[64,64],64],[[64,27],64],[[63,27]],[[63,63]],[[63,30]],[[67,74]],[[67,64],64],[[67,27]],[[67,66]],[[67,67]],[[69,69]],[[69,75]],[[69,68]],[[69,27]],[[70,64]],[[70,66]],[[70,27],70],[[70,70],70],[[66,27],66],[[66,66],66],[[68,27],68],[[68,68],68],[[76,55]],[[76,76]],[[77,77]],[[77,57]],[[53,53]],[[53,46]],[[53,52]],[[55,54]],[[55,46]],[[55,76]],[[55,55]],[[57,46]],[[57,77]],[[57,56]],[[57,57]],[[58,58],58],[[58,54]],[[58,46],58],[[52,52],52],[[52,46],52],[[54,46],54],[[54,54],54],[[56,46],56],[[56,56],56],[[60,60],60],[[60,59],60],[[61,59],61],[[61,61],61],[[62,59],62],[[62,62],62],[[71,50],71],[[71,71],71],[[72,72],72],[[72,50],72],[[73,50],73],[[73,73],73],[[30,30,30],30],[[64,64,64],64],[[66,66,66],66],[[68,68,68],68],[[52,52,52],52],[[54,54,54],54],[[56,56,56],56],[[65,65]],[[65,27]],[[30,27]],[[30,30]],[[64,27]],[[64,64]],[[63,27]],[[63,63]],[[67,27]],[[67,67]],[[69,27]],[[69,69]],[[70,70]],[[66,66]],[[66,27]],[[68,68]],[[68,27]],[[53,46]],[[53,53]],[[55,46]],[[55,55]],[[57,57]],[[57,46]],[[58,58]],[[52,52]],[[52,46]],[[54,46]],[[54,54]],[[56,46]],[[56,56]],[[60,60]],[[60,59]],[[61,59]],[[61,61]],[[62,62]],[[62,59]],[[71,50]],[[71,71]],[[72,50]],[[72,72]],[[73,73]],[[73,50]],[[63,63],63],[[53,53],53],[[65,65],65],[[67,67],67],[[55,55],55],[[69,69],69],[[57,57],57],[[70,70],70],[[58,58],58],[[65,27],65],[[63,27],63],[[67,27],67],[[69,27],69],[[53,46],53],[[55,46],55],[[57,46],57],[[63,30],30],[[53,52],52],[[65,64],64],[[67,64],64],[[70,64],64],[[55,54],54],[[58,54],54],[[65,66],66],[[67,66],66],[[70,66],66],[[69,68],68],[[57,56],56],[[],36],[[],36],[80,36],[35,127],[118,36],0,0,[[81,32],[[25,[127]]]],[[82,32],[[25,[127]]]],[[83,32],[[25,[127]]]],[[74,32],[[25,[127]]]],[[75,32],[[25,[127]]]],[[65,32],[[25,[127]]]],[[30,32],[[25,[127]]]],[[64,32],[[25,[127]]]],[[63,32],[[25,[127]]]],[[67,32],[[25,[127]]]],[[69,32],[[25,[127]]]],[[66,32],[[25,[127]]]],[[68,32],[[25,[127]]]],[[76,32],[[25,[127]]]],[[77,32],[[25,[127]]]],[[53,32],[[25,[127]]]],[[55,32],[[25,[127]]]],[[57,32],[[25,[127]]]],[[52,32],[[25,[127]]]],[[54,32],[[25,[127]]]],[[56,32],[[25,[127]]]],[[60,32],[[25,[127]]]],[[61,32],[[25,[127]]]],[[62,32],[[25,[127]]]],[[71,32],[[25,[127]]]],[[72,32],[[25,[127]]]],[[73,32],[[25,[127]]]],[65],[30,30],[64,64],[63],[67],[69],[70,70],[66,66],[68,68],[53],[55],[57],[58,58],[52,52],[54,54],[56,56],[60,60],[61,61],[62,62],[[],90],[[],138],[127,[[12,[102,103]]]],[[[25,[36]]],105],[[],14],[[[25,[36]]],24],[[[25,[36]]],23],[[[24,[108]]],17],[[154,25],92],[[71,30,[24,[108]]],110],[[],113],[[],80],[[50,50],115],[[],116],[[],117],[[],7],[[31,31],81],[[31,31,31],82],[[31,31,31,31],83],[[31,31,31],84],[[31,31,31,31],85],[[27,27],30],[[27,27,27],64],[[27,27,27],66],[[27,27,27,27],68],[[46,46],52],[[46,46,46],54],[[46,46,46,46],56],[[59,59],60],[[59,59,59],61],[[59,59,59,59],62],[[50,50],71],[[50,50,50],72],[[50,50,50,50],73],[155,113],[150,25],[147,25],[151,25],[148,25],[149,25],[152,25],[[],14],[30,30],[64,64],[70,70],[66,66],[68,68],[58,58],[52,52],[54,54],[56,56],[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[[105,156]],[81,81],[82,82],[83,83],[84,84],[85,85],[60],[61],[62],[71],[72],[73],[[27,27,27,27,27,27],69],[[46,46,46,46,46,46],57],[[27,27,27,27,27,27],69],[[46,46,46,46,46,46],57],[[27,27,27,27,27,27],69],[[46,46,46,46,46,46],57],[[90,90],[[25,[120]]]],[[14,14],[[25,[120]]]],[[115,115],[[25,[120]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],0,0,0,[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[127,[[12,[87,157]]]],[30,30],[52,52],[60,60],[[30,30],27],[[52,52],46],[[60,60],59],[[27,27,27],69],[[46,46,46],57],[[27,27,27],69],[[46,46,46],57],[[27,27,27],69],[[46,46,46],57],[[27,27,27],69],[[46,46,46],57],[[27,27,27,27],69],[[46,46,46,46],57],[[27,27,27,27],69],[[46,46,46,46],57],[[27,27,27,27],69],[[46,46,46,46],57],[[98,[24,[97]],27]],0,[[30,27],30],[[64,27],64],[[66,27],66],[[68,27],68],[[52,46],52],[[54,46],54],[[56,46],56],0,[[],74],[[],75],[[],65],[[],65],[[],30],[[],30],[[],64],[[],64],[[],63],[[],63],[[],67],[[],67],[[],69],[[],69],[[],70],[[],70],[[],66],[[],66],[[],68],[[],68],[[],76],[[],77],[[],53],[[],53],[[],55],[[],55],[[],57],[[],57],[[],58],[[],58],[[],52],[[],52],[[],54],[[],54],[[],56],[[],56],[[],60],[[],60],[[],61],[[],61],[[],62],[[],62],[[],71],[[],71],[[],72],[[],72],[[],73],[[],73],[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[69,64],64],[[57,54],54],[158],[158],[[27,27,27,27],70],0,0,[14,132],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[86,159],[81,159],[82,159],[83,159],[84,159],[85,159],[74,159],[75,159],[65,159],[30,159],[64,159],[63,159],[67,159],[69,159],[70,159],[66,159],[68,159],[76,159],[77,159],[53,159],[55,159],[57,159],[58,159],[52,159],[54,159],[56,159],[60,159],[61,159],[62,159],[71,159],[72,159],[73,159],[[[5,[86,4]]],160],[[[5,[81,4]]],160],[[[5,[82,4]]],160],[[[5,[83,4]]],160],[[[5,[84,4]]],160],[[[5,[85,4]]],160],[[[5,[74,4]]],160],[[[5,[75,4]]],160],[[[5,[65,4]]],160],[[[5,[30,4]]],160],[[[5,[64,4]]],160],[[[5,[63,4]]],160],[[[5,[67,4]]],160],[[[5,[69,4]]],160],[[[5,[70,4]]],160],[[[5,[66,4]]],160],[[[5,[68,4]]],160],[[[5,[76,4]]],160],[[[5,[77,4]]],160],[[[5,[53,4]]],160],[[[5,[55,4]]],160],[[[5,[57,4]]],160],[[[5,[58,4]]],160],[[[5,[52,4]]],160],[[[5,[54,4]]],160],[[[5,[56,4]]],160],[[[5,[60,4]]],160],[[[5,[61,4]]],160],[[[5,[62,4]]],160],[[[5,[71,4]]],160],[[[5,[72,4]]],160],[[[5,[73,4]]],160],[[81,87],[[25,[31]]]],[[82,87],[[25,[31]]]],[[83,87],[[25,[31]]]],[[74,87],[[25,[31]]]],[[75,87],[[25,[31]]]],[[65,87],[[25,[31]]]],[[30,87],[[25,[31]]]],[[64,87],[[25,[31]]]],[[63,87],[[25,[31]]]],[[67,87],[[25,[31]]]],[[69,87],[[25,[31]]]],[[70,87],[[25,[31]]]],[[66,87],[[25,[31]]]],[[68,87],[[25,[31]]]],[[76,87],[[25,[31]]]],[[77,87],[[25,[31]]]],[[53,87],[[25,[31]]]],[[55,87],[[25,[31]]]],[[57,87],[[25,[31]]]],[[58,87],[[25,[31]]]],[[52,87],[[25,[31]]]],[[54,87],[[25,[31]]]],[[56,87],[[25,[31]]]],[[60,87],[[25,[31]]]],[[61,87],[[25,[31]]]],[[62,87],[[25,[31]]]],[[71,87],[[25,[31]]]],[[72,87],[[25,[31]]]],[[73,87],[[25,[31]]]],[86,161],[81,161],[82,161],[83,161],[84,161],[85,161],[74,161],[75,161],[65,161],[30,161],[64,161],[63,161],[67,161],[69,161],[70,161],[66,161],[68,161],[76,161],[77,161],[53,161],[55,161],[57,161],[58,161],[52,161],[54,161],[56,161],[60,161],[61,161],[62,161],[71,161],[72,161],[73,161],[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[30,30],30],[[64,64],64],[[66,66],66],[[68,68],68],[[52,52],52],[[54,54],54],[[56,56],56],[[30,27],30],[[30,30],30],[[64,27],64],[[64,64],64],[[66,27],66],[[66,66],66],[[68,68],68],[[68,27],68],[[52,52],52],[[52,46],52],[[54,46],54],[[54,54],54],[[56,46],56],[[56,56],56],[[60,59],60],[[60,60],60],[[61,59],61],[[61,61],61],[[62,59],62],[[62,62],62],[[71,71],71],[[71,50],71],[[72,72],72],[[72,50],72],[[73,50],73],[[73,73],73],[[30,30]],[[30,27]],[[64,64]],[[64,27]],[[66,66]],[[66,27]],[[68,68]],[[68,27]],[[52,52]],[[52,46]],[[54,54]],[[54,46]],[[56,46]],[[56,56]],[[60,59]],[[60,60]],[[61,61]],[[61,59]],[[62,59]],[[62,62]],[[71,50]],[[71,71]],[[72,72]],[[72,50]],[[73,73]],[[73,50]],[[138,92,115],25],[[91,115],25],[78,[[5,[162,4]]]],[[89,115],25],[[92,115,[25,[11]]],31],[[116,14],[[25,[113]]]],[7,94],[[30,30],30],[[52,52],52],[[60,60],60],0,[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[[65,32],64],[[63,32],30],[[67,32],66],[[69,32],68],[[53,32],52],[[55,32],54],[[57,32],56],[7,[[12,[37]]]],[[8,7],[[12,[37]]]],[[80,7],[[12,[37]]]],[[35,7],[[12,[37]]]],0,[7,[[12,[37]]]],[7,[[12,[37]]]],0,[[81,30,30],30],[[82,64,64],64],[[84,66,66],66],[[85,68,68],68],[[81,52,52],52],[[82,54,54],54],[[83,56,56],56],[[81,60,60],60],[[82,61,61],61],[[83,62,62],62],[[81,71,71],71],[[82,72,72],72],[[83,73,73],73],[[98,99]],[86,12],[81,12],[82,12],[83,12],[84,12],[85,12],[74,12],[75,12],[65,12],[30,12],[64,12],[63,12],[67,12],[69,12],[70,12],[66,12],[68,12],[76,12],[77,12],[53,12],[55,12],[57,12],[58,12],[52,12],[54,12],[56,12],[60,12],[61,12],[62,12],[71,12],[72,12],[73,12],[[110,71,[25,[115]]]],[[86,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[81,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[82,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[83,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[84,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[85,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[74,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[75,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[65,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[30,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[64,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[63,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[67,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[69,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[70,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[66,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[68,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[76,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[77,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[53,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[55,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[57,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[58,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[52,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[54,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[56,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[60,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[61,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[62,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[71,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[72,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[73,[5,[87,4]]],[[12,[[5,[87,4]]]]]],[[60,163]],[[60,60]],[[60,164]],[[60,50]],[[60,71]],[[60,165]],[[60,59]],[[60,11]],[[61,72]],[[61,50]],[[61,163]],[[61,59]],[[61,164]],[[61,61]],[[61,11]],[[61,165]],[[62,11]],[[62,165]],[[62,50]],[[62,59]],[[62,62]],[[62,164]],[[62,73]],[[62,163]],[[71,163]],[[71,60]],[[71,71]],[[71,165]],[[71,11]],[[71,164]],[[71,59]],[[71,50]],[[72,163]],[[72,165]],[[72,72]],[[72,50]],[[72,61]],[[72,59]],[[72,11]],[[72,164]],[[73,59]],[[73,163]],[[73,50]],[[73,11]],[[73,73]],[[73,164]],[[73,165]],[[73,62]],[[60,50]],[[60,165]],[[60,71]],[[60,60]],[[60,164]],[[60,163]],[[60,59]],[[60,11]],[[61,59]],[[61,11]],[[61,72]],[[61,61]],[[61,165]],[[61,164]],[[61,163]],[[61,50]],[[62,163]],[[62,11]],[[62,59]],[[62,50]],[[62,73]],[[62,165]],[[62,164]],[[62,62]],[[71,163]],[[71,164]],[[71,165]],[[71,60]],[[71,50]],[[71,59]],[[71,71]],[[71,11]],[[72,61]],[[72,50]],[[72,163]],[[72,165]],[[72,59]],[[72,11]],[[72,72]],[[72,164]],[[73,164]],[[73,165]],[[73,59]],[[73,50]],[[73,11]],[[73,163]],[[73,73]],[[73,62]],[30,30],[64,64],[66,66],[68,68],[52,52],[54,54],[56,56],[60,60],[61,61],[62,62],[[70,70,27],70],[[58,58,46],58],[31,81],[31,82],[31,83],[31,84],[31,85],[27,30],[27,64],[27,66],[27,68],[46,52],[46,54],[46,56],[59,60],[59,61],[59,62],[50,71],[50,72],[50,73],0,[[65,65]],[[30,30],30],[[30,27],30],[[64,64],64],[[64,27],64],[[63,63]],[[67,67]],[[69,69]],[[70,70],70],[[66,66],66],[[66,27],66],[[68,27],68],[[68,68],68],[[53,53]],[[55,55]],[[57,57]],[[58,58],58],[[52,46],52],[[52,52],52],[[54,46],54],[[54,54],54],[[56,46],56],[[56,56],56],[[60,59],60],[[60,60],60],[[61,59],61],[[61,61],61],[[62,59],62],[[62,62],62],[[71,50],71],[[71,71],71],[[72,72],72],[[72,50],72],[[73,73],73],[[73,50],73],[[65,65]],[[30,30]],[[30,27]],[[64,27]],[[64,64]],[[63,63]],[[67,67]],[[69,69]],[[66,27]],[[66,66]],[[68,27]],[[68,68]],[[53,53]],[[55,55]],[[57,57]],[[52,46]],[[52,52]],[[54,46]],[[54,54]],[[56,56]],[[56,46]],[[60,59]],[[60,60]],[[61,59]],[[61,61]],[[62,59]],[[62,62]],[[71,71]],[[71,50]],[[72,50]],[[72,72]],[[73,73]],[[73,50]],[[63,63],63],[[53,53],53],[[65,65],65],[[67,67],67],[[55,55],55],[[69,69],69],[[57,57],57],[[],65],[[],65],[[],30],[[],30],[[],64],[[],64],[[],63],[[],63],[[],67],[[],67],[[],69],[[],69],[[],70],[[],70],[[],66],[[],66],[[],68],[[],68],[[],53],[[],53],[[],55],[[],55],[[],57],[[],57],[[],58],[[],58],[[],52],[[],52],[[],54],[[],54],[[],56],[[],56],[[],60],[[],60],[[],61],[[],61],[[],62],[[],62],[[],71],[[],71],[[],72],[[],72],[[],73],[[],73],0,[[],35],[35,35],0,0,0,0,[14,48],[30],[64],[70],[66],[68],[58],[52],[54],[56],[60],[61],[62],[71],[72],[73],[70],[58],[74],[75],[65],[63],[67],[69],[76],[77],[53],[55],[57],[74],[75],[65],[63],[67],[69],[76],[77],[53],[55],[57],[[70,86]],[[58,86]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75],[69],[77],[57],[70,64],[58,54],[14,[[12,[127,166]]]],[[],36],[[],36],[[],36],[[],36],[[],36],[14,36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[74,30],30],[[65,30],30],[[67,30],30],[[76,52],52],[[55,52],52],[[75,64],64],[[69,64],64],[[77,54],54],[[57,54],54],[[75,66],66],[[69,66],66],[[74,30],30],[[65,30],30],[[67,30],30],[[76,52],52],[[55,52],52],[[75,64],64],[[69,64],64],[[77,54],54],[[57,54],54],[[75,66],66],[[69,66],66],0,0,0,0,0,[65,65],[63,63],[67,67],[69,69],[53,53],[55,55],[57,57],[64,30],[66,30],[68,64],[54,52],[56,54],[61,60],[62,61],[72,71],[73,72],[90,[[12,[93,128]]]],[90,[[12,[96,129]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[127,[[12,[102]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[78,[[25,[136]]]],[114,[[12,[95,130]]]],[117,[[25,[94]]]],[[114,14],[[12,[[9,[[90,[92]]]],130]]]],[78,[[25,[137]]]],[114,[[12,[130]]]],[117,[[12,[130]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[30,[[25,[30]]]],[64,[[25,[64]]]],[66,[[25,[66]]]],[68,[[25,[68]]]],[52,[[25,[52]]]],[54,[[25,[54]]]],[56,[[25,[56]]]],[78,[[25,[[5,[162,4]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[86,127],[81,127],[82,127],[83,127],[84,127],[85,127],[74,127],[75,127],[65,127],[30,127],[64,127],[63,127],[67,127],[69,127],[70,127],[66,127],[68,127],[76,127],[77,127],[53,127],[55,127],[57,127],[58,127],[52,127],[54,127],[56,127],[60,127],[61,127],[62,127],[71,127],[72,127],[73,127],[23,24],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[24,23],[117,116],[117,116],[[]],[[50,50],71],[[50,50,50],72],[[50,50,50,50],73],[[27,27],30],[[27,27,27],64],[[27,27,27],66],[[27,27,27,27],68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],8],[[],14],[74],[75],[65],[63],[67],[69],[76],[77],[53],[55],[57],[30],[64],[70],[66],[68],[58],[52],[54],[56],[60],[61],[62],[71],[72],[73],[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,30],[64,30],[66,30],[68,30],[52,52],[54,52],[56,52],[60,60],[61,60],[62,60],[71,71],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[[]],[30,30],[64,30],[66,30],[68,30],[52,52],[54,52],[56,52],[60,60],[61,60],[62,60],[71,71],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[70,64],[66,66],[68,64],[58,54],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,30],[66,30],[68,30],[54,52],[56,52],[61,60],[62,60],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,30],[64,30],[66,30],[68,30],[52,52],[54,52],[56,52],[60,60],[61,60],[62,60],[71,71],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[[]],[30,30],[64,30],[66,30],[68,30],[52,52],[54,52],[56,52],[60,60],[61,60],[62,60],[71,71],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[[]],[30,64],[64,64],[66,66],[68,64],[52,54],[54,54],[56,54],[60,61],[61,61],[62,61],[71,72],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[[]],[30,68],[64,68],[66,68],[68,68],[52,56],[54,56],[56,56],[60,62],[61,62],[62,62],[71,73],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,30],[66,30],[68,30],[54,52],[56,52],[61,60],[62,60],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[68,30],[56,52],[62,60],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,30],[66,30],[68,30],[54,52],[56,52],[61,60],[62,60],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,30],[66,30],[68,30],[54,52],[56,52],[61,60],[62,60],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,30],[66,30],[68,30],[54,52],[56,52],[61,60],[62,60],[72,71],[73,71],[[]],[68,64],[56,54],[62,61],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,64],[66,66],[68,64],[54,54],[56,54],[61,61],[62,61],[72,72],[73,72],[[]],[68,68],[56,56],[62,62],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],[[]],[[]],[64,68],[66,68],[68,68],[54,56],[56,56],[61,62],[62,62],[72,73],[73,73],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[30,30],63],[[64,64,64],65],[[66,66,66],67],[[68,68,68,68],69],0,0,[[27,27,27,27],70],0,0,[[27,27],30],[[27,27,27],64],[[27,27,27],66],[[27,27,27,27],68],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[52,52],53],[[54,54,54],55],[[56,56,56,56],57],[[46,46,46,46],58],[[46,46],52],[[46,46,46],54],[[46,46,46,46],56],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[59,59],60],[[59,59,59],61],[[59,59,59,59],62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,11],[24,25],[23,11],[24,25],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[50,50],71],[[50,50,50],72],[[50,50,50,50],73],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[8,"Any"],[3,"FrameTime"],[8,"TypeData"],[3,"Global"],[3,"Box"],[3,"World"],[3,"World"],[3,"SystemStages"],[3,"Arc"],[3,"Rc"],[15,"u8"],[4,"Result"],[3,"TypeId"],[3,"Ulid"],[3,"Entities"],[3,"Res"],[3,"AtlasSprite"],[6,"CompMut"],[3,"AnimatedSprite"],[3,"AnimationBankSprite"],[3,"Formatter"],[6,"Result"],[3,"UntypedHandle"],[3,"Handle"],[4,"Option"],[3,"CameraShake"],[15,"f32"],[3,"ShakeNoise"],[3,"CameraTraumaEvents"],[3,"Vec2"],[15,"bool"],[15,"usize"],[3,"BitFmt"],[3,"BitSetVec"],[3,"System"],[3,"String"],[3,"Error"],[3,"Window"],[3,"Error"],[3,"Time"],[3,"Duration"],[8,"DynEq"],[3,"Stopwatch"],[3,"Timer"],[4,"TimerMode"],[15,"f64"],[8,"Hasher"],[15,"u64"],[3,"Instant"],[15,"u32"],[3,"BevyWorld"],[3,"DVec2"],[3,"DMat2"],[3,"DVec3"],[3,"DMat3"],[3,"DVec4"],[3,"DMat4"],[3,"DQuat"],[15,"i32"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[3,"Mat2"],[3,"Vec3"],[3,"Mat3"],[3,"Vec3A"],[3,"Mat3A"],[3,"Vec4"],[3,"Mat4"],[3,"Quat"],[3,"UVec2"],[3,"UVec3"],[3,"UVec4"],[3,"Affine2"],[3,"Affine3A"],[3,"DAffine2"],[3,"DAffine3"],[3,"AssetProviders"],[3,"CommandQueue"],[3,"SimpleSystemStage"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[3,"BVec3A"],[3,"BVec4A"],[4,"EulerRot"],[8,"Reflect"],[3,"AtomicComponentStoreRef"],[3,"AtomicComponentStoreRefMut"],[3,"AtomicRefCell"],[3,"ComponentStore"],[3,"UntypedComponentStore"],[3,"AtomicRef"],[3,"AtomicResource"],[3,"AtomicComponentStore"],[3,"AtomicRefMut"],[3,"AudioSource"],[3,"AudioEvents"],[4,"AudioEvent"],[3,"Camera"],[3,"ClearColor"],[3,"Key"],[4,"KeyError"],[3,"AssetProvidersResource"],[3,"AssetPath"],[3,"Path2d"],[3,"Image"],[3,"Atlas"],[3,"Sprite"],[3,"TileLayer"],[3,"Tile"],[3,"Transform"],[3,"UntypedResource"],[3,"ComponentStores"],[3,"Entity"],[3,"UntypedResources"],[3,"Resources"],[4,"CoreStage"],[3,"DynamicStruct"],[4,"Ordering"],[3,"SystemTime"],[3,"ResMut"],[3,"Commands"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[15,"str"],[3,"BorrowError"],[3,"BorrowMutError"],[4,"EcsError"],[15,"never"],[15,"u128"],[3,"__m128"],[4,"DecodeError"],[8,"AssetProvider"],[3,"AssetProviderRef"],[3,"AssetProviderMut"],[3,"TypedComponentOps"],[3,"Handle"],[3,"HandleUntyped"],[4,"TypeInfo"],[3,"TypeRegistration"],[3,"AssetPath"],[3,"Transform"],[8,"Iterator"],[3,"FieldIter"],[3,"ComponentBitsetIteratorMut"],[3,"UntypedComponentBitsetIteratorMut"],[3,"EntitiesIterWith"],[3,"ComponentBitsetIterator"],[3,"UntypedComponentBitsetIterator"],[3,"EntityIterator"],[3,"Vec"],[3,"Layout"],[3,"UntypedResourceInfo"],[3,"Path"],[4,"ReflectPathError"],[3,"Demand"],[4,"ReflectMut"],[4,"ReflectOwned"],[4,"ReflectRef"],[8,"UntypedAssetProvider"],[15,"i16"],[15,"u16"],[15,"i8"],[4,"EncodeError"],[8,"FromWorld"],[8,"RawFns"],[8,"UnwrapMany"],[13,"DispatcherExecutionFailed"],[13,"SystemError"],[8,"BitSet"],[8,"QueryItem"],[8,"SystemParam"],[8,"TypeUlid"],[8,"SystemStage"],[8,"StageLabel"],[8,"IntoSystem"],[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"],[8,"IntoBevy"],[13,"PlaySound"]],"a":{"cross":[6371,6372,6373],"determinant":[6371,6372,6373],"magnitude":[5906,5907,5908,5909,5910,5911,5912,5913,5914],"magnitude2":[5924,5925,5926,5927,5928,5929,5930,5931,5932],"mix":[5933,5934,5935,5936,5937,5938,5939,5940,5941],"repeating":[633],"scale":[4759,4760,4761,4762,4763,4764,4765],"wedge":[6371,6372,6373]}},\
"bones_matchmaker":{"doc":"Matchmaking server for Jumpy.","t":[0,5],"n":["cli","start"],"q":["bones_matchmaker","bones_matchmaker::cli"],"d":["",""],"i":[0,0],"f":[0,[[]]],"p":[]},\
"bones_matchmaker_proto":{"doc":"Network protocol structs for the Jumpy matchmaker.","t":[13,13,13,3,4,4,13,3,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["Accepted","All","ClientCount","MatchInfo","MatchmakerRequest","MatchmakerResponse","One","RecvProxyMessage","RequestMatch","SendProxyMessage","Success","TargetClient","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client_count","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_client","hash","into","into","into","into","into","into","match_data","message","message","serialize","serialize","serialize","serialize","serialize","serialize","target_client","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","client_count","player_idx","random_seed","0"],"q":["bones_matchmaker_proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_matchmaker_proto::MatchmakerRequest","bones_matchmaker_proto::MatchmakerResponse","","","","bones_matchmaker_proto::TargetClient"],"d":["The conneciton has been accepted","Send the message to all connected clients.","This is the current number of connected clients","Information about a match that is being requested","Requests that may be made in matchmaking mode","Responses that may be returned in matchmaking mode","Send the message to the client with the specified index.","The format of a message forwarded by the proxy to a client.","Request a match ID from the server","The format of a message sent by a client to the proxy, so …","The desired client count has been reached, and you may …","The client to send a network message to.","","","","","","","","","","","","","The number of clients to have in a match","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The client that the message came from.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This is an arbitrary set of bytes that must match exactly …","The message data.","The message data.","","","","","","","The client that the message should go to.","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of connected clients in the match","The client idx of the current client","The random seed that each client should use.",""],"i":[3,5,3,0,0,0,5,0,1,0,3,0,1,2,3,4,5,6,1,2,3,4,5,6,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,1,2,3,4,5,6,1,2,3,4,5,6,6,2,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,12,13,14,14,14,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[1]]]],[[],[[7,[2]]]],[[],[[7,[3]]]],[[],[[7,[4]]]],[[],[[7,[5]]]],[[],[[7,[6]]]],[[2,2],8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[[]],[[]],0,[2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0],"p":[[4,"MatchmakerRequest"],[3,"MatchInfo"],[4,"MatchmakerResponse"],[3,"SendProxyMessage"],[4,"TargetClient"],[3,"RecvProxyMessage"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[13,"RequestMatch"],[13,"ClientCount"],[13,"Success"],[13,"One"]]},\
"bones_render":{"doc":"Standardized rendering components for Bones.","tn":["audio","camera","datatypes","key","line","prelude","sprite","tilemap","transform","AudioEvent","AudioEvents","AudioSource","PlaySound","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","default","fmt","fmt","fmt","from","from","from","from_world","from_world","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","play","queue","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","send","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulid","ulid","vzip","vzip","vzip","sound_source","volume","0","Camera","ClearColor","active","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_type_data","clone_type_data","default","default","deref","deref_mut","fmt","from","from","from_world","from_world","from_world","from_world","height","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","raw_clone","raw_clone","raw_drop","raw_drop","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ulid","ulid","vzip","vzip","0","Key","KeyError","NotAscii","TooLong","as_any","as_any","as_any","as_any_mut","as_any_mut","as_dyn_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_type_data","clone_type_data","default","dyn_eq","dyn_hash","eq","fmt","fmt","fmt","fmt","from","from","from_world","from_world","get_hash","hash","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","provide","raw_clone","raw_clone","raw_drop","raw_drop","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Path2d","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","clone_type_data","color","default","fmt","from","from_world","from_world","into","into_any","into_any_arc","into_any_rc","line_breaks","points","raw_clone","raw_drop","thickness","to_owned","try_from","try_into","type_id","ulid","vzip","0","0","0","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","Affine2","Affine3A","AlreadyBorrowed","AssetPath","AssetProvider","AssetProviderMut","AssetProviderRef","AssetProviders","AssetProvidersResource","AtomicComponentStore","AtomicComponentStoreRef","AtomicComponentStoreRefMut","AtomicRef","AtomicRefCell","AtomicRefMut","AtomicResource","BVec2","BVec3","BVec3A","BVec4","BVec4A","BitFmt","BitSet","BitSetVec","BorrowError","BorrowMutError","CommandQueue","Commands","Comp","CompMut","ComponentBitsetIterator","ComponentBitsetIteratorMut","ComponentStore","ComponentStores","CoreStage","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","Deref","DerefMut","DispatcherExecutionFailed","EcsData","EcsError","Entities","EntitiesIterWith","Entity","EntityIterator","EulerRot","FALSE","FALSE","FALSE","FALSE","FALSE","First","FromWorld","Handle","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IVec2","IVec3","IVec4","IntoSystem","Iter","Last","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_W","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NotInitialized","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","Param","PostUpdate","PreUpdate","Quat","QueryItem","RAND_BITS","RawFns","Res","ResAssetProviders","ResMut","Resources","SimpleSystemStage","StageLabel","State","System","SystemError","SystemParam","SystemResult","SystemStage","SystemStages","TIME_BITS","TRUE","TRUE","TRUE","TRUE","TRUE","TypeUlid","TypeUlid","TypeUlidCollision","TypedComponentOps","TypedEcsData","ULID","UVec2","UVec3","UVec4","Ulid","UlidMap","UntypedAssetProvider","UntypedComponentBitsetIterator","UntypedComponentBitsetIteratorMut","UntypedComponentStore","UntypedHandle","UntypedResource","UntypedResourceInfo","UntypedResources","UnwrapMany","Update","Vec2","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3","Vec3A","Vec3Swizzles","Vec4","Vec4","Vec4","Vec4Swizzles","W","W","W","W","World","X","X","X","X","X","X","X","X","X","X","X","X","X","XYZ","XZY","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","YXZ","YZX","Z","Z","Z","Z","Z","Z","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZXY","ZYX","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat2","add_mat3","add_mat3","add_mat3","add_mat4","add_mat4","add_system","add_system","add_system_to_stage","all","all","all","all","all","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","any","any","any","any","any","any_orthogonal_vector","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","any_orthonormal_vector","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply","apply_bitset","apply_bitset","apply_bitset","apply_bitset","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec2","as_dvec2","as_dvec3","as_dvec3","as_dvec3","as_dvec3","as_dvec4","as_dvec4","as_dvec4","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_dyn_eq","as_f32","as_f64","as_ivec2","as_ivec2","as_ivec2","as_ivec3","as_ivec3","as_ivec3","as_ivec3","as_ivec4","as_ivec4","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_reflect_mut","as_uvec2","as_uvec2","as_uvec2","as_uvec3","as_uvec3","as_uvec3","as_uvec3","as_uvec4","as_uvec4","as_uvec4","as_vec2","as_vec2","as_vec2","as_vec3","as_vec3","as_vec3","as_vec3a","as_vec3a","as_vec3a","as_vec4","as_vec4","as_vec4","bit_all","bit_and","bit_andnot","bit_any","bit_cond","bit_count","bit_disjoint","bit_eq","bit_flip","bit_fmt","bit_init","bit_len","bit_mask","bit_none","bit_not","bit_or","bit_reset","bit_set","bit_subset","bit_superset","bit_test","bit_xor","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitset","bitset","bitset","bitset","bitset","bitset","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","ceil","ceil","ceil","cell","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clear_killed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_dynamic","clone_fn","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_type_data","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","clone_value","cmp","cmp","cmp","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col","col","col","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","components","conjugate","conjugate","contains","contains","contains","contains","contains","create","create_bitset","cross","cross","cross","cross","cross","datetime","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","debug","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dquat","drop","drop","drop_fn","dvec2","dvec3","dvec4","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_eq","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","dyn_hash","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","exp","exp","exp","exp","exp","exp","exp","extend","extend","extend","extend","extend","extend","extend","extend","extend","f32","f64","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_at_mut","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_len","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","field_mut","filter_map","filter_map","floor","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_type","fract","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_components","from_components_unsafe","from_components_unsafe","from_datetime","from_datetime_with_source","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_parts","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_reflect","from_rotation_arc","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_str","from_string","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_vec4","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_xyzw","from_xyzw","generation","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_bevy_handle","get_bevy_handle","get_bevy_handle_untyped","get_by_uuid","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_field_mut","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_many_mut","get_many_mut","get_many_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_resource","get_state","get_state","get_state","get_state","get_state","get_state","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_info","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","get_type_registration","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i32","id","id","id","id","id","impl_bitset","increment","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init_resource","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize_systems","insert","insert","insert","insert","insert","insert","insert_resource","insert_stage_after","insert_stage_before","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_bevy","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_reflect","into_untyped","into_untyped","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_alive","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_nil","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","iter","iter","iter","iter","iter","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_fields","iter_mut","iter_mut","iter_mut","iter_mut","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_mut_with_bitset","iter_with","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","iter_with_bitset","ivec2","ivec3","ivec4","key","kill","killed","label","layout","layout","length","length","length","length","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","look_to_rh","look_to_rh","maintain","map","map","mat2","mat3","mat3a","mat4","matrix2","matrix2","matrix3","matrix3","max","max","max","max","max","max","max","max","max","max","max","max","max","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","min","min","min","min","min","min","min","min","min","min","min","min","min","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat2","mul_mat3","mul_mat3","mul_mat3","mul_mat4","mul_mat4","mul_quat","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","mul_vec4","name","name","name","name","name","name","name","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","name_at","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_raw","next","next","next","next","next","next","nil","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_relative_to","not","not","not","not","not","not","not","not","not","not","not","orthographic_lh","orthographic_lh","orthographic_rh","orthographic_rh","orthographic_rh_gl","orthographic_rh_gl","partial_cmp","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","path_mut","perp","perp","perp","perp_dot","perp_dot","perp_dot","perspective_infinite_lh","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_infinite_rh","perspective_lh","perspective_lh","perspective_rh","perspective_rh","perspective_rh_gl","perspective_rh_gl","powf","powf","powf","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","project_point3","provide","quat","queue","random","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","raw_drop","recip","recip","recip","recip","recip","recip","recip","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_mut","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_owned","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_partial_eq","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reflect_ref","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","remove","remove","remove","remove","remove","remove","resource","rotate","rotate","rotate","round","round","round","round","round","round","round","row","row","row","row","row","row","row","run","run","run","run","run","run_initialized_system","run_system","select","select","select","select","select","select","select","select","select","select","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","stages","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat2","sub_mat3","sub_mat3","sub_mat3","sub_mat4","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swizzles","system","system","systems","timestamp_ms","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_scaled_axis","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","translation","translation","transpose","transpose","transpose","transpose","transpose","transpose","transpose","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","try_borrow","try_borrow_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get","try_get","try_get_by_uuid","try_get_mut","try_init","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_remove","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","typed","u32","ulid","ulid","ulid","untyped","untyped","untyped_mut","unwrap_many","uvec2","uvec3","uvec4","vec2","vec3","vec3a","vec4","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","w","w","w","w_axis","w_axis","with_core_stages","with_source","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","ww","ww","ww","ww","www","www","www","www","www","wwww","wwww","wwww","wwww","wwww","wwwx","wwwx","wwwx","wwwx","wwwx","wwwy","wwwy","wwwy","wwwy","wwwy","wwwz","wwwz","wwwz","wwwz","wwwz","wwx","wwx","wwx","wwx","wwx","wwxw","wwxw","wwxw","wwxw","wwxw","wwxx","wwxx","wwxx","wwxx","wwxx","wwxy","wwxy","wwxy","wwxy","wwxy","wwxz","wwxz","wwxz","wwxz","wwxz","wwy","wwy","wwy","wwy","wwy","wwyw","wwyw","wwyw","wwyw","wwyw","wwyx","wwyx","wwyx","wwyx","wwyx","wwyy","wwyy","wwyy","wwyy","wwyy","wwyz","wwyz","wwyz","wwyz","wwyz","wwz","wwz","wwz","wwz","wwz","wwzw","wwzw","wwzw","wwzw","wwzw","wwzx","wwzx","wwzx","wwzx","wwzx","wwzy","wwzy","wwzy","wwzy","wwzy","wwzz","wwzz","wwzz","wwzz","wwzz","wx","wx","wx","wx","wx","wxw","wxw","wxw","wxw","wxw","wxww","wxww","wxww","wxww","wxww","wxwx","wxwx","wxwx","wxwx","wxwx","wxwy","wxwy","wxwy","wxwy","wxwy","wxwz","wxwz","wxwz","wxwz","wxwz","wxx","wxx","wxx","wxx","wxx","wxxw","wxxw","wxxw","wxxw","wxxw","wxxx","wxxx","wxxx","wxxx","wxxx","wxxy","wxxy","wxxy","wxxy","wxxy","wxxz","wxxz","wxxz","wxxz","wxxz","wxy","wxy","wxy","wxy","wxy","wxyw","wxyw","wxyw","wxyw","wxyw","wxyx","wxyx","wxyx","wxyx","wxyx","wxyy","wxyy","wxyy","wxyy","wxyy","wxyz","wxyz","wxyz","wxyz","wxyz","wxz","wxz","wxz","wxz","wxz","wxzw","wxzw","wxzw","wxzw","wxzw","wxzx","wxzx","wxzx","wxzx","wxzx","wxzy","wxzy","wxzy","wxzy","wxzy","wxzz","wxzz","wxzz","wxzz","wxzz","wy","wy","wy","wy","wy","wyw","wyw","wyw","wyw","wyw","wyww","wyww","wyww","wyww","wyww","wywx","wywx","wywx","wywx","wywx","wywy","wywy","wywy","wywy","wywy","wywz","wywz","wywz","wywz","wywz","wyx","wyx","wyx","wyx","wyx","wyxw","wyxw","wyxw","wyxw","wyxw","wyxx","wyxx","wyxx","wyxx","wyxx","wyxy","wyxy","wyxy","wyxy","wyxy","wyxz","wyxz","wyxz","wyxz","wyxz","wyy","wyy","wyy","wyy","wyy","wyyw","wyyw","wyyw","wyyw","wyyw","wyyx","wyyx","wyyx","wyyx","wyyx","wyyy","wyyy","wyyy","wyyy","wyyy","wyyz","wyyz","wyyz","wyyz","wyyz","wyz","wyz","wyz","wyz","wyz","wyzw","wyzw","wyzw","wyzw","wyzw","wyzx","wyzx","wyzx","wyzx","wyzx","wyzy","wyzy","wyzy","wyzy","wyzy","wyzz","wyzz","wyzz","wyzz","wyzz","wz","wz","wz","wz","wz","wzw","wzw","wzw","wzw","wzw","wzww","wzww","wzww","wzww","wzww","wzwx","wzwx","wzwx","wzwx","wzwx","wzwy","wzwy","wzwy","wzwy","wzwy","wzwz","wzwz","wzwz","wzwz","wzwz","wzx","wzx","wzx","wzx","wzx","wzxw","wzxw","wzxw","wzxw","wzxw","wzxx","wzxx","wzxx","wzxx","wzxx","wzxy","wzxy","wzxy","wzxy","wzxy","wzxz","wzxz","wzxz","wzxz","wzxz","wzy","wzy","wzy","wzy","wzy","wzyw","wzyw","wzyw","wzyw","wzyw","wzyx","wzyx","wzyx","wzyx","wzyx","wzyy","wzyy","wzyy","wzyy","wzyy","wzyz","wzyz","wzyz","wzyz","wzyz","wzz","wzz","wzz","wzz","wzz","wzzw","wzzw","wzzw","wzzw","wzzw","wzzx","wzzx","wzzx","wzzx","wzzx","wzzy","wzzy","wzzy","wzzy","wzzy","wzzz","wzzz","wzzz","wzzz","wzzz","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","x_axis","x_axis","xw","xw","xw","xw","xw","xww","xww","xww","xww","xww","xwww","xwww","xwww","xwww","xwww","xwwx","xwwx","xwwx","xwwx","xwwx","xwwy","xwwy","xwwy","xwwy","xwwy","xwwz","xwwz","xwwz","xwwz","xwwz","xwx","xwx","xwx","xwx","xwx","xwxw","xwxw","xwxw","xwxw","xwxw","xwxx","xwxx","xwxx","xwxx","xwxx","xwxy","xwxy","xwxy","xwxy","xwxy","xwxz","xwxz","xwxz","xwxz","xwxz","xwy","xwy","xwy","xwy","xwy","xwyw","xwyw","xwyw","xwyw","xwyw","xwyx","xwyx","xwyx","xwyx","xwyx","xwyy","xwyy","xwyy","xwyy","xwyy","xwyz","xwyz","xwyz","xwyz","xwyz","xwz","xwz","xwz","xwz","xwz","xwzw","xwzw","xwzw","xwzw","xwzw","xwzx","xwzx","xwzx","xwzx","xwzx","xwzy","xwzy","xwzy","xwzy","xwzy","xwzz","xwzz","xwzz","xwzz","xwzz","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xxw","xxw","xxw","xxw","xxw","xxww","xxww","xxww","xxww","xxww","xxwx","xxwx","xxwx","xxwx","xxwx","xxwy","xxwy","xxwy","xxwy","xxwy","xxwz","xxwz","xxwz","xxwz","xxwz","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxxw","xxxw","xxxw","xxxw","xxxw","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxyw","xxyw","xxyw","xxyw","xxyw","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxzw","xxzw","xxzw","xxzw","xxzw","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xyw","xyw","xyw","xyw","xyw","xyww","xyww","xyww","xyww","xyww","xywx","xywx","xywx","xywx","xywx","xywy","xywy","xywy","xywy","xywy","xywz","xywz","xywz","xywz","xywz","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyxw","xyxw","xyxw","xyxw","xyxw","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyyw","xyyw","xyyw","xyyw","xyyw","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyzw","xyzw","xyzw","xyzw","xyzw","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xzw","xzw","xzw","xzw","xzw","xzww","xzww","xzww","xzww","xzww","xzwx","xzwx","xzwx","xzwx","xzwx","xzwy","xzwy","xzwy","xzwy","xzwy","xzwz","xzwz","xzwz","xzwz","xzwz","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzxw","xzxw","xzxw","xzxw","xzxw","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzyw","xzyw","xzyw","xzyw","xzyw","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzzw","xzzw","xzzw","xzzw","xzzw","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","y_axis","y_axis","yw","yw","yw","yw","yw","yww","yww","yww","yww","yww","ywww","ywww","ywww","ywww","ywww","ywwx","ywwx","ywwx","ywwx","ywwx","ywwy","ywwy","ywwy","ywwy","ywwy","ywwz","ywwz","ywwz","ywwz","ywwz","ywx","ywx","ywx","ywx","ywx","ywxw","ywxw","ywxw","ywxw","ywxw","ywxx","ywxx","ywxx","ywxx","ywxx","ywxy","ywxy","ywxy","ywxy","ywxy","ywxz","ywxz","ywxz","ywxz","ywxz","ywy","ywy","ywy","ywy","ywy","ywyw","ywyw","ywyw","ywyw","ywyw","ywyx","ywyx","ywyx","ywyx","ywyx","ywyy","ywyy","ywyy","ywyy","ywyy","ywyz","ywyz","ywyz","ywyz","ywyz","ywz","ywz","ywz","ywz","ywz","ywzw","ywzw","ywzw","ywzw","ywzw","ywzx","ywzx","ywzx","ywzx","ywzx","ywzy","ywzy","ywzy","ywzy","ywzy","ywzz","ywzz","ywzz","ywzz","ywzz","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yxw","yxw","yxw","yxw","yxw","yxww","yxww","yxww","yxww","yxww","yxwx","yxwx","yxwx","yxwx","yxwx","yxwy","yxwy","yxwy","yxwy","yxwy","yxwz","yxwz","yxwz","yxwz","yxwz","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxxw","yxxw","yxxw","yxxw","yxxw","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxyw","yxyw","yxyw","yxyw","yxyw","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxzw","yxzw","yxzw","yxzw","yxzw","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yyw","yyw","yyw","yyw","yyw","yyww","yyww","yyww","yyww","yyww","yywx","yywx","yywx","yywx","yywx","yywy","yywy","yywy","yywy","yywy","yywz","yywz","yywz","yywz","yywz","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyxw","yyxw","yyxw","yyxw","yyxw","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyyw","yyyw","yyyw","yyyw","yyyw","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyzw","yyzw","yyzw","yyzw","yyzw","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yzw","yzw","yzw","yzw","yzw","yzww","yzww","yzww","yzww","yzww","yzwx","yzwx","yzwx","yzwx","yzwx","yzwy","yzwy","yzwy","yzwy","yzwy","yzwz","yzwz","yzwz","yzwz","yzwz","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzxw","yzxw","yzxw","yzxw","yzxw","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzyw","yzyw","yzyw","yzyw","yzyw","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzzw","yzzw","yzzw","yzzw","yzzw","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","z","z","z","z","z","z","z","z","z","z","z_axis","z_axis","z_axis","z_axis","z_axis","zw","zw","zw","zw","zw","zww","zww","zww","zww","zww","zwww","zwww","zwww","zwww","zwww","zwwx","zwwx","zwwx","zwwx","zwwx","zwwy","zwwy","zwwy","zwwy","zwwy","zwwz","zwwz","zwwz","zwwz","zwwz","zwx","zwx","zwx","zwx","zwx","zwxw","zwxw","zwxw","zwxw","zwxw","zwxx","zwxx","zwxx","zwxx","zwxx","zwxy","zwxy","zwxy","zwxy","zwxy","zwxz","zwxz","zwxz","zwxz","zwxz","zwy","zwy","zwy","zwy","zwy","zwyw","zwyw","zwyw","zwyw","zwyw","zwyx","zwyx","zwyx","zwyx","zwyx","zwyy","zwyy","zwyy","zwyy","zwyy","zwyz","zwyz","zwyz","zwyz","zwyz","zwz","zwz","zwz","zwz","zwz","zwzw","zwzw","zwzw","zwzw","zwzw","zwzx","zwzx","zwzx","zwzx","zwzx","zwzy","zwzy","zwzy","zwzy","zwzy","zwzz","zwzz","zwzz","zwzz","zwzz","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zxw","zxw","zxw","zxw","zxw","zxww","zxww","zxww","zxww","zxww","zxwx","zxwx","zxwx","zxwx","zxwx","zxwy","zxwy","zxwy","zxwy","zxwy","zxwz","zxwz","zxwz","zxwz","zxwz","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxxw","zxxw","zxxw","zxxw","zxxw","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxyw","zxyw","zxyw","zxyw","zxyw","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxzw","zxzw","zxzw","zxzw","zxzw","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zyw","zyw","zyw","zyw","zyw","zyww","zyww","zyww","zyww","zyww","zywx","zywx","zywx","zywx","zywx","zywy","zywy","zywy","zywy","zywy","zywz","zywz","zywz","zywz","zywz","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyxw","zyxw","zyxw","zyxw","zyxw","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyyw","zyyw","zyyw","zyyw","zyyw","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyzw","zyzw","zyzw","zyzw","zyzw","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zzw","zzw","zzw","zzw","zzw","zzww","zzww","zzww","zzww","zzww","zzwx","zzwx","zzwx","zzwx","zzwx","zzwy","zzwy","zzwy","zzwy","zzwy","zzwz","zzwz","zzwz","zzwz","zzwz","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzxw","zzxw","zzxw","zzxw","zzxw","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzyw","zzyw","zzyw","zzyw","zzyw","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzzw","zzzw","zzzw","zzzw","zzzw","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","0","0","BVec2","BVec3","BVec3A","BVec4","BVec4A","w","x","x","x","y","y","y","z","z","Affine2","Affine3A","Mat2","Mat3","Mat3A","Mat4","Quat","Vec2","Vec3","Vec3A","Vec4","mat2","mat3","mat3a","mat4","matrix2","matrix3","quat","translation","translation","vec2","vec3","vec3a","vec4","w_axis","x","x","x_axis","x_axis","x_axis","y","y","y_axis","y_axis","y_axis","z","z_axis","z_axis","z_axis","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","dmat2","dmat3","dmat4","dquat","dvec2","dvec3","dvec4","matrix2","matrix3","translation","translation","w","w","w_axis","x","x","x","x","x_axis","x_axis","x_axis","y","y","y","y","y_axis","y_axis","y_axis","z","z","z","z_axis","z_axis","IVec2","IVec3","IVec4","ivec2","ivec3","ivec4","w","x","x","x","y","y","y","z","z","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","UVec2","UVec3","UVec4","uvec2","uvec3","uvec4","w","x","x","x","y","y","y","z","z","Atlas","AtlasSprite","Image","Sprite","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","atlas","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","clone_type_data","default","default","default","default","flip_x","flip_x","flip_y","flip_y","fmt","fmt","fmt","fmt","from","from","from","from","from_world","from_world","from_world","from_world","from_world","from_world","from_world","from_world","image","index","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","raw_clone","raw_clone","raw_clone","raw_clone","raw_drop","raw_drop","raw_drop","raw_drop","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ulid","ulid","ulid","ulid","vzip","vzip","vzip","vzip","Tile","TileLayer","as_any","as_any","as_any_mut","as_any_mut","atlas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_type_data","clone_type_data","default","flip_x","flip_y","fmt","fmt","from","from","from_world","from_world","get","grid_size","idx","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","raw_clone","raw_clone","raw_drop","raw_drop","set","tile_size","tiles","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ulid","ulid","vzip","vzip","Transform","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","clone_type_data","default","fmt","from","from_rotation","from_scale","from_translation","from_world","from_world","into","into_any","into_any_arc","into_any_rc","into_bevy","raw_clone","raw_drop","rotation","scale","to_owned","translation","try_from","try_into","type_id","ulid","vzip"],"q":["bones_render","","","","","","","","","bones_render::audio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::audio::AudioEvent","","bones_render::camera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::datatypes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::preludebones_render::prelude::EcsError","","bones_render::prelude::bool","","","","","","","","","","","","","","bones_render::prelude::f32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::prelude::f64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::prelude::i32","","","","","","","","","","","","","","","bones_render::prelude::swizzlesbones_render::prelude::u32","","","","","","","","","","","","","","","bones_render::sprite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::tilemap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bones_render::transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Audio components.","Camera components.","Useful data types such as <code>Key</code>.","Create a new const <code>Key</code> parsed at compile time.","Line rendering, useful for debugging.","The prelude","Sprite rendering components.","Tile map rendering components.","Transform component.","An audio event that may be sent to the <code>AudioEvents</code> …","Resource containing the audio event queue.","The audio source asset type, contains no data, but …","Play a sound.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Play a sound.","List of audio events that haven’t been handled by the …","","","","","","","Add an event to the audio event queue.","","","","","","","","","","","","","","","","","","The handle to the sound to play.","The volume to play the sound at.","","Makes an entity behave like a camera.","Resource for controlling the clear color.","Whether or not the camera is enabled and rendering.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","The height of the camera in in-game pixels.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","A small ascii byte array stored on the stack and used …","An error that may be caused when creating a <code>Key</code>.","The key is not ASCII.","The key is too long.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a <code>Key</code> from a string.","","","","","","","","","","","","","","","","","","","A component for rendering a 2D line path, made up of a …","","","","","","","","The color of the path.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","List of indexes into the <code>points</code> vector, for which that …","The list of points in the path","","","The thickness of the line.","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The requested resource is already borrowed.","A path to an asset.","Trait for asset providers.","A mutable borrow of an <code>AssetProvider</code>.","A borrow of an <code>AssetProvider</code>.","A resource that may be used to access <code>AssetProvider</code>s for …","The type of the <code>AssetProviders</code> resource.","A typed, wrapper handle around <code>UntypedComponentStore</code> that …","A read-only borrow of <code>AtomicComponentStore</code>.","A mutable borrow of <code>AtomicComponentStore</code>.","A wrapper type for an immutably borrowed value from an …","A threadsafe analogue to RefCell.","A wrapper type for a mutably borrowed value from an …","A handle to a resource from a <code>Resources</code> collection.","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","BitSet formatter.","The BitSet API.","The type of bitsets used to track entities in component …","An error returned by <code>AtomicRefCell::try_borrow</code>.","An error returned by <code>AtomicRefCell::try_borrow_mut</code>.","A resource containing the <code>Commands</code> command queue.","A <code>SystemParam</code> that can be used to schedule systems that …","<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.","<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.","Read-only iterator over components matching a given bitset","Mutable iterator over components matching a given bitset","A typed wrapper around <code>UntypedComponentStore</code>.","A collection of <code>ComponentStore&lt;T&gt;</code>.","A <code>StageLabel</code> for the 5 core stages.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Implements <code>Deref</code> for <em>single-item</em> structs. This is …","Implements <code>DerefMut</code> for <em>single-item</em> structs. This is …","The execution of the dispatcher failed and returned one or …","Helper trait that is auto-implemented for anything that …","The types of errors used throughout the ECS.","Holds a list of alive entities.","Iterator over entities returned by <code>Entities::iter_with</code>.","An entity index.","Iterator over entities using the provided bitset.","Euler rotation sequences.","All false.","All false.","All false.","All false.","All false.","The first stage","Creates an instance of the type this trait is implemented …","A typed handle to an asset.","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Converts a function into a <code>System</code>.","The type of iterator this query item creates","The fifth stage","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A resource was not initialized in the <code>World</code> but the <code>System</code> …","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","The type of the parameter, ranging over the lifetime of …","The fourth stage","The second stage","A quaternion representing an orientation.","A type representing a component-joining entity query.","The number of bits in a Ulid’s random portion","Helper trait that is auto-implemented for all <code>Clone</code>-able …","<code>SystemParam</code> for getting read access to a resource.","Type alias for getting the <code>AssetProviders</code> resource.","<code>SystemParam</code> for getting mutable access to a resource.","A collection of resources.","A collection of systems that will be run in order.","Trait for things that may be used to identify a system …","The intermediate state for the parameter, that may be …","Struct used to run a system function using the world.","This variant is for user-defined errors.","Trait used to implement parameters for <code>System</code> functions.","The result of a <code>System</code>’s execution.","Trait for system stages. A stage is a","An ordered collection of <code>SystemStage</code>s.","The number of bits in a Ulid’s time portion","All true.","All true.","All true.","All true.","All true.","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","This happens when two Rust types have the same <code>TypeUlid</code>, …","Implements typed operations on top of a …","Helper trait that is auto-implemented for anything that …","The type’s <code>Ulid</code>.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A Ulid is a unique 128-bit lexicographically sortable …","Faster hash map using <code>FxHashMap</code> and a ULID key.","Trait implemented for asset providers that can return …","Iterates over components using a provided bitset. Each …","Iterates over components using a provided bitset. Each …","Holds components of a given type indexed by <code>Entity</code>.","An untyped handle to an asset.","An untyped resource that may be inserted into …","Used to construct an <code>UntypedResource</code>.","Storage for un-typed resources.","Helper trait for unwraping each item in an array.","The third stage","A 2-dimensional vector.","","","","A 3-dimensional vector.","","","A 3-dimensional vector with SIMD support.","","A 4-dimensional vector with SIMD support.","","","","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","The <code>World</code> is simply a collection of <code>Resources</code>, and …","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Add an asset provider for a specific asset type.","Add a system to be run at the end of the stage.","","","","","","","","","Adds two quaternions.","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Adds two 4x4 matrices.","Add a system to this stage.","","Add a <code>System</code> to the stage with the given label.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Modify the iteration bitsetasts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a raw pointer to the underlying data in this cell.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Returns if all bits are set.","Bitwise AND.","Bitwise AND after NOT of rhs.","Returns if any bits are set.","Conditionally sets or resets the given bit.","Counts the number of set bits.","Returns if the two bitsets have no bits in common.","Returns if the two bitsets are equal.","Flips the given bit.","Format the bits.","Initializes all bits.","Returns total number of bits.","Bitwise combine with MASK.","Returns if none of the bits are set.","Bitwise NOT.","Bitwise OR.","Resets the given bit.","Sets the given bit.","Returns if self is a subset of rhs.","Returns if self is a superset of rhs.","Returns if the given bit is set.","Bitwise XOR.","","","","","","","","","","","","","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","Shorthand for combining bitsets with bit_or.","","","","","","Read the bitset containing the list of entites with this …","Read the bitset containing the list of entites with this …","Get the bitset representing which entities have this …","Returns the bitset indicating which entity indices have a …","Returns a bitset where each index where the bit is set to …","Shorthand for setting bits on the bitset container.","","","","","","","","","","","","","","","","","","","","","","","<code>bool</code> vector mask types. ","This is used create an instance of the system parame, …","","Immutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lock the resource for reading.","","","","","","","","","","","Borrow the component store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lock the resource for read-writing.","","","","","","","","Mutably borrow the component store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Cell containing the raw pointer to the resource’s data","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Clears the killed entity list.","","Copies an <code>AtomicRef</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function that may be called to clone the resource from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Stores the world components.","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not this component store has data for the …","Check whether or not the bitset contains the given entity.","Check whether or not a resource is in the store.","Creates a new <code>Entity</code> and returns it.","Creates a bitset big enough to contain the index of each …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Gets the datetime of when this Ulid was created accurate …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Free-standing, shorter equivalent to <code>Default::default()</code>.","","","","","","","","","","","","","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","An optional function that will be called to drop the …","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a new <code>AtomicRef</code> for an optional component of the …","Make a new <code>AtomicRefMut</code> for an optional component of the …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an <code>UntypedComponentStore</code> that is valid for the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Create a new <code>ComponentStore&lt;T&gt;</code> by wrapping an …","Safety","Creates a new Ulid with the given datetime","Creates a new Ulid with the given datetime and random …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Create a Ulid from separated parts.","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","Creates a Ulid from a Crockford Base32 encoded string","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion from a 4D vector.","Creates <code>Self</code> using data from the given <code>World</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new rotation quaternion.","Creates a new rotation quaternion.","Returns the generation of this <code>Entity</code>.","Returns a read-only pointer to the asset for the given …","Get a reference to an asset, if it exists in the store.","","Get an asset, given it’s handle","Get an asset, given it’s handle","Borrow a component in the store, if it exists for the …","Gets an immutable reference to the component of <code>Entity</code>.","Get the asset provider for the given type","Gets an immutable reference to the component of <code>Entity</code>.","Gets an immutable reference to the component of <code>Entity</code>.","Get a read-only pointer to the component for the given …","Get the components of a certain type","Get a cell containing the resource data pointer for the …","Get a resource handle from the store.","Get a Bevy weak <code>Handle</code> from from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get a Bevy weak <code>HandleUntyped</code> from this bones asset handle.","Get the untyped component storage by the component’s UUID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Get mutable pointers to the component data for multiple …","Returns a mutable-only pointer to the asset for the given …","Get a mutable reference to an asset, if it exists in the …","Returns a mutable reference to the wrapped value.","","Get an asset, given it’s handle","Mutably borrow a component in the store, if it exists for …","Gets a mutable reference to the component of <code>Entity</code>.","Get the asset provider for the given type","Gets a mutable reference to the component of <code>Entity</code>.","Get a mutable pointer to the component for the given <code>Entity</code>","Gets a resource handle from the store if it exists.","This is called to produce the intermediate state of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>i32</code> vector types. ","The unique identifier for the stage.","Returns a unique identifier for the stage.","","","The unique identifier for the stage.","Implements the <code>BitSet</code> trait members for your type through …","Increment the random number, make sure that the ts millis …","Returns the index of this <code>Entity</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize component storage for type <code>T</code>.","Initialize a resource of type <code>T</code> by inserting it’s …","Initialize the contained systems for the given <code>world</code>.","This will be called to give the parameter a chance to …","","","","Initializes the resources required to run this system …","","","","This should be called once to initialize the system, …","Initialize the systems in the stages agains the <code>World</code>.","Insert a component into the store.","Inserts a component for the given <code>Entity</code> index. Returns …","Inserts a component for the given <code>Entity</code> index.","Returns true if the entity already had a component of this …","Insert a new resource","Insert a resource.","Insert a resource.","Insert a new stage, after another existing stage","Insert a new stage, before another existing stage","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeonsumes the <code>AtomicRefCell</code>, returning the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to the internal, untyped <code>ComponentStore</code>.","Consume <code>Resources</code> and extract the underlying …","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Checks if the <code>Entity</code> is still alive.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Test if the Ulid is nil","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","","","","","","","","","","","","","","","","","","","","","Iterate over all components in the store.","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type. Very …","Iterates immutably over all components of this type.","Iterates immutably over all components of this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably iterate over all components in the store.","Iterates mutably over all components of this type. Very …","Iterates mutably over all components of this type.","Iterates mutably over all components of this type.","Mutably iterate over all the components in the store that …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterates mutable over the components of this type where …","Iterate over the entities and components in the given …","Return an iterator over the provided bitset.","Iterate over all the components in the store that match …","Iterates immutably over the components of this type where …","Iterates immutably over the components of this type where …","","Iterates immutably over the components of this type where …","","","Iterates immutably over the components of this type where …","Iterates over entities using the provided bitset.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Kill an entity.","Returns entities in the killed list.","The optional sub-asset label","Get the layout of the components stored.","The memory layout of the resource","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Remove the component info for dead entities.","Make a new <code>AtomicRef</code> for a component of the borrowed data.","Make a new <code>AtomicRefMut</code> for a component of the borrowed …","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies a quaternion and a 3D vector, returning the …","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion and a 3D vector, returning the …","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","Transforms a 4D vector.","The human-readable name for the stage, used for error …","Returns the human-readable name of the label, used in …","","Returns the underlying type name of the system.","","The human-readable name for the stage, used for error …","A best-effort name for the system, for diagnostic purposes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>AtomicRefCell</code> containing <code>value</code>.","Safety","Create a new asset path.","Creates a new Ulid with the current time (UTC)","Create a new asset handle, from it’s path and label.","Create a new handle from it’s path and label.","Create a arbitrary <code>UntypedComponentStore</code>.","Creates a new <code>UntypedResource</code> from an instance of a Rust …","Create a new, empty stage, for the given label.","Creates a new <code>Entity</code> from the provided index and …","Create an empty <code>UntypedResources</code>.","Create an empty <code>Resources</code>.","Create a new <code>World</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Create a new <code>UntypedResource</code> from raw <code>UntypedResourceInfo</code>.","","","","","","","The ‘nil Ulid’.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Take this path, treat it as a path relative to <code>base_path</code>, …","","","","","","","","","","","","Creates a left-handed orthographic projection matrix with …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The virtual filesystem path","The <code>AssetPath</code> for the asset.","The unique identifier of the asset this handle represents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Transforms the given 3D vector as a point, applying …","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","The system queue that will be run at the end of the stage","Gets the random section of this ulid","Clone the value at <code>src</code>, writing the new value to <code>dst</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drop the value at <code>ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Remove a component from an entity, returning the previous …","Removes the component of <code>Entity</code>. Returns <code>Some(T)</code> if the …","Remove an asset provider.","Removes the component of <code>Entity</code>.","If there is a previous value, <code>true</code> will be returned.","Remove a resource","Get a resource handle from the store.","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Execute the systems on the given <code>world</code>.","Execute the systems on the given <code>world</code>.","","Runs the system’s function using the provided <code>World</code>","This is run every time the system is executed","Run a system once, assuming any necessary initialization …","Run a system once.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","The stages in the collection, in the order that they will …","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traits adding swizzle methods to all vector types. ","Convert into a <code>System</code>.","","The list of systems in the stage.","Gets the timestamp section of this ulid","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","Returns the rotation axis scaled by the rotation in …","Creates a Crockford Base32 encoded string that represents …","","","","Creates a Crockford Base32 encoded string that represents …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Attempts to immutably borrow the wrapped value, but …","Attempts to mutably borrow the wrapped value, but instead …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the asset provider for the given asset type, if it …","Get the components of a certain type","Gets a resource handle from the store if it exists.","Get the untyped component storage by the component’s UUID","Get the asset provider for the given asset type, if it …","Initialize component storage for type <code>T</code>.","Try to insert a resource.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Remove an asset provider.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a typed <code>Handle&lt;T&gt;</code> from this <code>UntypedHandle</code>.","<code>u32</code> vector types. ","","","","Convert the handle to an <code>UntypedHandle</code>.","Borrow the underlying <code>UntypedResources</code> store.","Mutably borrow the underlying <code>UntypedResources</code> store.","Unwrap all the items in an array.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>SystemStages</code> collection, initialized with a stage …","Creates a new Ulid using data from the given random number …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternion.","","","Returns the vector part of the quaternion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector with SIMD support.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vectordimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","An atlas image asset type, contains no data, but …","An animated sprite component.","Image asset type, contains no data, but <code>Handle&lt;Image&gt;</code> is …","A 2D sprite component","","","","","","","","","The atlas handle.","","","","","","","","","","","","","","","","","","","","","","","","","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite horizontally.","Whether or not the flip the sprite vertically.","Whether or not the flip the sprite vertically.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","The sprite image handle.","This is the current index in the animation, with an <code>idx</code> of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Create a new <code>AtlasSprite</code> from the given atlas handle.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tilemap tile component.","A tilemap layer component.","","","","","The texture atlas to use for the layer","","","","","","","","","","","","Whether or not to flip the tile horizontally.","Whether or not to flip tile vertically.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Get’s the tile at the given position in the layer, …","The size of the layer in tiles.","The tile index in the tilemap texture.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a new tile layer","","","","","Set the tile at the given position, to a certain entity.","The size of each tile in the layer.","The vector of tile slots in this layer.","","","","","","","","","","","","","The main transform component.","","","","","","","","","","Returns the argument unchanged.","Create a transform from a rotation.","Create a transform from a scale.","Create a transform from a translation.","","","Calls <code>U::from(self)</code>.","","","","","","","The rotation of the entity.","The scale of the entity.","","The position of the entity in the world.","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],3],[[2,8],9],[[3,8],9],[[4,8],9],[[]],[[]],[[]],[10],[11],[[]],[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[[3,[14,[2]],15]],0,[[16,16]],[[16,16]],[[16,16]],[16],[16],[16],[[3,4]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],19],[[],19],[[]],[[]],[[]],0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[20,20],[21,21],[[]],[[]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],20],[[],21],[21],[21],[[20,8],9],[[]],[[]],[10],[11],[11],[10],0,[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[[16,16]],[[16,16]],[16],[16],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],19],[[],19],[[]],[[]],0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],22],[[]],[[]],[[]],[[]],[23,23],[24,24],[[]],[[]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],23],[22,25],[26],[[23,23],25],[[23,8],9],[[23,8],9],[[24,8],9],[[24,8],9],[[]],[[]],[11],[10],[[],27],[23],[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[28,[[17,[23,24]]]],[29],[[16,16]],[[16,16]],[16],[16],[[]],[[]],[[],30],[[],30],[28,[[17,[23]]]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[]],[[]],0,[[],1],[[],1],[[]],[[]],[31,31],[[]],[[],[[7,[5,6]]]],0,[[],31],[[31,8],9],[[]],[10],[11],[[]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],0,0,[[16,16]],[16],0,[[]],[[],17],[[],17],[[],18],[[],19],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[42,42,15],25],[[43,43,15],25],[[44,44,15],25],[[32,32,15],25],[[33,33,15],25],[[45,45,15],25],[[46,46,15],25],[[47,47,15],25],[[48,48,15],25],[[34,34,15],25],[[35,35,15],25],[[49,49,50],25],[[51,51,50],25],[[52,52,50],25],[[53,53,50],25],[[54,54,50],25],[[55,55,50],25],[[36,36,50],25],[[37,37,50],25],[[38,38,50],25],[56],[57],[[44,44]],[[32,32],32],[[32,15],32],[[33,15],33],[[33,33],33],[[45,45]],[[46,46]],[[47,47]],[[48,48],48],[[34,34],34],[[34,15],34],[[35,15],35],[[35,35],35],[[52,52]],[[53,53]],[[54,54]],[[55,55],55],[[36,36],36],[[36,50],36],[[37,50],37],[[37,37],37],[[38,38],38],[[38,50],38],[[39,39],39],[[39,58],39],[[40,40],40],[[40,58],40],[[41,41],41],[[41,58],41],[[59,60],59],[[59,59],59],[[61,61],61],[[61,60],61],[[62,60],62],[[62,62],62],[[44,44]],[[32,32]],[[32,15]],[[33,33]],[[33,15]],[[45,45]],[[46,46]],[[47,47]],[[34,15]],[[34,34]],[[35,35]],[[35,15]],[[52,52]],[[53,53]],[[54,54]],[[36,50]],[[36,36]],[[37,50]],[[37,37]],[[38,38]],[[38,50]],[[39,58]],[[39,39]],[[40,40]],[[40,58]],[[41,41]],[[41,58]],[[59,60]],[[59,59]],[[61,60]],[[61,61]],[[62,62]],[[62,60]],[[45,45],45],[[52,52],52],[[44,44],44],[[46,46],46],[[53,53],53],[[47,47],47],[[54,54],54],[63],[[64,63]],[65,65],[66,25],[67,25],[68,25],[69,25],[70,25],[[32,32],15],[[33,33],15],[[48,48],15],[[34,34],15],[[55,55],50],[[36,36],50],[[37,37],50],[66,25],[67,25],[68,25],[69,25],[70,25],[33,33],[34,34],[37,37],[33],[34],[37],[33,33],[34,34],[37,37],[[71,72]],[[66,72]],[[67,72]],[[68,72]],[[69,72]],[[70,72]],[[42,72]],[[43,72]],[[44,72]],[[32,72]],[[33,72]],[[45,72]],[[46,72]],[[47,72]],[[48,72]],[[34,72]],[[35,72]],[[49,72]],[[51,72]],[[52,72]],[[53,72]],[[54,72]],[[55,72]],[[36,72]],[[37,72]],[[38,72]],[[39,72]],[[40,72]],[[41,72]],[[59,72]],[[61,72]],[[62,72]],[73],[[74,73]],[[75,73]],[[75,73]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[71,1],[[],1],[[],1],[66,1],[[],1],[[],1],[67,1],[[],1],[[],1],[[],1],[[],1],[68,1],[[],1],[[],1],[69,1],[70,1],[[],1],[[],1],[42,1],[[],1],[43,1],[[],1],[44,1],[[],1],[[],1],[32,1],[[],1],[33,1],[[],1],[45,1],[[],1],[46,1],[47,1],[[],1],[[],1],[48,1],[34,1],[[],1],[[],1],[35,1],[49,1],[[],1],[51,1],[[],1],[52,1],[[],1],[[],1],[53,1],[[],1],[54,1],[55,1],[[],1],[[],1],[36,1],[37,1],[[],1],[38,1],[[],1],[[],1],[[],1],[39,1],[[],1],[40,1],[[],1],[[],1],[41,1],[[],1],[[],1],[[],1],[59,1],[61,1],[[],1],[[],1],[[],1],[[],1],[62,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[71,1],[[],1],[66,1],[[],1],[67,1],[[],1],[68,1],[[],1],[69,1],[[],1],[70,1],[[],1],[[],1],[42,1],[[],1],[43,1],[44,1],[[],1],[[],1],[32,1],[[],1],[33,1],[[],1],[45,1],[[],1],[46,1],[[],1],[47,1],[48,1],[[],1],[[],1],[34,1],[[],1],[35,1],[49,1],[[],1],[51,1],[[],1],[52,1],[[],1],[[],1],[53,1],[[],1],[54,1],[55,1],[[],1],[[],1],[36,1],[37,1],[[],1],[[],1],[38,1],[[],1],[39,1],[[],1],[40,1],[41,1],[[],1],[[],1],[59,1],[61,1],[[],1],[[],1],[62,1],[45,52],[44,53],[46,53],[47,54],[32,36],[39,36],[59,36],[33,37],[34,37],[40,37],[61,37],[35,38],[41,38],[62,38],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[55,48],[48,55],[32,39],[36,39],[59,39],[33,40],[34,40],[37,40],[61,40],[35,41],[38,41],[62,41],[52,45],[53,44],[54,47],[44],[32],[33],[45],[47],[34],[35],[52],[53],[54],[36],[37],[38],[39],[40],[41],[59],[61],[62],[76],[44],[32],[33],[45],[47],[48],[34],[35],[52],[53],[54],[55],[36],[37],[38],[39],[40],[41],[59],[61],[62],[71,72],[66,72],[67,72],[68,72],[69,72],[70,72],[42,72],[43,72],[44,72],[32,72],[33,72],[45,72],[46,72],[47,72],[48,72],[34,72],[35,72],[49,72],[51,72],[52,72],[53,72],[54,72],[55,72],[36,72],[37,72],[38,72],[39,72],[40,72],[41,72],[59,72],[61,72],[62,72],[71,72],[66,72],[67,72],[68,72],[69,72],[70,72],[42,72],[43,72],[44,72],[32,72],[33,72],[45,72],[46,72],[47,72],[48,72],[34,72],[35,72],[49,72],[51,72],[52,72],[53,72],[54,72],[55,72],[36,72],[37,72],[38,72],[39,72],[40,72],[41,72],[59,72],[61,72],[62,72],[32,59],[36,59],[39,59],[33,61],[34,61],[37,61],[40,61],[35,62],[38,62],[41,62],[36,32],[39,32],[59,32],[37,33],[40,33],[61,33],[37,34],[40,34],[61,34],[38,35],[41,35],[62,35],[[],25],[[]],[[]],[[],25],[[77,25]],[[],77],[[],25],[[],25],[77],[[],78],[25],[[],77],[[]],[[],25],[[]],[[]],[77],[77],[[],25],[[],25],[77,25],[[]],[[66,66],66],[[67,67],67],[[68,68],68],[[69,69],69],[[70,70],70],[[39,58]],[[39,39]],[[40,58]],[[40,40]],[[41,58]],[[41,41]],[[59,59]],[[59,60]],[[61,61]],[[61,60]],[[62,62]],[[62,60]],[[66,66]],[[67,67]],[[68,68]],[[69,69]],[[70,70]],[66,60],[67,60],[68,60],[69,60],[70,60],[[66,66],66],[[67,67],67],[[68,68],68],[[69,69],69],[[70,70],70],[[39,39]],[[39,58]],[[40,40]],[[40,58]],[[41,58]],[[41,41]],[[59,60]],[[59,59]],[[61,60]],[[61,61]],[[62,62]],[[62,60]],0,[[66,66]],[[67,67]],[[68,68]],[[69,69]],[[70,70]],[79,73],[74,73],[75,73],[80,73],[81,73],0,[[66,66],66],[[67,67],67],[[68,68],68],[[69,69],69],[[70,70],70],[[39,58]],[[39,39]],[[40,58]],[[40,40]],[[41,58]],[[41,41]],[[59,60]],[[59,59]],[[61,60]],[[61,61]],[[62,60]],[[62,62]],[[66,66]],[[67,67]],[[68,68]],[[69,69]],[[70,70]],0,[[]],[[]],[76,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,74],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],0,[[32,32,32],32],[[33,33,33],33],[[34,34,34],34],[[35,35,35],35],[[36,36,36],36],[[37,37,37],37],[[38,38,38],38],[[39,39,39],39],[[40,40,40],40],[[41,41,41],41],[[59,59,59],59],[[61,61,61],61],[[62,62,62],62],[[32,15,15],32],[[33,15,15],33],[[34,15,15],34],[[35,15,15],35],[[36,50,50],36],[[37,50,50],37],[[38,50,50],38],[[32,15],32],[[33,15],33],[[34,15],34],[[35,15],35],[[36,50],36],[[37,50],37],[[38,50],38],[[32,15],32],[[33,15],33],[[34,15],34],[[35,15],35],[[36,50],36],[[37,50],37],[[38,50],38],[81],[76,76],[82,82],[86,86],[87,87],[19,19],[14,14],[88,88],[80,80],[89,89],[73,73],[84,84],[90,90],[91,91],[81,81],[92,92],[93,93],[94,94],[57,57],[10,10],[71,71],[66,66],[67,67],[68,68],[69,69],[70,70],[42,42],[43,43],[44,44],[32,32],[33,33],[45,45],[46,46],[47,47],[48,48],[34,34],[35,35],[49,49],[51,51],[52,52],[53,53],[54,54],[55,55],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[59,59],[61,61],[62,62],[66,95],[67,95],[68,95],[42,95],[43,95],[44,95],[32,95],[33,95],[45,95],[46,95],[47,95],[34,95],[35,95],[49,95],[51,95],[52,95],[53,95],[54,95],[36,95],[37,95],[38,95],[39,95],[40,95],[41,95],[59,95],[61,95],[62,95],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[71,[[7,[72,6]]]],[66,[[7,[72,6]]]],[67,[[7,[72,6]]]],[68,[[7,[72,6]]]],[69,[[7,[72,6]]]],[70,[[7,[72,6]]]],[42,[[7,[72,6]]]],[43,[[7,[72,6]]]],[44,[[7,[72,6]]]],[32,[[7,[72,6]]]],[33,[[7,[72,6]]]],[45,[[7,[72,6]]]],[46,[[7,[72,6]]]],[47,[[7,[72,6]]]],[48,[[7,[72,6]]]],[34,[[7,[72,6]]]],[35,[[7,[72,6]]]],[49,[[7,[72,6]]]],[51,[[7,[72,6]]]],[52,[[7,[72,6]]]],[53,[[7,[72,6]]]],[54,[[7,[72,6]]]],[55,[[7,[72,6]]]],[36,[[7,[72,6]]]],[37,[[7,[72,6]]]],[38,[[7,[72,6]]]],[39,[[7,[72,6]]]],[40,[[7,[72,6]]]],[41,[[7,[72,6]]]],[59,[[7,[72,6]]]],[61,[[7,[72,6]]]],[62,[[7,[72,6]]]],[[76,76],96],[[19,19],96],[[91,91],96],[[32,32],66],[[33,33],67],[[34,34],69],[[35,35],70],[[36,36],66],[[37,37],67],[[38,38],68],[[39,39],66],[[40,40],67],[[41,41],68],[[59,59],66],[[61,61],67],[[62,62],68],[[32,32],66],[[33,33],67],[[34,34],69],[[35,35],70],[[36,36],66],[[37,37],67],[[38,38],68],[[39,39],66],[[40,40],67],[[41,41],68],[[59,59],66],[[61,61],67],[[62,62],68],[[32,32],66],[[33,33],67],[[34,34],69],[[35,35],70],[[36,36],66],[[37,37],67],[[38,38],68],[[39,39],66],[[40,40],67],[[41,41],68],[[59,59],66],[[61,61],67],[[62,62],68],[[32,32],66],[[33,33],67],[[34,34],69],[[35,35],70],[[36,36],66],[[37,37],67],[[38,38],68],[[39,39],66],[[40,40],67],[[41,41],68],[[59,59],66],[[61,61],67],[[62,62],68],[[32,32],66],[[33,33],67],[[34,34],69],[[35,35],70],[[36,36],66],[[37,37],67],[[38,38],68],[[39,39],66],[[40,40],67],[[41,41],68],[[59,59],66],[[61,61],67],[[62,62],68],[[32,32],66],[[33,33],67],[[34,34],69],[[35,35],70],[[36,36],66],[[37,37],67],[[38,38],68],[[39,39],66],[[40,40],67],[[41,41],68],[[59,59],66],[[61,61],67],[[62,62],68],[[44,77],33],[[45,77],32],[[46,77],34],[[47,77],35],[[52,77],36],[[53,77],37],[[54,77],38],[[44,77],33],[[45,77],32],[[46,77],34],[[47,77],35],[[52,77],36],[[53,77],37],[[54,77],38],0,[48,48],[55,55],[[79,91],25],[[74,91],25],[[75,91],25],[[73,91],25],[93,25],[81,91],[[],73],[[33,33],33],[[34,34],34],[[37,37],37],[[40,40],40],[[61,61],61],[19,97],[[71,8],[[17,[98]]]],[[66,8],[[17,[98]]]],[[67,8],[[17,[98]]]],[[68,8],[[17,[98]]]],[[69,8],[[17,[98]]]],[[70,8],[[17,[98]]]],[[42,8],[[17,[98]]]],[[43,8],[[17,[98]]]],[[44,8],[[17,[98]]]],[[32,8],[[17,[98]]]],[[33,8],[[17,[98]]]],[[45,8],[[17,[98]]]],[[46,8],[[17,[98]]]],[[47,8],[[17,[98]]]],[[48,8],[[17,[98]]]],[[34,8],[[17,[98]]]],[[35,8],[[17,[98]]]],[[49,8],[[17,[98]]]],[[51,8],[[17,[98]]]],[[52,8],[[17,[98]]]],[[53,8],[[17,[98]]]],[[54,8],[[17,[98]]]],[[55,8],[[17,[98]]]],[[36,8],[[17,[98]]]],[[37,8],[[17,[98]]]],[[38,8],[[17,[98]]]],[[39,8],[[17,[98]]]],[[40,8],[[17,[98]]]],[[41,8],[[17,[98]]]],[[59,8],[[17,[98]]]],[[61,8],[[17,[98]]]],[[62,8],[[17,[98]]]],[[]],[[],76],[[],79],[[],56],[[],86],[[],87],[[],19],[[],14],[[],88],[[],73],[[],84],[[],90],[[],81],[[],92],[[],93],[[],57],[[],10],[[],71],[[],66],[[],67],[[],68],[[],69],[[],70],[[],42],[[],43],[[],44],[[],32],[[],33],[[],45],[[],46],[[],47],[[],48],[[],34],[[],35],[[],49],[[],51],[[],52],[[],53],[[],54],[[],55],[[],36],[[],37],[[],38],[[],39],[[],40],[[],41],[[],59],[[],61],[[],62],[82],[85],[86],[99],[100],[73],[101],[42],[43],[45],[48],[34],[35],[49],[51],[85],[86],[100],[73],[101],[42],[43],[45],[48],[34],[35],[49],[51],[[],[[17,[14]]]],[[],[[17,[88]]]],[[],[[17,[71]]]],[[],[[17,[66]]]],[[],[[17,[67]]]],[[],[[17,[68]]]],[[],[[17,[69]]]],[[],[[17,[70]]]],[[],[[17,[42]]]],[[],[[17,[43]]]],[[],[[17,[44]]]],[[],[[17,[32]]]],[[],[[17,[33]]]],[[],[[17,[45]]]],[[],[[17,[46]]]],[[],[[17,[47]]]],[[],[[17,[48]]]],[[],[[17,[34]]]],[[],[[17,[35]]]],[[],[[17,[49]]]],[[],[[17,[51]]]],[[],[[17,[52]]]],[[],[[17,[53]]]],[[],[[17,[54]]]],[[],[[17,[55]]]],[[],[[17,[36]]]],[[],[[17,[37]]]],[[],[[17,[38]]]],[[],[[17,[39]]]],[[],[[17,[40]]]],[[],[[17,[41]]]],[[],[[17,[59]]]],[[],[[17,[61]]]],[[],[[17,[62]]]],[44,15],[45,15],[46,15],[47,15],[52,50],[53,50],[54,50],[[32,32],15],[[33,33],15],[[34,34],15],[[35,35],15],[[36,36],50],[[37,37],50],[[38,38],50],[[32,32],15],[[33,33],15],[[34,34],15],[[35,35],15],[[36,36],50],[[37,37],50],[[38,38],50],[[32,32],32],[[32,15],32],[[33,15],33],[[33,33],33],[[48,15],48],[[34,34],34],[[34,15],34],[[35,35],35],[[35,15],35],[[55,50],55],[[36,36],36],[[36,50],36],[[37,37],37],[[37,50],37],[[38,50],38],[[38,38],38],[[39,39],39],[[39,58],39],[[40,40],40],[[40,58],40],[[41,41],41],[[41,58],41],[[59,59],59],[[59,60],59],[[61,61],61],[[61,60],61],[[62,62],62],[[62,60],62],[[32,32]],[[32,15]],[[33,15]],[[33,33]],[[34,15]],[[34,34]],[[35,15]],[[35,35]],[[36,36]],[[36,50]],[[37,37]],[[37,50]],[[38,38]],[[38,50]],[[39,58]],[[39,39]],[[40,40]],[[40,58]],[[41,41]],[[41,58]],[[59,59]],[[59,60]],[[61,61]],[[61,60]],[[62,62]],[[62,60]],[[36,36],52],[[37,37,37],53],[[38,38,38,38],54],[[32,32],15],[[33,33],15],[[48,48],15],[[34,34],15],[[35,35],15],[[55,55],50],[[36,36],50],[[37,37],50],[[38,38],50],[[39,39],58],[[40,40],58],[[41,41],58],[[59,59],60],[[61,61],60],[[62,62],60],[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[41,41],41],[[59,59],59],[[61,61],61],[[62,62],62],[[50,50,50,50],55],[80],[89],0,[[50,50],36],[[50,50,50],37],[[50,50,50,50],38],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[22,25],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[26],[[76,76],25],[[87,87],25],[[19,19],25],[[14,14],25],[[88,88],25],[[91,91],25],[[71,71],25],[[66,66],25],[[67,67],25],[[68,68],25],[[69,69],25],[[70,70],25],[[42,42],25],[[43,43],25],[[44,44],25],[[32,32],25],[[33,33],25],[[45,45],25],[[46,46],25],[[47,47],25],[[48,48],25],[[34,34],25],[[35,35],25],[[49,49],25],[[51,51],25],[[52,52],25],[[53,53],25],[[54,54],25],[[55,55],25],[[36,36],25],[[37,37],25],[[38,38],25],[[39,39],25],[[40,40],25],[[41,41],25],[[59,59],25],[[61,61],25],[[62,62],25],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[102,[[17,[103,104]]]],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[32,15],33],[[33,15],35],[[34,15],35],[[36,50],37],[[37,50],38],[[39,58],40],[[40,58],41],[[59,60],61],[[61,60],62],0,0,[[66,28],[[105,[72]]]],[[67,28],[[105,[72]]]],[[68,28],[[105,[72]]]],[[42,28],[[105,[72]]]],[[43,28],[[105,[72]]]],[[44,28],[[105,[72]]]],[[32,28],[[105,[72]]]],[[33,28],[[105,[72]]]],[[45,28],[[105,[72]]]],[[46,28],[[105,[72]]]],[[47,28],[[105,[72]]]],[[34,28],[[105,[72]]]],[[35,28],[[105,[72]]]],[[49,28],[[105,[72]]]],[[51,28],[[105,[72]]]],[[52,28],[[105,[72]]]],[[53,28],[[105,[72]]]],[[54,28],[[105,[72]]]],[[36,28],[[105,[72]]]],[[37,28],[[105,[72]]]],[[38,28],[[105,[72]]]],[[39,28],[[105,[72]]]],[[40,28],[[105,[72]]]],[[41,28],[[105,[72]]]],[[59,28],[[105,[72]]]],[[61,28],[[105,[72]]]],[[62,28],[[105,[72]]]],[[66,77],[[105,[72]]]],[[67,77],[[105,[72]]]],[[68,77],[[105,[72]]]],[[42,77],[[105,[72]]]],[[43,77],[[105,[72]]]],[[44,77],[[105,[72]]]],[[32,77],[[105,[72]]]],[[33,77],[[105,[72]]]],[[45,77],[[105,[72]]]],[[46,77],[[105,[72]]]],[[47,77],[[105,[72]]]],[[34,77],[[105,[72]]]],[[35,77],[[105,[72]]]],[[49,77],[[105,[72]]]],[[51,77],[[105,[72]]]],[[52,77],[[105,[72]]]],[[53,77],[[105,[72]]]],[[54,77],[[105,[72]]]],[[36,77],[[105,[72]]]],[[37,77],[[105,[72]]]],[[38,77],[[105,[72]]]],[[39,77],[[105,[72]]]],[[40,77],[[105,[72]]]],[[41,77],[[105,[72]]]],[[59,77],[[105,[72]]]],[[61,77],[[105,[72]]]],[[62,77],[[105,[72]]]],[[66,77],[[105,[72]]]],[[67,77],[[105,[72]]]],[[68,77],[[105,[72]]]],[[42,77],[[105,[72]]]],[[43,77],[[105,[72]]]],[[44,77],[[105,[72]]]],[[32,77],[[105,[72]]]],[[33,77],[[105,[72]]]],[[45,77],[[105,[72]]]],[[46,77],[[105,[72]]]],[[47,77],[[105,[72]]]],[[34,77],[[105,[72]]]],[[35,77],[[105,[72]]]],[[49,77],[[105,[72]]]],[[51,77],[[105,[72]]]],[[52,77],[[105,[72]]]],[[53,77],[[105,[72]]]],[[54,77],[[105,[72]]]],[[36,77],[[105,[72]]]],[[37,77],[[105,[72]]]],[[38,77],[[105,[72]]]],[[39,77],[[105,[72]]]],[[40,77],[[105,[72]]]],[[41,77],[[105,[72]]]],[[59,77],[[105,[72]]]],[[61,77],[[105,[72]]]],[[62,77],[[105,[72]]]],[66,77],[67,77],[68,77],[42,77],[43,77],[44,77],[32,77],[33,77],[45,77],[46,77],[47,77],[34,77],[35,77],[49,77],[51,77],[52,77],[53,77],[54,77],[36,77],[37,77],[38,77],[39,77],[40,77],[41,77],[59,77],[61,77],[62,77],[[66,28],[[105,[72]]]],[[67,28],[[105,[72]]]],[[68,28],[[105,[72]]]],[[42,28],[[105,[72]]]],[[43,28],[[105,[72]]]],[[44,28],[[105,[72]]]],[[32,28],[[105,[72]]]],[[33,28],[[105,[72]]]],[[45,28],[[105,[72]]]],[[46,28],[[105,[72]]]],[[47,28],[[105,[72]]]],[[34,28],[[105,[72]]]],[[35,28],[[105,[72]]]],[[49,28],[[105,[72]]]],[[51,28],[[105,[72]]]],[[52,28],[[105,[72]]]],[[53,28],[[105,[72]]]],[[54,28],[[105,[72]]]],[[36,28],[[105,[72]]]],[[37,28],[[105,[72]]]],[[38,28],[[105,[72]]]],[[39,28],[[105,[72]]]],[[40,28],[[105,[72]]]],[[41,28],[[105,[72]]]],[[59,28],[[105,[72]]]],[[61,28],[[105,[72]]]],[[62,28],[[105,[72]]]],[82,[[105,[82]]]],[85,[[105,[85]]]],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[76,8],[[17,[98]]]],[[106,8],[[17,[98]]]],[[106,8],[[17,[98]]]],[[107,8],[[17,[98]]]],[[107,8],[[17,[98]]]],[[78,8],[[17,[98]]]],[[78,8],[[17,[98]]]],[[78,8],[[17,[98]]]],[[78,8],[[17,[98]]]],[[82,8],[[17,[98]]]],[[85,8],[[17,[98]]]],[[87,8],[[17,[98]]]],[[19,8],[[17,[98]]]],[[19,8],[[17,[98]]]],[[14,8],[[17,[98]]]],[[88,8],[[17,[98]]]],[[63,8],[[17,[98]]]],[[73,8],[[17,[98]]]],[[91,8],[[17,[98]]]],[[94,8],[[17,[98]]]],[[57,8],[[17,[98]]]],[[108,8],[[17,[98]]]],[[108,8],[[17,[98]]]],[[71,8],[[17,[98]]]],[[66,8],[[17,[98]]]],[[66,8],[[17,[98]]]],[[67,8],[[17,[98]]]],[[67,8],[[17,[98]]]],[[68,8],[[17,[98]]]],[[68,8],[[17,[98]]]],[[69,8],[[17,[98]]]],[[69,8],[[17,[98]]]],[[70,8],[[17,[98]]]],[[70,8],[[17,[98]]]],[[42,8],[[17,[98]]]],[[42,8],[[17,[98]]]],[[43,8],[[17,[98]]]],[[43,8],[[17,[98]]]],[[44,8],[[17,[98]]]],[[44,8],[[17,[98]]]],[[32,8],[[17,[98]]]],[[32,8],[[17,[98]]]],[[33,8],[[17,[98]]]],[[33,8],[[17,[98]]]],[[45,8],[[17,[98]]]],[[45,8],[[17,[98]]]],[[46,8],[[17,[98]]]],[[46,8],[[17,[98]]]],[[47,8],[[17,[98]]]],[[47,8],[[17,[98]]]],[[48,8],[[17,[98]]]],[[48,8],[[17,[98]]]],[[34,8],[[17,[98]]]],[[34,8],[[17,[98]]]],[[35,8],[[17,[98]]]],[[35,8],[[17,[98]]]],[[49,8],[[17,[98]]]],[[49,8],[[17,[98]]]],[[51,8],[[17,[98]]]],[[51,8],[[17,[98]]]],[[52,8],[[17,[98]]]],[[52,8],[[17,[98]]]],[[53,8],[[17,[98]]]],[[53,8],[[17,[98]]]],[[54,8],[[17,[98]]]],[[54,8],[[17,[98]]]],[[55,8],[[17,[98]]]],[[55,8],[[17,[98]]]],[[36,8],[[17,[98]]]],[[36,8],[[17,[98]]]],[[37,8],[[17,[98]]]],[[37,8],[[17,[98]]]],[[38,8],[[17,[98]]]],[[38,8],[[17,[98]]]],[[39,8],[[17,[98]]]],[[39,8],[[17,[98]]]],[[40,8],[[17,[98]]]],[[40,8],[[17,[98]]]],[[41,8],[[17,[98]]]],[[41,8],[[17,[98]]]],[[59,8],[[17,[98]]]],[[59,8],[[17,[98]]]],[[61,8],[[17,[98]]]],[[61,8],[[17,[98]]]],[[62,8],[[17,[98]]]],[[62,8],[[17,[98]]]],[[],80],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[109],[[],76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[110,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,44],[42,44],[[]],[[],32],[[]],[[],32],[34,33],[[],33],[[],33],[[]],[[],33],[[]],[42,46],[44,46],[[]],[[]],[43,47],[[]],[35,34],[[],34],[[],34],[[],34],[111,34],[33,34],[[]],[[],35],[[],35],[[]],[[],35],[111,35],[[],35],[[],35],[[],35],[[],35],[[],35],[48,35],[[]],[[]],[[]],[[]],[49,53],[51,54],[[]],[[]],[[],36],[[],36],[[]],[[],37],[[],37],[[]],[[],37],[[],38],[[],38],[[]],[55,38],[[],38],[[],38],[[],38],[[],38],[[]],[[],39],[[],39],[[],40],[[]],[[],40],[[],40],[[],41],[[],41],[[]],[[],41],[[],41],[[],41],[[],41],[[]],[[],59],[[],59],[[],61],[[],61],[[],61],[[]],[[],62],[[],62],[[],62],[[]],[[],62],[[],62],[[],62],[43,48],[51,55],[15,42],[15,44],[15,32],[15,45],[15,46],[50,49],[50,52],[50,53],[50,36],[[15,32],42],[[50,36],49],[[],32],[[],33],[[],48],[[],34],[[],35],[[],55],[[],36],[[],37],[[],38],[[],39],[[],40],[[],41],[[],59],[[],61],[[],62],[[33,15],43],[[33,15],44],[[33,15],46],[[33,15],47],[[33,15],48],[[37,50],51],[[37,50],53],[[37,50],54],[[37,50],55],[[32,32,32],42],[[34,34,34,34],43],[[33,33,33],44],[[32,32],45],[[34,34,34],46],[[35,35,35,35],47],[[36,36,36],49],[[37,37,37,37],51],[[36,36],52],[[37,37,37],53],[[38,38,38,38],54],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],49],[[],51],[[],52],[[],53],[[],54],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],49],[[],51],[[],52],[[],53],[[],54],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],49],[[],51],[[],52],[[],53],[[],54],[80,79],[80,79],[[[12,[[76,[80]]]]],84],[97,19],[97,19],[33,44],[32,45],[33,46],[35,47],[36,52],[37,53],[38,54],[[71,15,15,15],44],[[71,15,15,15],46],[[71,15,15,15],47],[[71,15,15,15],48],[[71,50,50,50],53],[[71,50,50,50],54],[[71,50,50,50],55],[45,42],[45,44],[45,46],[52,49],[52,53],[[45,32],42],[[52,36],49],[44,42],[44,43],[44,45],[44,47],[44,48],[53,49],[53,51],[53,52],[53,54],[53,55],[[44,33],43],[[53,37],51],[46,42],[46,45],[46,47],[46,48],[47,43],[47,44],[47,46],[47,48],[54,51],[54,53],[54,55],[[27,110],19],[48,43],[48,44],[48,46],[48,47],[55,51],[55,53],[55,54],[72,[[105,[66]]]],[72,[[105,[67]]]],[72,[[105,[68]]]],[72,[[105,[42]]]],[72,[[105,[43]]]],[72,[[105,[44]]]],[72,[[105,[32]]]],[72,[[105,[33]]]],[72,[[105,[45]]]],[72,[[105,[46]]]],[72,[[105,[47]]]],[72,[[105,[48]]]],[72,[[105,[34]]]],[72,[[105,[35]]]],[72,[[105,[49]]]],[72,[[105,[51]]]],[72,[[105,[52]]]],[72,[[105,[53]]]],[72,[[105,[54]]]],[72,[[105,[55]]]],[72,[[105,[36]]]],[72,[[105,[37]]]],[72,[[105,[38]]]],[72,[[105,[39]]]],[72,[[105,[40]]]],[72,[[105,[41]]]],[72,[[105,[59]]]],[72,[[105,[61]]]],[72,[[105,[62]]]],[[33,33],48],[[37,37],55],[[32,32],48],[[36,36],55],[[33,33],48],[[37,37],55],[[48,33],43],[[48,33],47],[[55,37],51],[[55,37],54],[15,43],[15,44],[15,46],[15,47],[15,48],[50,51],[50,53],[50,54],[50,55],[15,43],[15,44],[15,46],[15,47],[15,48],[50,51],[50,53],[50,54],[50,55],[15,43],[15,44],[15,46],[15,47],[15,48],[50,51],[50,53],[50,54],[50,55],[32,42],[33,43],[32,44],[32,46],[33,47],[36,49],[37,51],[36,53],[37,54],[[32,15],45],[[36,50],52],[[32,15,32],42],[[32,15,32],44],[[32,15,32],46],[[36,50,36],49],[[36,50,36],53],[[33,48,33],43],[[33,48,33],47],[[37,55,37],51],[[37,55,37],54],[33,48],[37,55],[[],32],[[],33],[[],48],[[],34],[[],35],[[],55],[[],36],[[],37],[[],38],[[],39],[[],40],[[],41],[[],59],[[],61],[[],62],[28,[[17,[19]]]],[28,[[17,[19,112]]]],[32,42],[33,43],[32,44],[32,46],[33,47],[36,49],[37,51],[36,53],[37,54],[35,48],[38,55],[10],[11],[10],[10],[11],[10],[11],[10],[11],[10],[11],[10],[11],[10],[11],[11],[10],[10],[11],[10],[11],[11],[10],[11],[10],[10],[11],[11],[10],[11],[10],[11],[10],[11],[10],[10],[11],[10],[11],[11],[10],[10],[11],[10],[11],[10],[11],[11],[10],[11],[10],[10],[11],[11],[10],[11],[10],[10],[11],[10],[11],[10],[11],[10],[11],[11],[10],[10],[11],[11],[10],[11],[10],[10],[11],[10],[11],[10],[11],[11],[10],[11],[10],[11],[10],[10],[11],[10],[11],[11],[10],[11],[10],[11],[10],[10],[11],[[15,15,15,15],48],[[50,50,50,50],55],[91,60],[88,16],[14,105],[[113,88],16],[[114,14],105],[[115,14],105],[[116,80,91],105],[[79,91],105],[56,114],[[74,91],105],[[75,91],105],[[80,91],[[105,[16]]]],[90,84],[[92,19],[[105,[[12,[[76,[16]]]]]]]],[93,83],[14,117],[88,118],[14,118],[[90,19],[[12,[[76,[80]]]]]],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[28,105],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[116,80]],[75],[80],[88,16],[14,105],[76],[[113,88],16],[[115,14],105],[[116,80,91],105],[[79,91],105],[56,115],[[75,91],105],[[80,91],[[105,[16]]]],[10,[[105,[83]]]],[10],[10],[10],[10],[10],[10],[71,119],[66,119],[67,119],[68,119],[69,119],[70,119],[42,119],[43,119],[44,119],[32,119],[33,119],[45,119],[46,119],[47,119],[48,119],[34,119],[35,119],[49,119],[51,119],[52,119],[53,119],[54,119],[55,119],[36,119],[37,119],[38,119],[39,119],[40,119],[41,119],[59,119],[61,119],[62,119],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[87],[19],[14],[88],[91],[71],[66],[67],[68],[69],[70],[39],[40],[41],[59],[61],[62],0,[[],19],[[],19],[64,19],[94,19],0,0,[19,[[105,[19]]]],[91,60],[[32,77]],[[33,77]],[[34,77]],[[35,77]],[[36,77]],[[37,77]],[[38,77]],[[39,77]],[[40,77]],[[41,77]],[[59,77]],[[61,77]],[[62,77]],[[32,77]],[[33,77]],[[34,77]],[[35,77]],[[36,77]],[[37,77]],[[38,77]],[[39,77]],[[40,77]],[[41,77]],[[59,77]],[[61,77]],[[62,77]],[90],[10],[10],[10],[10],[10],[[64,10]],[[63,10]],[10],[10],[10],0,[[65,10]],[[116,80,91],105],[[79,91],105],[[75,91],105],[[80,91,16],25],[[92,19,89],[[105,[89]]]],[93],[10],[65,65],[65,65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[71,6]]],[[7,[1,6]]]],[[[7,[66,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[67,6]]],[[7,[1,6]]]],[[[7,[68,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[69,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[70,6]]],[[7,[1,6]]]],[[[7,[42,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[43,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[44,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[32,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[33,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[45,6]]],[[7,[1,6]]]],[[[7,[46,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[47,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[48,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[34,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[35,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[49,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[51,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[52,6]]],[[7,[1,6]]]],[[[7,[53,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[54,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[55,6]]],[[7,[1,6]]]],[[[7,[36,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[37,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[38,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[39,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[40,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[41,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[59,6]]],[[7,[1,6]]]],[[[7,[61,6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[62,6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[87,121],[76],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[71,6]]],[[7,[72,6]]]],[[[7,[66,6]]],[[7,[72,6]]]],[[[7,[67,6]]],[[7,[72,6]]]],[[[7,[68,6]]],[[7,[72,6]]]],[[[7,[69,6]]],[[7,[72,6]]]],[[[7,[70,6]]],[[7,[72,6]]]],[[[7,[42,6]]],[[7,[72,6]]]],[[[7,[43,6]]],[[7,[72,6]]]],[[[7,[44,6]]],[[7,[72,6]]]],[[[7,[32,6]]],[[7,[72,6]]]],[[[7,[33,6]]],[[7,[72,6]]]],[[[7,[45,6]]],[[7,[72,6]]]],[[[7,[46,6]]],[[7,[72,6]]]],[[[7,[47,6]]],[[7,[72,6]]]],[[[7,[48,6]]],[[7,[72,6]]]],[[[7,[34,6]]],[[7,[72,6]]]],[[[7,[35,6]]],[[7,[72,6]]]],[[[7,[49,6]]],[[7,[72,6]]]],[[[7,[51,6]]],[[7,[72,6]]]],[[[7,[52,6]]],[[7,[72,6]]]],[[[7,[53,6]]],[[7,[72,6]]]],[[[7,[54,6]]],[[7,[72,6]]]],[[[7,[55,6]]],[[7,[72,6]]]],[[[7,[36,6]]],[[7,[72,6]]]],[[[7,[37,6]]],[[7,[72,6]]]],[[[7,[38,6]]],[[7,[72,6]]]],[[[7,[39,6]]],[[7,[72,6]]]],[[[7,[40,6]]],[[7,[72,6]]]],[[[7,[41,6]]],[[7,[72,6]]]],[[[7,[59,6]]],[[7,[72,6]]]],[[[7,[61,6]]],[[7,[72,6]]]],[[[7,[62,6]]],[[7,[72,6]]]],[79,80],[93,92],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[51,51],[52,52],[53,53],[54,54],[55,55],[[81,91],25],[42,25],[43,25],[44,25],[32,25],[33,25],[45,25],[46,25],[47,25],[48,25],[34,25],[35,25],[49,25],[51,25],[52,25],[53,25],[54,25],[55,25],[36,25],[37,25],[38,25],[42,25],[43,25],[44,25],[32,25],[33,25],[45,25],[46,25],[47,25],[48,25],[34,25],[35,25],[49,25],[51,25],[52,25],[53,25],[54,25],[55,25],[36,25],[37,25],[38,25],[32,66],[33,67],[34,69],[35,70],[36,66],[37,67],[38,68],[48,25],[55,25],[32,60],[33,60],[34,60],[35,60],[36,60],[37,60],[38,60],[39,60],[40,60],[41,60],[19,25],[32,25],[33,25],[48,25],[34,25],[35,25],[55,25],[36,25],[37,25],[38,25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[116,80],122],[79,122],[74,122],[75,122],[80,122],[66,123],[67,123],[68,123],[42,123],[43,123],[44,123],[32,123],[33,123],[45,123],[46,123],[47,123],[34,123],[35,123],[49,123],[51,123],[52,123],[53,123],[54,123],[36,123],[37,123],[38,123],[39,123],[40,123],[41,123],[59,123],[61,123],[62,123],[[116,80],122],[79,122],[75,122],[80,122],[[116,80,[13,[73]]],124],[[79,[13,[73]]],124],[[75,[13,[73]]],124],[[80,[13,[73]]],125],[81,126],[[[13,[73]]]],[[116,80,[13,[73]]],127],[[79,[13,[73]]],127],[[74,[13,[73]]],127],[[74,[13,[73]]]],[[75,[13,[73]]],127],[[75,[13,[73]]]],[[75,[13,[73]]]],[[80,[13,[73]]],128],[[81,73],129],[[58,58],39],[[58,58,58],40],[[58,58,58,58],41],0,[[81,91]],[81,130],0,[80,131],0,[32,15],[33,15],[48,15],[34,15],[35,15],[55,50],[36,50],[37,50],[38,50],[32,15],[33,15],[48,15],[34,15],[35,15],[55,50],[36,50],[37,50],[38,50],[32,15],[33,15],[48,15],[34,15],[35,15],[55,50],[36,50],[37,50],[38,50],[[32,32,15],32],[[33,33,15],33],[[48,48,15],48],[[34,34,15],34],[[35,35,15],35],[[55,55,50],55],[[36,36,50],36],[[37,37,50],37],[[38,38,50],38],[[33,33,33],43],[[33,33,33],47],[[37,37,37],51],[[37,37,37],54],[[33,33,33],43],[[33,33,33],47],[[37,37,37],51],[[37,37,37],54],[[33,33,33],43],[[33,33,33],47],[[37,37,37],51],[[37,37,37],54],[[33,33,33],43],[[33,33,33],47],[[37,37,37],51],[[37,37,37],54],[10],[82,82],[85,85],[[32,32],45],[[33,33,33],44],[[34,34,34],46],[[35,35,35,35],47],0,0,0,0,[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[41,41],41],[[59,59],59],[[61,61],61],[[62,62],62],[32,15],[33,15],[34,15],[35,15],[36,50],[37,50],[38,50],[39,58],[40,58],[41,58],[59,60],[61,60],[62,60],[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[41,41],41],[[59,59],59],[[61,61],61],[[62,62],62],[32,15],[33,15],[34,15],[35,15],[36,50],[37,50],[38,50],[39,58],[40,58],[41,58],[59,60],[61,60],[62,60],[[42,46]],[[42,42]],[[42,44]],[[43,47]],[[43,43]],[[44,33]],[[44,15]],[[44,44]],[[44,34],34],[[44,42]],[[32,15],32],[[32,32],32],[[33,15],33],[[33,33],33],[[45,15]],[[45,32]],[[45,45]],[[46,46]],[[46,15]],[[46,34]],[[46,42]],[[46,33],33],[[47,35]],[[47,43]],[[47,15]],[[47,47]],[[48,15],48],[[48,33]],[[48,48],48],[[48,34]],[[34,34],34],[[34,15],34],[[35,35],35],[[35,15],35],[[49,53]],[[49,49]],[[51,54]],[[51,51]],[[52,52]],[[52,36]],[[52,50]],[[53,49]],[[53,53]],[[53,50]],[[53,37]],[[54,38]],[[54,50]],[[54,54]],[[54,51]],[[55,50],55],[[55,55],55],[[55,37]],[[36,36],36],[[36,50],36],[[37,50],37],[[37,37],37],[[38,38],38],[[38,50],38],[[39,58],39],[[39,39],39],[[40,40],40],[[40,58],40],[[41,41],41],[[41,58],41],[[59,59],59],[[59,60],59],[[61,60],61],[[61,61],61],[[62,62],62],[[62,60],62],[[32,32,32],32],[[33,33,33],33],[[34,34,34],34],[[35,35,35],35],[[36,36,36],36],[[37,37,37],37],[[38,38,38],38],[[44,44]],[[44,15]],[[32,15]],[[32,32]],[[33,15]],[[33,33]],[[45,45]],[[45,15]],[[46,46]],[[46,15]],[[47,15]],[[47,47]],[[48,48]],[[34,34]],[[34,15]],[[35,15]],[[35,35]],[[52,52]],[[52,50]],[[53,53]],[[53,50]],[[54,54]],[[54,50]],[[55,55]],[[36,36]],[[36,50]],[[37,37]],[[37,50]],[[38,38]],[[38,50]],[[39,58]],[[39,39]],[[40,58]],[[40,40]],[[41,41]],[[41,58]],[[59,59]],[[59,60]],[[61,61]],[[61,60]],[[62,60]],[[62,62]],[[45,45],45],[[52,52],52],[[44,44],44],[[46,46],46],[[53,53],53],[[47,47],47],[[54,54],54],[[48,48],48],[[55,55],55],[[44,15],44],[[45,15],45],[[46,15],46],[[47,15],47],[[52,50],52],[[53,50],53],[[54,50],54],[[45,32],32],[[52,36],36],[[44,33],33],[[46,33],33],[[48,33],33],[[53,37],37],[[55,37],37],[[44,34],34],[[46,34],34],[[48,34],34],[[47,35],35],[[54,38],38],[[],30],[[],30],[64,30],[63,28],[94,30],0,0,[[66,77],[[105,[28]]]],[[67,77],[[105,[28]]]],[[68,77],[[105,[28]]]],[[42,77],[[105,[28]]]],[[43,77],[[105,[28]]]],[[44,77],[[105,[28]]]],[[32,77],[[105,[28]]]],[[33,77],[[105,[28]]]],[[45,77],[[105,[28]]]],[[46,77],[[105,[28]]]],[[47,77],[[105,[28]]]],[[34,77],[[105,[28]]]],[[35,77],[[105,[28]]]],[[49,77],[[105,[28]]]],[[51,77],[[105,[28]]]],[[52,77],[[105,[28]]]],[[53,77],[[105,[28]]]],[[54,77],[[105,[28]]]],[[36,77],[[105,[28]]]],[[37,77],[[105,[28]]]],[[38,77],[[105,[28]]]],[[39,77],[[105,[28]]]],[[40,77],[[105,[28]]]],[[41,77],[[105,[28]]]],[[59,77],[[105,[28]]]],[[61,77],[[105,[28]]]],[[62,77],[[105,[28]]]],[44],[32,32],[33,33],[45],[46],[47],[48,48],[34,34],[35,35],[52],[53],[54],[55,55],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[],76],[[],116],[[[105,[30]]],87],[[],19],[[[105,[30]]],14],[[[105,[30]]],88],[[131,105],80],[[],89],[[],64],[[60,60],91],[[],92],[[],93],[[],10],[[25,25],66],[[25,25,25],67],[[25,25,25,25],68],[[25,25,25],69],[[25,25,25,25],70],[[15,15],32],[[15,15,15],33],[[15,15,15],34],[[15,15,15,15],35],[[50,50],36],[[50,50,50],37],[[50,50,50,50],38],[[58,58],39],[[58,58,58],40],[[58,58,58,58],41],[[60,60],59],[[60,60,60],61],[[60,60,60,60],62],[132,89],[127,105],[124,105],[128,105],[125,105],[126,105],[129,105],[[],19],[32,32],[33,33],[48,48],[34,34],[35,35],[55,55],[36,36],[37,37],[38,38],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[87,133]],[66,66],[67,67],[68,68],[69,69],[70,70],[39],[40],[41],[59],[61],[62],[[15,15,15,15,15,15],47],[[50,50,50,50,50,50],54],[[15,15,15,15,15,15],47],[[50,50,50,50,50,50],54],[[15,15,15,15,15,15],47],[[50,50,50,50,50,50],54],[[76,76],[[105,[96]]]],[[19,19],[[105,[96]]]],[[91,91],[[105,[96]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],0,0,0,[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[28,[[17,[72,134]]]],[32,32],[36,36],[39,39],[[32,32],15],[[36,36],50],[[39,39],58],[[15,15,15],47],[[50,50,50],54],[[15,15,15],47],[[50,50,50],54],[[15,15,15],47],[[50,50,50],54],[[15,15,15],47],[[50,50,50],54],[[15,15,15,15],47],[[50,50,50,50],54],[[15,15,15,15],47],[[50,50,50,50],54],[[15,15,15,15],47],[[50,50,50,50],54],[[32,15],32],[[33,15],33],[[34,15],34],[[35,15],35],[[36,50],36],[[37,50],37],[[38,50],38],[[],42],[[],43],[[],44],[[],44],[[],32],[[],32],[[],33],[[],33],[[],45],[[],45],[[],46],[[],46],[[],47],[[],47],[[],48],[[],48],[[],34],[[],34],[[],35],[[],35],[[],49],[[],51],[[],52],[[],52],[[],53],[[],53],[[],54],[[],54],[[],55],[[],55],[[],36],[[],36],[[],37],[[],37],[[],38],[[],38],[[],39],[[],39],[[],40],[[],40],[[],41],[[],41],[[],59],[[],59],[[],61],[[],61],[[],62],[[],62],[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[47,33],33],[[54,37],37],[29],[[15,15,15,15],48],0,[19,110],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[71,135],[66,135],[67,135],[68,135],[69,135],[70,135],[42,135],[43,135],[44,135],[32,135],[33,135],[45,135],[46,135],[47,135],[48,135],[34,135],[35,135],[49,135],[51,135],[52,135],[53,135],[54,135],[55,135],[36,135],[37,135],[38,135],[39,135],[40,135],[41,135],[59,135],[61,135],[62,135],[[[7,[71,6]]],136],[[[7,[66,6]]],136],[[[7,[67,6]]],136],[[[7,[68,6]]],136],[[[7,[69,6]]],136],[[[7,[70,6]]],136],[[[7,[42,6]]],136],[[[7,[43,6]]],136],[[[7,[44,6]]],136],[[[7,[32,6]]],136],[[[7,[33,6]]],136],[[[7,[45,6]]],136],[[[7,[46,6]]],136],[[[7,[47,6]]],136],[[[7,[48,6]]],136],[[[7,[34,6]]],136],[[[7,[35,6]]],136],[[[7,[49,6]]],136],[[[7,[51,6]]],136],[[[7,[52,6]]],136],[[[7,[53,6]]],136],[[[7,[54,6]]],136],[[[7,[55,6]]],136],[[[7,[36,6]]],136],[[[7,[37,6]]],136],[[[7,[38,6]]],136],[[[7,[39,6]]],136],[[[7,[40,6]]],136],[[[7,[41,6]]],136],[[[7,[59,6]]],136],[[[7,[61,6]]],136],[[[7,[62,6]]],136],[[66,72],[[105,[25]]]],[[67,72],[[105,[25]]]],[[68,72],[[105,[25]]]],[[42,72],[[105,[25]]]],[[43,72],[[105,[25]]]],[[44,72],[[105,[25]]]],[[32,72],[[105,[25]]]],[[33,72],[[105,[25]]]],[[45,72],[[105,[25]]]],[[46,72],[[105,[25]]]],[[47,72],[[105,[25]]]],[[48,72],[[105,[25]]]],[[34,72],[[105,[25]]]],[[35,72],[[105,[25]]]],[[49,72],[[105,[25]]]],[[51,72],[[105,[25]]]],[[52,72],[[105,[25]]]],[[53,72],[[105,[25]]]],[[54,72],[[105,[25]]]],[[55,72],[[105,[25]]]],[[36,72],[[105,[25]]]],[[37,72],[[105,[25]]]],[[38,72],[[105,[25]]]],[[39,72],[[105,[25]]]],[[40,72],[[105,[25]]]],[[41,72],[[105,[25]]]],[[59,72],[[105,[25]]]],[[61,72],[[105,[25]]]],[[62,72],[[105,[25]]]],[71,137],[66,137],[67,137],[68,137],[69,137],[70,137],[42,137],[43,137],[44,137],[32,137],[33,137],[45,137],[46,137],[47,137],[48,137],[34,137],[35,137],[49,137],[51,137],[52,137],[53,137],[54,137],[55,137],[36,137],[37,137],[38,137],[39,137],[40,137],[41,137],[59,137],[61,137],[62,137],[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[32,32],32],[[33,33],33],[[34,34],34],[[35,35],35],[[36,36],36],[[37,37],37],[[38,38],38],[[32,32],32],[[32,15],32],[[33,15],33],[[33,33],33],[[34,15],34],[[34,34],34],[[35,35],35],[[35,15],35],[[36,50],36],[[36,36],36],[[37,37],37],[[37,50],37],[[38,50],38],[[38,38],38],[[39,58],39],[[39,39],39],[[40,40],40],[[40,58],40],[[41,58],41],[[41,41],41],[[59,60],59],[[59,59],59],[[61,61],61],[[61,60],61],[[62,62],62],[[62,60],62],[[32,32]],[[32,15]],[[33,15]],[[33,33]],[[34,15]],[[34,34]],[[35,35]],[[35,15]],[[36,36]],[[36,50]],[[37,37]],[[37,50]],[[38,38]],[[38,50]],[[39,39]],[[39,58]],[[40,58]],[[40,40]],[[41,41]],[[41,58]],[[59,59]],[[59,60]],[[61,60]],[[61,61]],[[62,62]],[[62,60]],[[116,80,91],105],[[79,91],105],[56,[[7,[138,6]]]],[[75,91],105],[[80,91,[105,[16]]],25],[[92,19],[[105,[89]]]],[10,83],[[32,32],32],[[36,36],36],[[39,39],39],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[44,77],33],[[45,77],32],[[46,77],34],[[47,77],35],[[52,77],36],[[53,77],37],[[54,77],38],[10,[[17,[139]]]],[[65,10],[[17,[139]]]],[[64,10],[[17,[139]]]],[[63,10],[[17,[139]]]],0,[10,[[17,[139]]]],[10,[[17,[139]]]],[[66,32,32],32],[[67,33,33],33],[[69,34,34],34],[[70,35,35],35],[[66,36,36],36],[[67,37,37],37],[[68,38,38],38],[[66,39,39],39],[[67,40,40],40],[[68,41,41],41],[[66,59,59],59],[[67,61,61],61],[[68,62,62],62],[71,17],[66,17],[67,17],[68,17],[69,17],[70,17],[42,17],[43,17],[44,17],[32,17],[33,17],[45,17],[46,17],[47,17],[48,17],[34,17],[35,17],[49,17],[51,17],[52,17],[53,17],[54,17],[55,17],[36,17],[37,17],[38,17],[39,17],[40,17],[41,17],[59,17],[61,17],[62,17],[[71,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[66,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[67,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[68,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[69,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[70,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[42,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[43,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[44,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[32,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[33,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[45,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[46,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[47,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[48,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[34,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[35,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[49,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[51,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[52,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[53,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[54,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[55,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[36,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[37,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[38,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[39,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[40,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[41,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[59,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[61,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[62,[7,[72,6]]],[[17,[[7,[72,6]]]]]],[[39,140]],[[39,60]],[[39,141]],[[39,58]],[[39,39]],[[39,59]],[[39,142]],[[39,16]],[[40,16]],[[40,60]],[[40,58]],[[40,40]],[[40,142]],[[40,140]],[[40,141]],[[40,61]],[[41,62]],[[41,58]],[[41,141]],[[41,16]],[[41,140]],[[41,60]],[[41,41]],[[41,142]],[[59,141]],[[59,39]],[[59,142]],[[59,140]],[[59,60]],[[59,16]],[[59,59]],[[59,58]],[[61,141]],[[61,16]],[[61,140]],[[61,40]],[[61,58]],[[61,61]],[[61,142]],[[61,60]],[[62,16]],[[62,60]],[[62,140]],[[62,62]],[[62,58]],[[62,41]],[[62,141]],[[62,142]],[[39,140]],[[39,60]],[[39,59]],[[39,16]],[[39,141]],[[39,39]],[[39,58]],[[39,142]],[[40,140]],[[40,142]],[[40,60]],[[40,58]],[[40,141]],[[40,40]],[[40,16]],[[40,61]],[[41,60]],[[41,62]],[[41,16]],[[41,41]],[[41,141]],[[41,58]],[[41,140]],[[41,142]],[[59,59]],[[59,141]],[[59,140]],[[59,60]],[[59,58]],[[59,142]],[[59,16]],[[59,39]],[[61,61]],[[61,142]],[[61,140]],[[61,141]],[[61,58]],[[61,40]],[[61,60]],[[61,16]],[[62,60]],[[62,141]],[[62,41]],[[62,58]],[[62,62]],[[62,140]],[[62,142]],[[62,16]],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[48,48,15],48],[[55,55,50],55],[25,66],[25,67],[25,68],[25,69],[25,70],[15,32],[15,33],[15,34],[15,35],[50,36],[50,37],[50,38],[58,39],[58,40],[58,41],[60,59],[60,61],[60,62],0,[[44,44]],[[32,15],32],[[32,32],32],[[33,15],33],[[33,33],33],[[45,45]],[[46,46]],[[47,47]],[[48,48],48],[[34,15],34],[[34,34],34],[[35,35],35],[[35,15],35],[[52,52]],[[53,53]],[[54,54]],[[55,55],55],[[36,36],36],[[36,50],36],[[37,37],37],[[37,50],37],[[38,50],38],[[38,38],38],[[39,39],39],[[39,58],39],[[40,40],40],[[40,58],40],[[41,41],41],[[41,58],41],[[59,59],59],[[59,60],59],[[61,60],61],[[61,61],61],[[62,60],62],[[62,62],62],[[44,44]],[[32,15]],[[32,32]],[[33,15]],[[33,33]],[[45,45]],[[46,46]],[[47,47]],[[34,34]],[[34,15]],[[35,35]],[[35,15]],[[52,52]],[[53,53]],[[54,54]],[[36,50]],[[36,36]],[[37,37]],[[37,50]],[[38,38]],[[38,50]],[[39,39]],[[39,58]],[[40,40]],[[40,58]],[[41,58]],[[41,41]],[[59,60]],[[59,59]],[[61,61]],[[61,60]],[[62,62]],[[62,60]],[[45,45],45],[[52,52],52],[[44,44],44],[[46,46],46],[[53,53],53],[[47,47],47],[[54,54],54],[[],44],[[],44],[[],32],[[],32],[[],33],[[],33],[[],45],[[],45],[[],46],[[],46],[[],47],[[],47],[[],48],[[],48],[[],34],[[],34],[[],35],[[],35],[[],52],[[],52],[[],53],[[],53],[[],54],[[],54],[[],55],[[],55],[[],36],[[],36],[[],37],[[],37],[[],38],[[],38],[[],39],[[],39],[[],40],[[],40],[[],41],[[],41],[[],59],[[],59],[[],61],[[],61],[[],62],[[],62],0,[[],63],[63,63],0,[19,27],[32],[33],[48],[34],[35],[55],[36],[37],[38],[39],[40],[41],[59],[61],[62],[48],[55],[42],[43],[44],[45],[46],[47],[49],[51],[52],[53],[54],[42],[43],[44],[45],[46],[47],[49],[51],[52],[53],[54],[[48,71]],[[55,71]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43],[47],[51],[54],[48,33],[55,37],[19,[[17,[28,143]]]],[[],30],[[],30],[[],30],[19,30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[42,32],32],[[44,32],32],[[46,32],32],[[49,36],36],[[53,36],36],[[43,33],33],[[47,33],33],[[51,37],37],[[54,37],37],[[43,34],34],[[47,34],34],[[42,32],32],[[44,32],32],[[46,32],32],[[49,36],36],[[53,36],36],[[43,33],33],[[47,33],33],[[51,37],37],[[54,37],37],[[43,34],34],[[47,34],34],0,0,0,0,[44,44],[45,45],[46,46],[47,47],[52,52],[53,53],[54,54],[33,32],[34,32],[35,33],[37,36],[38,37],[40,39],[41,40],[61,59],[62,61],[76,[[17,[82,106]]]],[76,[[17,[85,107]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[56,[[105,[114]]]],[90,[[17,[84,108]]]],[93,[[105,[83]]]],[[90,19],[[17,[[12,[[76,[80]]]],108]]]],[56,[[105,[115]]]],[90,[[17,[108]]]],[93,[[17,[108]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[32,[[105,[32]]]],[33,[[105,[33]]]],[34,[[105,[34]]]],[35,[[105,[35]]]],[36,[[105,[36]]]],[37,[[105,[37]]]],[38,[[105,[38]]]],[56,[[105,[[7,[138,6]]]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[[],119],[71,28],[66,28],[67,28],[68,28],[69,28],[70,28],[42,28],[43,28],[44,28],[32,28],[33,28],[45,28],[46,28],[47,28],[48,28],[34,28],[35,28],[49,28],[51,28],[52,28],[53,28],[54,28],[55,28],[36,28],[37,28],[38,28],[39,28],[40,28],[41,28],[59,28],[61,28],[62,28],[88,14],0,[[],19],[[],19],[[],19],[14,88],[93,92],[93,92],[[]],[[60,60],59],[[60,60,60],61],[[60,60,60,60],62],[[15,15],32],[[15,15,15],33],[[15,15,15],34],[[15,15,15,15],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],65],[[],19],[42],[43],[44],[45],[46],[47],[49],[51],[52],[53],[54],[32],[33],[48],[34],[35],[55],[36],[37],[38],[39],[40],[41],[59],[61],[62],[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,32],[33,32],[34,32],[35,32],[36,36],[37,36],[38,36],[39,39],[40,39],[41,39],[59,59],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[[]],[32,32],[33,32],[34,32],[35,32],[36,36],[37,36],[38,36],[39,39],[40,39],[41,39],[59,59],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[48,33],[34,34],[35,33],[55,37],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,32],[34,32],[35,32],[37,36],[38,36],[40,39],[41,39],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,32],[33,32],[34,32],[35,32],[36,36],[37,36],[38,36],[39,39],[40,39],[41,39],[59,59],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[[]],[32,32],[33,32],[34,32],[35,32],[36,36],[37,36],[38,36],[39,39],[40,39],[41,39],[59,59],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[[]],[32,33],[33,33],[34,34],[35,33],[36,37],[37,37],[38,37],[39,40],[40,40],[41,40],[59,61],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[[]],[32,35],[33,35],[34,35],[35,35],[36,38],[37,38],[38,38],[39,41],[40,41],[41,41],[59,62],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,32],[34,32],[35,32],[37,36],[38,36],[40,39],[41,39],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[35,32],[38,36],[41,39],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,32],[34,32],[35,32],[37,36],[38,36],[40,39],[41,39],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,32],[34,32],[35,32],[37,36],[38,36],[40,39],[41,39],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,32],[34,32],[35,32],[37,36],[38,36],[40,39],[41,39],[61,59],[62,59],[[]],[35,33],[38,37],[41,40],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,33],[34,34],[35,33],[37,37],[38,37],[40,40],[41,40],[61,61],[62,61],[[]],[35,35],[38,38],[41,41],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],[[]],[[]],[33,35],[34,35],[35,35],[37,38],[38,38],[40,41],[41,41],[61,62],[62,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[32,32],45],[[33,33,33],44],[[34,34,34],46],[[35,35,35,35],47],0,0,[[15,15,15,15],48],0,0,[[15,15],32],[[15,15,15],33],[[15,15,15],34],[[15,15,15,15],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[36,36],52],[[37,37,37],53],[[38,38,38,38],54],[[50,50,50,50],55],[[50,50],36],[[50,50,50],37],[[50,50,50,50],38],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[58,58],39],[[58,58,58],40],[[58,58,58,58],41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[60,60],59],[[60,60,60],61],[[60,60,60,60],62],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[144,144],[145,145],[146,146],[147,147],[[]],[[]],[[]],[[]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],144],[[],145],[[],146],[[],147],0,0,0,0,[[144,8],9],[[145,8],9],[[146,8],9],[[147,8],9],[[]],[[]],[[]],[[]],[11],[10],[11],[10],[11],[10],[10],[11],0,0,[[]],[[]],[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[[[14,[145]]],147],[[16,16]],[[16,16]],[[16,16]],[[16,16]],[16],[16],[16],[16],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],0,0,[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],[148,148],[149,149],[[]],[[]],[[],[[7,[5,6]]]],[[],[[7,[5,6]]]],[[],149],0,0,[[148,8],9],[[149,8],9],[[]],[[]],[11],[10],[[148,59],[[105,[91]]]],0,0,[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[13,[[13,[1]]]],[[59,32,[14,[145]]],148],[[16,16]],[[16,16]],[16],[16],[[148,59,[105,[91]]]],0,0,[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],19],[[],19],[[]],[[]],0,[[],1],[[],1],[[]],[[]],[150,150],[[]],[[],[[7,[5,6]]]],[[],150],[[150,8],9],[[]],[48,150],[33,150],[33,150],[10],[11],[[]],[[[7,[6]]],[[7,[1,6]]]],[12,[[12,[1]]]],[13,[[13,[1]]]],[150,151],[[16,16]],[16],0,0,[[]],0,[[],17],[[],17],[[],18],[[],19],[[]]],"p":[[8,"Any"],[3,"AudioSource"],[3,"AudioEvents"],[4,"AudioEvent"],[8,"TypeData"],[3,"Global"],[3,"Box"],[3,"Formatter"],[6,"Result"],[3,"World"],[3,"World"],[3,"Arc"],[3,"Rc"],[3,"Handle"],[15,"f32"],[15,"u8"],[4,"Result"],[3,"TypeId"],[3,"Ulid"],[3,"Camera"],[3,"ClearColor"],[8,"DynEq"],[3,"Key"],[4,"KeyError"],[15,"bool"],[8,"Hasher"],[15,"u64"],[15,"str"],[3,"Demand"],[3,"String"],[3,"Path2d"],[3,"Vec2"],[3,"Vec3"],[3,"Vec3A"],[3,"Vec4"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[3,"Affine2"],[3,"Affine3A"],[3,"Mat3"],[3,"Mat2"],[3,"Mat3A"],[3,"Mat4"],[3,"Quat"],[3,"DAffine2"],[15,"f64"],[3,"DAffine3"],[3,"DMat2"],[3,"DMat3"],[3,"DMat4"],[3,"DQuat"],[3,"AssetProviders"],[3,"CommandQueue"],[15,"i32"],[3,"UVec2"],[15,"u32"],[3,"UVec3"],[3,"UVec4"],[3,"System"],[3,"SimpleSystemStage"],[3,"SystemStages"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[3,"BVec3A"],[3,"BVec4A"],[4,"EulerRot"],[8,"Reflect"],[3,"BitSetVec"],[3,"AtomicComponentStoreRef"],[3,"AtomicComponentStoreRefMut"],[3,"AtomicRefCell"],[15,"usize"],[3,"BitFmt"],[3,"ComponentStore"],[3,"UntypedComponentStore"],[3,"Entities"],[3,"AtomicRef"],[3,"AtomicResource"],[3,"AtomicComponentStore"],[3,"AtomicRefMut"],[3,"AssetProvidersResource"],[3,"AssetPath"],[3,"UntypedHandle"],[3,"UntypedResource"],[3,"ComponentStores"],[3,"Entity"],[3,"UntypedResources"],[3,"Resources"],[4,"CoreStage"],[3,"DynamicStruct"],[4,"Ordering"],[3,"SystemTime"],[3,"Error"],[3,"Res"],[3,"ResMut"],[3,"Commands"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[4,"Option"],[3,"BorrowError"],[3,"BorrowMutError"],[4,"EcsError"],[15,"never"],[15,"u128"],[3,"__m128"],[4,"DecodeError"],[8,"AssetProvider"],[3,"AssetProviderRef"],[3,"AssetProviderMut"],[3,"TypedComponentOps"],[3,"Handle"],[3,"HandleUntyped"],[4,"TypeInfo"],[3,"TypeRegistration"],[3,"AssetPath"],[8,"Iterator"],[3,"FieldIter"],[3,"ComponentBitsetIteratorMut"],[3,"UntypedComponentBitsetIteratorMut"],[3,"EntitiesIterWith"],[3,"ComponentBitsetIterator"],[3,"UntypedComponentBitsetIterator"],[3,"EntityIterator"],[3,"Vec"],[3,"Layout"],[3,"UntypedResourceInfo"],[3,"Path"],[4,"ReflectPathError"],[4,"ReflectMut"],[4,"ReflectOwned"],[4,"ReflectRef"],[8,"UntypedAssetProvider"],[3,"Error"],[15,"i16"],[15,"u16"],[15,"i8"],[4,"EncodeError"],[3,"Image"],[3,"Atlas"],[3,"Sprite"],[3,"AtlasSprite"],[3,"TileLayer"],[3,"Tile"],[3,"Transform"],[3,"Transform"],[13,"PlaySound"],[8,"QueryItem"],[8,"SystemParam"],[8,"TypeUlid"],[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"],[8,"SystemStage"],[8,"BitSet"],[8,"FromWorld"],[8,"StageLabel"],[8,"RawFns"],[8,"IntoSystem"],[8,"UnwrapMany"],[13,"DispatcherExecutionFailed"],[13,"SystemError"]],"a":{"cross":[4107,4108,4109],"determinant":[4107,4108,4109],"magnitude":[3646,3647,3648,3649,3650,3651,3652,3653,3654],"magnitude2":[3664,3665,3666,3667,3668,3669,3670,3671,3672],"mix":[3673,3674,3675,3676,3677,3678,3679,3680,3681],"scale":[2593,2594,2595,2596,2597,2598,2599],"wedge":[4107,4108,4109]}},\
"quinn_runtime_bevy":{"doc":"Quinn Runtime Bevy","t":[12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","AsyncExecutor","AsyncIoTimer","BevyIoTaskPoolExecutor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","fmt","fmt","fmt","from","from","from","into","into","into","new_timer","new_timer","poll","reset","spawn","spawn","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wrap_udp_socket","wrap_udp_socket"],"q":["quinn_runtime_bevy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,5,0,0,0,1,2,5,1,2,5,1,2,1,2,2,1,2,5,1,2,5,1,2,5,1,2,5,5,1,2,1,2,1,2,5,1,2,5,1,2,5,1,2,5,1,2],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[2],[[1,3],4],[[2,3],4],[[5,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[1,6],[[9,[[8,[7]]]]]],[[2,6],[[9,[[8,[7]]]]]],[[[9,[5]],10],11],[[[9,[5]],6]],[[1,[9,[[8,[12]]]]]],[[2,[9,[[8,[12]]]]]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[1,15],[[17,[[8,[16]]]]]],[[2,15],[[17,[[8,[16]]]]]]],"p":[[3,"BevyIoTaskPoolExecutor"],[3,"AsyncExecutor"],[3,"Formatter"],[6,"Result"],[3,"AsyncIoTimer"],[3,"Instant"],[8,"AsyncTimer"],[3,"Box"],[3,"Pin"],[3,"Context"],[4,"Poll"],[8,"Future"],[4,"Result"],[3,"TypeId"],[3,"UdpSocket"],[8,"AsyncUdpSocket"],[6,"Result"]]},\
"type_ulid":{"doc":"A simple crate containing the <code>TypeUlid</code> trait to allow …","t":[12,18,18,8,24,8,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["0","RAND_BITS","TIME_BITS","TypeUlid","TypeUlid","TypeUlidDynamic","ULID","Ulid","borrow","borrow_mut","clone","clone_into","cmp","datetime","default","eq","fmt","fmt","from","from","from","from_datetime","from_datetime_with_source","from_parts","from_str","from_string","hash","increment","into","is_nil","new","nil","partial_cmp","random","timestamp_ms","to_owned","to_str","to_string","to_string","try_from","try_into","type_id","ulid","vzip","with_source"],"q":["type_ulid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The number of bits in a Ulid’s random portion","The number of bits in a Ulid’s time portion","Associates a <code>Ulid</code> ID to a Rust type.","Derive macro for the <code>TypeUlid</code> trait.","Allows reading a type’s <code>Ulid</code> from the context of a trait …","The type’s <code>Ulid</code>.","A Ulid is a unique 128-bit lexicographically sortable …","","","","","","Gets the datetime of when this Ulid was created accurate …","","","","","Returns the argument unchanged.","","","Creates a new Ulid with the given datetime","Creates a new Ulid with the given datetime and random …","Create a Ulid from separated parts.","","Creates a Ulid from a Crockford Base32 encoded string","","Increment the random number, make sure that the ts millis …","Calls <code>U::from(self)</code>.","Test if the Ulid is nil","Creates a new Ulid with the current time (UTC)","The ‘nil Ulid’.","","Gets the random section of this ulid","Gets the timestamp section of this ulid","","Creates a Crockford Base32 encoded string that represents …","","Creates a Crockford Base32 encoded string that represents …","","","","","","Creates a new Ulid using data from the given random number …"],"i":[1,1,1,0,0,0,16,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,1,1],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[1,3],[[],1],[[1,1],4],[[1,5],[[7,[6]]]],[[1,5],[[7,[6]]]],[[]],[8,1],[[],1],[3,1],[3,1],[[9,8],1],[10,[[7,[1]]]],[10,[[7,[1,11]]]],[1],[1,[[12,[1]]]],[[]],[1,4],[[],1],[[],1],[[1,1],[[12,[2]]]],[1,8],[1,9],[[]],[1,[[7,[10,13]]]],[[],14],[1,14],[[],7],[[],7],[[],15],[[],1],[[]],[[],1]],"p":[[3,"Ulid"],[4,"Ordering"],[3,"SystemTime"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"u128"],[15,"u64"],[15,"str"],[4,"DecodeError"],[4,"Option"],[4,"EncodeError"],[3,"String"],[3,"TypeId"],[8,"TypeUlid"],[8,"TypeUlidDynamic"]]},\
"type_ulid_macros":{"doc":"","t":[24],"n":["TypeUlid"],"q":["type_ulid_macros"],"d":["Derive macro for the <code>TypeUlid</code> trait."],"i":[0],"f":[0],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
